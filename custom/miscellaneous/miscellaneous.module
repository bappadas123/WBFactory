<?php

 function miscellaneous_custom_theme() {
  global $user;
  if(user_is_logged_in()){
  if(!in_array(variable_get('administrator', 3), array_keys($user->roles))){
  	//print_r($user->roles); exit;
	return 'custom_dashboard';
  }/*else if(in_array(variable_get('applicant', 4), array_keys($user->roles))){
  	print_r($user->roles); exit;
  }*/
  }
}
function miscellaneous_user_login(&$edit, $account) {
	
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
	  
    if(in_array('applicant', $account->roles)) {
      $_GET['destination'] = 'applicant-dashboard';
    }/*elseif(in_array('plansection', $account->roles)) {
      $_GET['destination'] = 'plansection-dashboard';
    }elseif(in_array('regsection', $account->roles)) {
      $_GET['destination'] = 'regsection-dashboard';
    }*/elseif(in_array('cmsmanager', $account->roles)) {
      $_GET['destination'] = 'cmsmanager-dashboard';
    }elseif(in_array('factoryinspector', $account->roles)) {
      $_GET['destination'] = 'inspector-dashboard';
    }elseif(in_array('deputychief', $account->roles)) {
      $_GET['destination'] = 'deputychief-dashboard';
	}elseif(in_array('factoryinspector_chemical', $account->roles)) {
      $_GET['destination'] = 'inspector-chemical-dashboard';
    }elseif(in_array('deputychief_chemical', $account->roles)) {
      $_GET['destination'] = 'deputychief-chemical-dashboard';  
    }elseif(in_array('jointchief', $account->roles)) {
      $_GET['destination'] = 'jointchief-dashboard';
    }elseif(in_array('jointchief_chemical', $account->roles)) {
      $_GET['destination'] = 'jointchief-chemical-dashboard';
    }elseif(in_array('chief', $account->roles)) {
      $_GET['destination'] = 'chief-dashboard';
    }/*elseif(in_array('licencesection', $account->roles)) {
      $_GET['destination'] = 'licsection-dashboard';
    }*/elseif(in_array('Receiving Cell', $account->roles)) {
      $_GET['destination'] = 'receiving-dashboard';
    }elseif(in_array('Statistical Cell Incharge', $account->roles)) {
      $_GET['destination'] = 'statistical-dashboard';
    }
  }
}

function miscellaneous_menu() {
}
//naren start
function get_all_state($value_country=''){
	//echo "country".$value_country;
	$default_select 	= array(""=>"- Select State -");
	$result 			= db_query("SELECT id,statename FROM {fa_state_master} where country_id = 1 order by statename");
	$list 				= array();
	foreach ($result as $record) {
		$list[$record->id] = t('@districtname', array(
			'@districtname' => $record->statename,
		));
	}
	//print_r($default_select+$list);
	return ($default_select+$list);
}

function get_all_state_by_name($value_state=''){
	$result 			= db_query("SELECT id FROM {fa_state_master} where statename = $value_state");
	if($result->rowCount()>0){
		$x	=	$result->fetchAssoc();
		$state_id	=	$x['id'];
	}
	return $state_id;
}

function get_district_by_name($value_district=''){
	$result 			= db_query("SELECT district_code FROM {fa_district_master} where district_name = $value_district");
	if($result->rowCount()>0){
		$x	=	$result->fetchAssoc();
		$district_code	=	$x['district_code'];
	}
	return $district_code;
}

function get_district_by_id($value_state=''){
	$default_select 	= array(""=>"- Select District -");
	$result 			= db_query("SELECT district_code,district_name FROM {fa_district_master} where is_active = 'Y' and state_id = $value_state order by district_name");
	$list 				= array();
	foreach ($result as $record) {
		$list[$record->district_code] = t('@districtname', array(
			'@districtname' => $record->district_name,
		));
	}
	return ($default_select+$list);
}

function common_custom_post_office_list_new($value_post_office=''){
	//echo $value_post_office; exit;
	$default_poselect 	= array(""=>"- Select Post Office -");
	$all_po 			= array();
	$query_po 			= db_select('fa_all_india_pin_code', 'aipc');
	$query_po			->fields('aipc',array('id','po_name'));
	$query_po			->condition('aipc.pincode', $value_post_office, '=');
	$query_po			->orderBy('aipc.po_name', 'ASC');
	$result_po 			= $query_po->execute(); 
	if(!empty($result_po)) {
		
	  	foreach($result_po as $rows) {
			$all_po[$rows->id] = t('@po_name', array('@po_name' => $rows->po_name));
	  	}    
	}
	//print_r($all_po);
 	if (isset($all_po)) {
		//print_r($all_po);			
		return ($default_poselect + $all_po);	
	} else {				
		return $default_poselect;
	}
}

function common_custom_user_subdivisionlist_list_new($value_dist=''){
	$default_subdvselect 	= array(""=>"Select Sub-Division");
	$all_subdvs 			= array();
	$query_subdv 			= db_select('fa_sub_division', 'subdv');
	$query_subdv			->fields('subdv',array('sub_div_code','sub_div_name'));
	$query_subdv			->orderBy('subdv.sub_div_name', 'ASC');
	$query_subdv			->condition('subdv.is_active','Y');
	$query_subdv			->condition('subdv.district_code',(int)$value_dist);
	$result_subdv 			= $query_subdv->execute(); 
	if(!empty($result_subdv)) {      
	  	foreach($result_subdv as $rows) {
			$all_subdvs[$rows->sub_div_code] = t('@subdvsname', array('@subdvsname' => $rows->sub_div_name));
	  	}    
	}
 	if (isset($all_subdvs)) {			
		return ($default_subdvselect + $all_subdvs);	
	} else {				
		return $default_subdvselect;
	}
}

function common_custom_user_estatelist_list_new($value_dist=''){
    $last_select 	= array(111=>"Other");
	$default_estselect 	= array(""=>"Select Estate Type");
	$all_ests 			= array();
	$query_est 			= db_select('fa_estate', 'fe');
	$query_est			->fields('fe',array('id','estate_name'));
	$query_est			->orderBy('fe.id', 'ASC');
	$query_est			->condition('fe.is_active','Y');
	$query_est			->condition('fe.district_code',(int)$value_dist);
	$result_est 			= $query_est->execute(); 
	if(!empty($result_est)) {      
	  	foreach($result_est as $rows) {
			$all_ests[$rows->id] = t('@estsname', array('@estsname' => $rows->estate_name));
	  	}    
	}
 	if (isset($all_ests)) {			
		return ($default_estselect + $all_ests + $last_select);	
	} else {				
		return $default_estselect;
	}
}
/*function common_custom_user_estatelist_list_new($value_dist=''){  //echo $value_dist; //die;
	$default_estselect 	= array(""=>"Select Estate Type");
	$all_ests 			= array();
	$query_est 			= db_select('fa_estate', 'fe');
	$query_est			->fields('fe',array('id','estate_name'));
	$query_est			->orderBy('fe.estate_name', 'ASC');
	$query_est			->condition('fe.is_active','Y');
	$query_est			->condition('fe.district_code',(int)$value_dist);
	$result_est 		= $query_est->execute(); 
	print_r($result_est);
	if(!empty($result_est)) {      
	  	foreach($result_est as $rows) {
			$all_ests[$rows->id] = t('@estname', array('@estname' => $rows->estate_name));
	  	}    
	}
 	if (isset($all_ests)) {			
		return ($default_estselect + $all_ests);	
	} else {				
		return $default_estselect;
	}
}*/

function common_custom_user_areatype_list_new($value_loc_e_dist, $value_loc_e_subdivision){
	
	$default_areatypeselect 	= array(""=>"- Select AreaType -");
	$all_areatype 				= array();
	$query_areatype 			= db_select('fa_block_mun_master', 'bmm');
	$query_areatype				->fields('bmm',array('type'));
	$query_areatype				->condition('bmm.distict_code', trim($value_loc_e_dist));
	$query_areatype				->condition('bmm.sub_division_code', trim($value_loc_e_subdivision));
	$query_areatype				->groupBy('bmm.type');
	$result_areatype 			= $query_areatype->execute(); 
	if(!empty($result_areatype)) {      
			foreach($result_areatype as $rows) {
				if($rows->type=='B'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Block'));
				}if($rows->type=='M'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Municipality'));
				}if($rows->type=='C'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Corporation'));
				}if($rows->type=='S'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'SEZ'));
				}if($rows->type=='N'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Notified Area'));
				}
				
			}
	}
 	if (isset($all_areatype)) {			
		return ($default_areatypeselect + $all_areatype);	
	} else {				
		return $default_areatypeselect;
	}
}

function common_custom_user_block_list_new($value_subdv, $value_areatype){
	$default_blockselect 	= array(""=>"- Select -");
	$all_blocks 			= array();
	$query_block 			= db_select('fa_block_mun_master', 'blm');
	$query_block			->fields('blm',array('block_code','block_mun_name'));
	$query_block			->orderBy('blm.block_mun_name', 'ASC');
	$query_block			->condition('blm.sub_division_code',$value_subdv,'=');
	$query_block			->condition('blm.type',$value_areatype,'=');
	$result_block 			= $query_block->execute(); 
	if(!empty($result_block)) {      
	  	foreach($result_block as $rows) {
			$all_blocks[$rows->block_code] = t('@blockname', array('@blockname' => $rows->block_mun_name));
		}    
	}

	if (isset($all_blocks)) {
		return ($default_blockselect + $all_blocks);
	} else {
		return $default_blockselect;
	}
}

function common_custom_user_villward_list_new($value_villwared,$value_villwardtype){
	$default_villwardselect 	= array(""=>"- Select -");
	$all_villwards 				= array();
	$query_villwardkname 		= db_select('fa_village_ward_master', 'vwm');
	$query_villwardkname		->fields('vwm',array('village_code','village_name'));
	if($value_villwardtype == 'W'){
		$query_villwardkname		->orderBy('vwm.ord', 'ASC');
	}else{
		$query_villwardkname		->orderBy('vwm.village_name', 'ASC');
	}
	
	$query_villwardkname		->condition('vwm.block_code',trim($value_villwared),'=');
	$query_villwardkname		->condition('vwm.category',trim($value_villwardtype),'=');
	$result_villwardkname 		= $query_villwardkname->execute(); 
	if(!empty($result_villwardkname)) {      
		 foreach($result_villwardkname as $rows) {
			if($value_villwardtype == 'W')
				$all_villwards[$rows->village_code] = t('@villwardkname', array('@villwardkname' => 'Ward-'.$rows->village_name));	
			else				
				$all_villwards[$rows->village_code] = t('@villwardkname', array('@villwardkname' => ucwords($rows->village_name)));
		 }    
	}

	if (isset($all_villwards)) {
		return ($default_villwardselect + $all_villwards);
	} else {
		return $default_villwardselect;
	}
	//die($value_villwared.$value_villwardtype);
}
function common_custom_user_ps_list_new($value_dist){
	$default_pselect 	= array(""=>"- Select -");
	$all_ps 			= array();
	$query_psname 		= db_select('fa_police_station', 'ps');
	$query_psname		->fields('ps',array('police_station_code','name_of_police_station'));
	$query_psname		->orderBy('ps.name_of_police_station', 'ASC');
	$query_psname		->condition('ps.dristrict_code',$value_dist,'=');
	$result_psname 		= $query_psname->execute(); 
	if(!empty($result_psname)) {      
		foreach($result_psname as $rows) {
			$default_pselect[$rows->police_station_code] = t('@psname', array('@psname' => $rows->name_of_police_station));
		}    
	}
 	if (isset($all_ps)) {
		return ($default_pselect + $all_ps);
	} else {
		return $default_pselect;
	}
}
//naren end

function get_all_statecode($value_state_code){
	
	$default_stateselect 	= array(""=>"- Select -");
	$all_state 				= array();
	$query_state 			= db_select('fa_state_master', 'state');
	$query_state			->fields('state',array('statename','id'));
	$query_state			->orderBy('state.id', 'ASC');
	$query_state			->	condition('state.id',$value_state_code);
	$result_state			= $query_state->execute(); 
	if(!empty($result_state)) {      
	  	foreach($result_state as $rows) {
			$all_state[$rows->id] = t('@satename', array('@satename' =>$rows->statename));
		}   
	}

	if (isset($all_state)) {
		return ($all_state);
	} else {
		return $default_stateselect;
	}

}

function get_all_districtcode_withstate($value_state_code,$values_district_code){
	
	$default_diselect 	=	 array(""=>"- Select -");
	$all_dis 			= 	array();
	$query_dis 			= 	db_select('fa_district_master', 'district');
	$query_dis			->	fields('district',array('district_name','district_code'));
	$query_dis			->	orderBy('district.id', 'ASC');
	$query_dis			->	condition('district.state_id',$value_state_code);
	$query_dis			->	condition('district.district_code',$values_district_code);
	$result_dis			= 	$query_dis->execute(); 
	if(!empty($result_dis)) {      
	  	foreach($result_dis as $rows) {
			$all_dis[$rows->district_code] = t('@district_name', array('@district_name' =>$rows->district_name));
		}   
	}

	if (isset($all_dis)) {
		return ($all_dis);
	} else {
		return $default_diselect;
	}

}
function is_dis_exists($value_state_code,$dis_res_code){
	
	$query_dis 	=  db_query("SELECT count(id) as dis_id  FROM {fa_district_master} WHERE state_id = '".$value_state_code."' and district_code='".$dis_res_code."' ")->fetchObject()->dis_id;
	
	return $query_dis;
	


}

function get_all_subdivcode_withdis($value_dis_code){
	
	$default_subelect 	=	 array(""=>"- Select -");
	$all_sub 			= 	array();
	$query_sub 			= 	db_select('fa_sub_division', 'sub');
	$query_sub			->	fields('sub',array('sub_div_name','sub_div_code'));
	$query_sub			->	orderBy('sub.id', 'ASC');
	$query_sub			->	condition('sub.district_code',$value_dis_code);
	$result_sub			= 	$query_sub->execute(); 
	if(!empty($result_sub)) {      
	  	foreach($result_sub as $rows) {
			$all_sub[$rows->sub_div_code] = t('@sub_div_name', array('@sub_div_name' =>$rows->sub_div_name));
		}   
	}

	if (isset($all_sub)) {
		return ($default_subelect + $all_sub);
	} else {
		return $default_subelect;
	}

}
function is_sub_exists($value_dis_code){
	
	$query_sub 	=  db_query("SELECT count(id) as sub_div  FROM {fa_sub_division} WHERE district_code = '".$value_dis_code."'")->fetchObject()->sub_div;
	
	return $query_sub;
	


}

function get_areatype_with_sub_dis($value_factory_district, $value_factory_sub_division){
	if(!empty($value_factory_district)&& !empty($value_factory_sub_division) ){
		$default_areatypeselect 	= array(""=>"- Select AreaType -");
		$all_areatype 				= array();
		$query_areatype 			= db_select('fa_block_mun_master', 'bmm');
		$query_areatype				->fields('bmm',array('type'));
		$query_areatype				->condition('bmm.distict_code', trim($value_factory_district));
		$query_areatype				->condition('bmm.sub_division_code', trim($value_factory_sub_division));
		$query_areatype				->groupBy('bmm.type');
		$result_areatype 			= $query_areatype->execute(); 
		if(!empty($result_areatype)) {      
			foreach($result_areatype as $rows) {
				if($rows->type=='B'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Block'));
				}if($rows->type=='M'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Municipality'));
				}if($rows->type=='C'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Corporation'));
				}if($rows->type=='S'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'SEZ'));
				}if($rows->type=='N'){
					$all_areatype[$rows->type] = t('@areatype', array('@areatype' =>'Notified Area'));
				}
				
			}    
		}
		
		if (isset($all_areatype)) {			
			return ($default_areatypeselect + $all_areatype);	
		} else {				
			return $default_areatypeselect;
		}
	}else{
		$default_areatypeselect 	= array(""=>"- Select AreaType -");
		return $default_areatypeselect;
	}
}

function is_areatype_exists($value_factory_district, $value_factory_sub_division){
	
	$query_area_type 	=  db_query("SELECT count(id) as area_type  FROM {fa_block_mun_master} WHERE distict_code = '".$value_factory_district."' and sub_division_code = '".$value_factory_sub_division."' ")->fetchObject()->area_type;
	
	return $query_area_type;
	


}

function get_block_municipality_other($value_factory_sub_division, $value_factory_area_type){
	if(!empty($value_factory_sub_division)&& !empty($value_factory_area_type) ){
	$default_blockselect 	= array(""=>"- Select -");
	$all_blocks 			= array();
	$query_block 			= db_select('fa_block_mun_master', 'blm');
	$query_block			->fields('blm',array('block_code','block_mun_name'));
	$query_block			->orderBy('blm.block_mun_name', 'ASC');
	$query_block			->condition('blm.sub_division_code',$value_factory_sub_division,'=');
	$query_block			->condition('blm.type',$value_factory_area_type,'=');
	$result_block 			= $query_block->execute(); 
	if(!empty($result_block)) {      
	  	foreach($result_block as $rows) {
			$all_blocks[$rows->block_code] = t('@blockname', array('@blockname' => $rows->block_mun_name));
		}    
	}

	if (isset($all_blocks)) {
		return ($default_blockselect + $all_blocks);
	} else {
		return $default_blockselect;
	}
	}else{
		$default_blockselect 	= array(""=>"- Select -");
		return $default_blockselect;
	
	}
}
function is_po_exists($pincode){
	
	$query_po 	=  db_query("SELECT count(id) as po  FROM {fa_all_india_pin_code} WHERE pincode = '".$pincode."'")->fetchObject()->po;
	
	return $query_po;
	


}

function get_all_po($pincode){
	
	$default_poselect 	=	 array(""=>"- Select -");
	$all_po 			= 	array();
	$query_po 			= 	db_select('fa_all_india_pin_code', 'po');
	$query_po			->	fields('po',array('po_name','id'));
	$query_po			->	orderBy('po.id', 'ASC');
	$query_po			->	condition('po.pincode',$pincode);
	$result_po			= 	$query_po->execute(); 
	if(!empty($result_po)) {      
	  	foreach($result_po as $rows) {
			$all_po[$rows->id] = t('@po_name', array('@po_name' =>$rows->po_name));
		}   
	}

	if (isset($all_po)) {
		return ($default_poselect + $all_po);
	} else {
		return $default_poselect;
	}

}
function get_full_villward($value_villwared,$value_villwardtype){
	if(!empty($value_villwared) && !empty($value_villwardtype)){
	$default_villwardselect 	= array(""=>"- Select -");
	$all_villwards 				= array();
	$query_villwardkname 		= db_select('fa_village_ward_master', 'vwm');
	$query_villwardkname		->fields('vwm',array('village_code','village_name'));
	$query_villwardkname		->orderBy('vwm.village_name', 'ASC');
	$query_villwardkname		->condition('vwm.block_code',$value_villwared,'=');
	$query_villwardkname		->condition('vwm.category',$value_villwardtype,'=');
	$result_villwardkname 		= $query_villwardkname->execute(); 
	if(!empty($result_villwardkname)) {      
		 foreach($result_villwardkname as $rows) {
			if($value_villwardtype == 'W')
				$all_villwards[$rows->village_code] = t('@villwardkname', array('@villwardkname' => 'Ward.'.$rows->village_name));	
			else				
				$all_villwards[$rows->village_code] = t('@villwardkname', array('@villwardkname' => ucwords($rows->village_name)));
		 }    
	}

	if (isset($all_villwards)) {
		return ($default_villwardselect + $all_villwards);
	} else {
		return $default_villwardselect;
	}
}else{
	$default_villwardselect 	= array(""=>"- Select -");
	return $default_villwardselect;
}
}
function is_block_mun_vill_exists($value_factory_area_details){
	
	$query_bo_mun_vil	=  db_query("SELECT count(id) as bo_mun_vil  FROM {fa_village_ward_master} WHERE block_code = '".$value_factory_area_details."'")->fetchObject()->bo_mun_vil;
	
	return $query_bo_mun_vil;
	


}

function is_director_exists(){
	
	$is_manager	=  db_query("SELECT count(id) as bo_mun_vil  FROM {fa_director_details}")->fetchObject()->bo_mun_vil;
	
	return $is_manager;
	


}
function get_all_director_data(){
	
	$director_details	=  db_query("SELECT *   FROM {fa_director_details} where active_inactive_director =1 order by id desc")->fetchAll();
	
	return $director_details;
}
function is_state_exists($state_code){
	
	$is_state_code	=  db_query("SELECT id as state_code   FROM {fa_state_master} where id =".$state_code."");//->fetchObject()->state_code;
	
	return $is_state_code;
}
function is_ps_exists($dis_code){
	
	$is_ps_code	=  db_query("SELECT id as ps_code   FROM {fa_police_station} where id =".$dis_code."");//->fetchObject()->state_code;
	
	return $is_ps_code;
}
function get_all_ps($dis_code){
	
	$default_psselect 	=	 array(""=>"- Select -");
	$all_ps 			= 	array();
	$query_ps 			= 	db_select('fa_police_station', 'ps');
	$query_ps			->	fields('ps',array('name_of_police_station','police_station_code'));
	$query_ps			->	orderBy('ps.id', 'ASC');
	$query_ps			->	condition('ps.dristrict_code',$dis_code);
	$result_ps			= 	$query_ps->execute(); 
	if(!empty($result_ps)) {      
	  	foreach($result_ps as $rows) {
			$all_ps[$rows->police_station_code] = t('@posname', array('@posname' =>$rows->name_of_police_station));
		}   
	}

	if (isset($all_ps)) {
		return ($default_psselect + $all_ps);
	} else {
		return $default_psselect;
	}

}

function get_all_data_with_pincode($value_pincode){
	
		$query 	= 	db_select('fa_all_india_pin_code','p')
						->	fields('p',array('districtname','statename','pincode','district_code','state_code','po_name','id'))
						->	condition('p.pincode',trim($value_pincode),'=') ;
	 	$result = $query->execute()->fetchAssoc();
	
		//$state_code = $result['state_code'];
		//echo $state_code;
		return $result;
}
			
function get_pincode_autocomplete($string='') {
	
	 $matches = array();
	 $qry = db_select ('fa_all_india_pin_code', 'p');
     $qry->fields('p', array('id','pincode', 'statename', 'state_code','district_code','districtname','po_name')); 
	 $qry->condition('pincode', '%' . trim($string) . '%', 'LIKE');
	 $qry->range(0, 10);
	 //echo $qry.$string; exit;
	 $result =  $qry->execute();
	  // save the query to matches
    foreach ($result as $row) {
	  $matches[$row->pincode] = check_plain($row->pincode."-".$row->districtname."-".$row->statename);
    }

    // Return the result to the form in json
    drupal_json_output($matches);
}

function get_full_address($table='', $type='', $id='', $fieldArr=''){
		//echo $table.'<br/>'.$type.'<br/>'.$id.'<br/>'; print_r($fieldArr);
		$text_AreaType_loc ='';
		if(($fieldArr=='')|| empty($fieldArr)){
			$fieldArr				=	array();
		}
		$location_address_result	=	'';
		$alias						=	$table.'ali';
		
		$query_location_address		= 	db_select($table, $alias);
		if($fieldArr[0]!='' || $fieldArr[0]!=0){
			$query_location_address		->	LeftJoin('fa_district_master', 'd', 'd.district_code='.$alias.'.'.$fieldArr[0]);
			$query_location_address		->	fields('d', array('district_name'));
			if($fieldArr[1]!='' || $fieldArr[1]!=0){
				$query_location_address		->	LeftJoin('fa_sub_division', 's', 's.sub_div_code='.$alias.'.'.$fieldArr[1]);
				$query_location_address		->	fields('s', array('sub_div_name'));
				if($fieldArr[3]!='' || $fieldArr[3]!=0){
					$query_location_address		->	LeftJoin('fa_block_mun_master', 'b', 'b.block_code='.$alias.'.'.$fieldArr[3]);
					$query_location_address		->	fields('b', array('block_mun_name'));
					if($fieldArr[4]!='' || $fieldArr[4]!=0){
						$query_location_address		->	LeftJoin('fa_village_ward_master', 'v', 'v.village_code='.$alias.'.'.$fieldArr[4]);
						$query_location_address		->	fields('v', array('village_name'));
						if($fieldArr[5]!='' || $fieldArr[5]!=0){
							$query_location_address		->	LeftJoin('fa_police_station', 'p', 'p.police_station_code='.$alias.'.'.$fieldArr[5]);
							$query_location_address		->	fields('p', array('name_of_police_station'));
							if($fieldArr[7]!='' || $fieldArr[7]!=0){
								$query_location_address		->	LeftJoin('fa_state_master', 'state', 'state.id='.$alias.'.'.$fieldArr[7]);
								$query_location_address		->	fields('state', array('statename'));
							}if($fieldArr[8]!='' || $fieldArr[8]!=0){
								$query_location_address		->	LeftJoin('fa_all_india_pin_code', 'pin', 'pin.id='.$alias.'.'.$fieldArr[8]);
								$query_location_address		->	fields('pin', array('po_name'));
							}
						}
					}
				}
			}		
		}
		
		if($type=="sub-table"){
			$query_location_address		->	fields($alias, $fieldArr);
			$query_location_address		->	condition($alias.'.id',$id,'=');		
		}

		$location_result = $query_location_address->execute()->fetchAssoc();
		//print_r($location_result);die($query_location_address);
		if(!empty($location_result)){
			
			if($location_result[$fieldArr[2]]=="B"){
				$text_AreaType_loc = "Block - ";
				$areatype_loc_name = ucwords($location_result['village_name']);
			}elseif($location_result[$fieldArr[2]]=="M"){
				$areatype_loc_name = 'Ward-'.$location_result['village_name']; 
			}elseif($location_result[$fieldArr[2]]=="C"){
				$areatype_loc_name = $location_result['village_name'];
			}elseif($location_result[$fieldArr[2]]=="N"){
				$areatype_loc_name = 'Notified Area - '.$location_result['village_name'];
			}
			
			if($location_result[$fieldArr[0]] == 17){  //If the area is Kolkata ***/
				
					if(!empty($location_result['village_name'])){
						
						$location_address_result 	.= $areatype_loc_name;
					}
					
					if(!empty($location_result['name_of_police_station'])){
						$location_address_result 	.= ',&nbsp;PS - '.$location_result['name_of_police_station'];
					}
					
					if(!empty($location_result['district_name'])){
						$location_address_result 	.= ',&nbsp;'.$location_result['district_name'].'- '.$location_result[$fieldArr[6]];
					}
					
			}else{
				
					//If the state is West Bengal ***/
					
					if($location_result[$fieldArr[7]] == 1 || empty($fieldArr[7])){ 
						
						if(!empty($location_result['village_name'])){
							$location_address_result 	.= $areatype_loc_name;
						}
						
						if(!empty($location_result[$fieldArr[2]]) && !empty($location_result['block_mun_name']) ){
							$location_address_result 	.= ',&nbsp;'.$text_AreaType_loc.$location_result['block_mun_name'].',<br/>';
						}
						
						if(!empty($location_result['sub_div_name'])){
							$location_address_result 	.= $location_result['sub_div_name'];
						}
						
						if(!empty($location_result['name_of_police_station'])){
							$location_address_result 	.= ',&nbsp;PS - '.$location_result['name_of_police_station'];
						}
						if(!empty($location_result['po_name'])){
							$location_address_result 	.= ',&nbsp;PO - '.$location_result['po_name'];
						}
						
						if(!empty($location_result['district_name'])){
							$location_address_result 	.= ',<br/>'.$location_result['district_name'];
						}
						
						if(!empty($location_result[$fieldArr[6]])){
							$location_address_result 	.= '&nbsp;, PIN- '.$location_result[$fieldArr[6]];
						}
						if(!empty($location_result[$fieldArr[7]])){
							$location_address_result 	.= ',&nbsp;'.$location_result['statename'];
						}else{
							$location_address_result 	.= '';
						}
					}else{
					
						//If the state is Others ***/
						
						if(!empty($location_result['sub_div_name'])){
							$location_address_result 		.= $location_result['sub_div_name'];
						}else{
							$location_address_result 		.= '';
						}
						
						
						if( (!empty($location_result['district_name'])) && !empty($location_result['sub_div_name'])) {
							$location_address_result 	.= ',<br/>'.$location_result['district_name'];
						}else if( (!empty($location_result['district_name'])) && empty($location_result['sub_div_name']) ){
							$location_address_result 	.= $location_result['district_name'];
						}else{
							$location_address_result 	.= '';
						}
						
						
						
						if ( (!empty($location_result[$fieldArr[7]])) && !empty($location_result['district_name'])){
							$location_address_result 	.= ',&nbsp;'.$location_result['statename'];
						}else if( (!empty($location_result[$fieldArr[7]])) && empty($location_result['district_name']) ){
							$location_address_result 	.= $location_result['statename'];
						}else{
							$location_address_result 	.= '';
						}
				}
			}
		}
		
	return $location_address_result;
}

function get_all_master_service(){
	
	$default_select 	= array(""=>"- Select-");
	$result 			= db_query("SELECT id,service_name FROM {fa_service_master} where service_parent_id = 0 and is_active = 1 order by id");
	$list 				= array();
	foreach ($result as $record) {
		$list[$record->id] = t('@service_name', array(
			'@service_name' => $record->service_name,
		));
	}
	
	return ($default_select+$list);
}
function get_all_sub_service($service_parent_id){
	
	$default_select 	= array(""=>"- Select-");
	$result 			= db_query("SELECT id,service_name FROM {fa_service_master} where service_parent_id = '".$service_parent_id."' order by id");
	$list 				= array();
	foreach ($result as $record) {
		$list[$record->id] = t('@service_name', array(
			'@service_name' => $record->service_name,
		));
	}
	
	return ($default_select+$list);
}
function is_subservice_exists($service_parent_id){
	if(!empty($service_parent_id)){
	
	$is_service	=  db_query("SELECT id as service_count  FROM {fa_service_master} where service_parent_id =".$service_parent_id."")->fetchObject()->service_count;
	return $is_service;
	}
	
	
	

}
function get_max_decission_service($created_by){
	
	$default_select 	= array(""=>"- Select-");
	$result 			= db_query("SELECT decission_service_id,decission_service_parent_id ,factory_type_id,identification_number,registration_number,registration_date,plan_approval_number_exten,plan_approval_date_exten,plan_approval_number,plan_approval_date FROM fa_decission_service where id = (select max(id) from fa_decission_service) and created_by = '".$created_by."'")->fetchAssoc();
	
	
	return $result;
}
function get_decission_service_id($id){
	
	$default_select 	= array(""=>"- Select-");
	$result 			= db_query("SELECT decission_service_id,factory_type_id FROM fa_decission_service where id ='".$id."'")->fetchAssoc();
	
	
	return $result;
}function get_worker_detials($application_id){
	
	$query_worker_details 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details	-> fields('worker_details',array());
	$query_worker_details	-> condition('worker_details.application_id', $application_id);
	$query_worker_details	-> orderBy('worker_details.id', 'ASC');
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	
	
	return $result_worker_details;
}
function get_factory_type($service_parent_id){
	$factory_type_list 			= array();
	$default_select 	= array(""=>"- Select-");
	if($service_parent_id !=1){
		$query_factory_type 	= db_select('fa_factory_type_master', 'factorytype');
		$query_factory_type		->fields('factorytype',array('id','factory_type'));
		$query_factory_type		->orderBy('factorytype.id', 'ASC');
		$result_factory_type 	= $query_factory_type->execute(); 
	}if($service_parent_id ==1){
		$query_factory_type 	= db_select('fa_factory_type_master', 'factorytype');
		$query_factory_type		->fields('factorytype',array('id','factory_type'));
		$query_factory_type		->condition('factorytype.id', '3', '!=');
		$query_factory_type		->orderBy('factorytype.id', 'ASC');
		
		$result_factory_type 	= $query_factory_type->execute(); 
	}
	
	foreach ($result_factory_type as $record) {
		$factory_type_list[$record->id] = t('@factory_type', array(
			'@factory_type' => $record->factory_type,
		));
	}
	
	return ($default_select+$factory_type_list);
}
function encryption_decryption_fun($action, $string) {
    $output 		= false;
    $encrypt_method = "AES-256-CBC";
    
    $secret_key 	= 'factory';
    $secret_iv 		= 'Lc#Nic@2015';
	
    $key = hash('sha512', $secret_key);
	
    $iv = substr(hash('sha512', $secret_iv), 0, 16);

    if( $action == 'encrypt' ) {
        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
        $output = base64_encode($output);
    }else if( $action == 'decrypt' ){
        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
    }
    return $output;
}

function create_validate_year($amenablity_date,$application_for){
$amenablity_date_mofify = 	date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date))));

	
	$default_select 	= array(""=>"- Select-");
	if(empty($amenablity_date_mofify) && empty($application_for)){
		return $default_select;
	}else{
	
	 $year_list = array();
	 $year ='';
	 $year2 ='';
	 $month ='';
	 $date	='';
	
	
	if($amenablity_date_mofify<='2015-12-31'){
		$year= date('Y', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=2015-$year;
		$diff1=$current_year-2015;
		$diff2 = $diff+$diff1;
		for($i=0; $i<=$diff+$application_for;$i++){
			if($year2+$i == 2016 ){
				 $pre_date= $year2+$i;
				 $next_date= $year2+$i+2;
				  $year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				  $i =$i+3;
				 
			 }if($year2+$i > 2016){
				  $pre_date= $year2+$i;
				  $next_date= $pre_date+$application_for;
				  $year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				  break;
				
			 }else{
				  $year_list[$year2+$i]= $year2+$i;
			 }
			
			
			 
		}
	}
    if($amenablity_date_mofify>='2016-01-01' &&  $amenablity_date_mofify<='2016-12-29'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=$current_year-2016;
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			
			
			if($year2+$i == 2016){
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1094 day"));
				$year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				$i+2;
			}if($year2+$i > 2016){
				  $pre_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1095 day"));
				 $day = "+".($application_for*364)."day";
				$next_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date)) .$day));
				  $year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				  break;
			}else{
						$year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
			}
		}
	}
	if($amenablity_date_mofify>='2016-12-30' &&  $amenablity_date_mofify<='2017-11-16'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=$current_year-2016;
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			$j= $i;
			
			if($year == 2016 || $year == 2017){
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1094 day"));
				$year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				$i+2;
			}if($year2+$i > 2016 || $year2+$i >2017){
				  $pre_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1095 day"));
				 $day = "+".($application_for*364)."day";
				$next_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date)) .$day));
				  $year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				  break;
			}
			else{
				
				$year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
			}
		}
	}
	if($amenablity_date_mofify>='2017-11-17'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			
			
			 $day = "+".($application_for*364)."day";
			 
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . $day));
				$year_list[$pre_date." TO ".$next_date]= $pre_date." TO ".$next_date;
				 break;
			}
	}
	$value = $default_select+$year_list;
	return $value;
	}
	//echo $value;
	
	
			
}

/*function create_validate_year1($amenablity_date,$application_for){
$amenablity_date_mofify = 	date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date))));

	if(empty($amenablity_date_mofify) && empty($application_for)){
		return $default_select;
	}else{
	
	 
	 $year ='';
	 $year2 ='';
	 $month ='';
	 $date	='';
	
	
	if($amenablity_date_mofify<='2015-12-31'){
		$year= date('Y', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=2015-$year;
		$diff1=$current_year-2015;
		$diff2 = $diff+$diff1;
		for($i=0; $i<=$diff+$application_for;$i++){
			if($year2+$i == 2016 ){
				 $pre_date= $year2+$i;
				 $next_date= $year2+$i+2;
				  $year_list .= $pre_date." TO ".$next_date.',';
				  $i =$i+3;
				 
			 }if($year2+$i > 2016){
				  $pre_date= $year2+$i;
				  $next_date= $pre_date+$application_for;
				  $year_list .= $pre_date." TO ".$next_date.',';
				  break;
				
			 }else{
				  $year_list .= $year2+$i.',';
			 }
			
			
			 
		}
	}
    if($amenablity_date_mofify>='2016-01-01' &&  $amenablity_date_mofify<='2016-12-29'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=$current_year-2016;
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			
			
			if($year2+$i == 2016){
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1094 day"));
				$year_list .= $pre_date." TO ".$next_date.',';
				$i+2;
			}if($year2+$i > 2016){
				  $pre_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1095 day"));
				 $day = "+".($application_for*364)."day";
				$next_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date)) .$day));
				  $year_list .= $pre_date." TO ".$next_date.',';
				  break;
			}else{
						$year_list= $pre_date." TO ".$next_date.',';
			}
		}
	}
	if($amenablity_date_mofify>='2016-12-30' &&  $amenablity_date_mofify<='2017-11-16'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		$current_year = date("Y");
		$diff=$current_year-2016;
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			$j= $i;
			
			if($year == 2016 || $year == 2017){
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1094 day"));
				$year_list .= $pre_date." TO ".$next_date.',';
				$i+2;
			}if($year2+$i > 2016 || $year2+$i >2017){
				  $pre_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . " + 1095 day"));
				 $day = "+".($application_for*364)."day";
				$next_date= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date)) .$day));
				  $year_list .= $pre_date." TO ".$next_date.',';
				  break;
			}
			else{
				
				$year_list .= $pre_date." TO ".$next_date.',';
			}
		}
	}
	if($amenablity_date_mofify>='2017-11-17'){
		$year= date('Y', strtotime($amenablity_date));
		$month= date('m', strtotime($amenablity_date));
		$date= date('d', strtotime($amenablity_date));
		$year2= date('Y', strtotime($amenablity_date));
		
		for( $i=0; $i<=$diff+$application_for;$i++){
			
			
			 $day = "+".($application_for*364)."day";
			 
				$pre_date= $year2+$i.'-'.$month.'-'.$date;
				
				$next_date = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date)) . $day));
				$year_list .= $pre_date." TO ".$next_date;
				 break;
			}
	}
	
	return $year_list;
	}
	
	
	
			
}*/

function get_service_name($service_id){
	
	$service_name	=  db_query("SELECT service_name  FROM {fa_service_master} where id =".$service_id."")->fetchObject()->service_name;;
	
	return $service_name;
}

function isnumaric_valiadtion($element, &$form_state){
	
  
  	$val			=	$form_state['values'];
	$txtValue		=	trim($element['#value']);
	if($txtValue != '' && !is_numeric($txtValue)) {
		form_error($element, t($element['#title'].' SHOULD BE NUMBER'));
		$form_state['rebuild'] = TRUE;
	}

	
}
function get_fa_cafa($application_id=''){ 
	
	$query_factory_info = db_select('fa_cafa', 'cafa');
	$query_factory_info	->fields('cafa',array());
	
	$query_factory_info	->condition('cafa.id',$application_id);
	
	//echo $query_factory_info;exit;
	$query_factory_info_details = $query_factory_info->execute()->fetchAssoc(); 
		
	return $query_factory_info_details;
	
}
function documents_master($service_id,$factory_type_id){
	$factory_documents_list 			= array();
	$default_select 	= array(""=>"- Select-");
	
		$query_factory_documents 	=  db_select('fa_documents_master', 'documents');
		$query_factory_documents	-> fields('documents',array('id','document_name'));
		$query_factory_documents	-> condition('documents.document_service_id', $service_id, '=');
		$query_factory_documents	-> condition('documents.document_factory_id', $factory_type_id, '=');
		$query_factory_documents	-> orderBy('documents.id', 'ASC');
		
		$result_factory_documents 	= $query_factory_documents->execute(); 
	
	foreach ($result_factory_documents as $record) {
		$factory_documents_list[$record->id] = t('@document_name', array(
			'@document_name' => $record->document_name,
		));
	}
	
	return ($default_select+$factory_documents_list);
}

function get_details_applicant($applicant_id){
	
	$query_details_applicant = db_select('users', 'u');
	$query_details_applicant->leftJoin('fa_user_details', 'fud', 'u.uid = fud.uid');  
	$query_details_applicant->fields('u', array('name'));
	//$query_details_applicant->fields('fud', array('id','fullname','email','mobile','dob','gender','addrline'));
	$query_details_applicant->fields('fud');
	$query_details_applicant->condition('u.uid', $applicant_id, '=');
	$result = $query_details_applicant->execute();
	$details_applicant = $result->fetchAssoc();
	return $details_applicant;
	
	/*$query_details_applicant 	=  db_select('fa_user_details', 'user_details');
	$query_details_applicant	-> fields('user_details',array('id','fullname','email','mobile','dob','gender','addrline'));
	$query_details_applicant	-> condition('user_details.uid', $applicant_id, '=');
	$details_applicant			= $query_details_applicant->execute()->fetchAssoc(); 
	return $details_applicant;*/
}

/*function get_application($applicant_id){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->condition('cafa.created_by ',$applicant_id,'=');
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
}*/
//---------------change-----------------
function get_application($applicant_id){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->leftjoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number','backlog_plan_approval_no','factory_plan_approval_number','uploaded_letter','uploaded_plan','modification_date','backlog_plan_approval_date','plan_approval_date','factory_registrstion_no','registration_date','backlog_registration_no','backlog_registration_date','factory_license_no','license_date','backlog_license_date','backlog_license_number','approve_dsc_reg_file_id','approve_dsc_licence_file_id','renewal_dim_appoved','license_valid_upto','is_backlog','tm_factory_id','tm_migrated_flag',
	'approve_dsc_licence_file','approve_dsc_reg_licence_file','approve_dsc_reg_file','uploaded_pdf','backlog_uploaded_letter','backlog_uploaded_plan'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type')); 
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.created_by ',$applicant_id,'=');
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll();   
	return $application_result;
}
function get_application_withid($application_id){ //echo $application_id;

	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->leftjoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array());//'plan_approve_status','registration_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','factory_previous_name','factory_pan','occupier_name','occupier_email_id','addrline_off','addrline_oprsntadr','addrline_oprmntadr'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name','zone_details'));
	$fetch_application->condition('cafa.id ',$application_id,'=');
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	//echo $fetch_application; die;
	return $application_result;
	}
	
	
	function get_application_service($application_id,$service_id,$factory_type_id,$reference_no){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application	->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application	->fields('cafa', array());
	$fetch_application	->fields('zone', array('zone_name'));
	$fetch_application	->condition('cafa.id ',$application_id,'=');
	$fetch_application	-> condition('cafa.service_id', $service_id);
	$fetch_application	-> condition('cafa.factory_typeid', $factory_type_id);
	$fetch_application	-> condition('cafa.reference_number', $reference_no);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
}
function get_occupier_details_service($application_id,$service_id,$factory_type_id,$reference_no){
	$fetch_application	= db_select('fa_director_details ', 'director');
	$fetch_application	->fields('director', array());
	$fetch_application	->condition('director.application_director_id ',$application_id,'=');
	$fetch_application	-> condition('director.director_service_id', $service_id);
	$fetch_application	-> condition('director.factory_type_id', $factory_type_id);
	$fetch_application	-> condition('director.application_reference_no', $reference_no);
	$fetch_application	->condition('director.is_occupier ',1,'=');
	$fetch_application	-> orderBy('director.id', 'desc');
	$director_result = $fetch_application->execute()->fetchAll(); 
	return $director_result;
}
function get_worker_details_service($service_id,$factory_typeid,$application_id,$worker_referance_no){
	//echo $service_id.'---'.$factory_typeid.'------'.$application_id.'----'.$worker_referance_no;
	$query_worker_details 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details	-> fields('worker_details',array());
	$query_worker_details	-> condition('worker_details.application_id', $application_id);
	$query_worker_details	-> condition('worker_details.service_id', $service_id);
	$query_worker_details	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details	-> condition('worker_details.application_reference_no', $worker_referance_no);
	//$query_worker_details	-> orderBy('worker_details.id', 'desc');
	//echo $query_worker_details;
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	//print_r($result_worker_details);die();
	return $result_worker_details;
}
function worker_details_reference($application_id,$service_id,$factory_typeid,$reference_number){
	
		$result_worker_details = db_query("SELECT * FROM fa_worker_details where service_id = '".$service_id."' and factory_type = '".$factory_typeid."' and application_id = '".$application_id."' and worker_active_inactive =1 and application_reference_no = ".$reference_number." ")->fetchAssoc();
		return $result_worker_details;
}
function created_referenceno(){
	$refrencse_no = '';
	$max_cafa_reference  = db_query("select max(reference_number) as reference_number from fa_cafa")->fetchObject()->reference_number;
	 
	if($max_cafa_reference == NULL || empty($max_cafa_reference)){
		$refrencse_no = 1;
	}else{
		$refrencse_no = $max_cafa_reference+1;
		//echo $refrencse_no; die('c');
	}
	return $refrencse_no;
}
function get_application_id($plan_approval_identification_no){
	

	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application	->fields('cafa', array('id'));
	$fetch_application	->condition('cafa.plan_approve_identification_number ',$plan_approval_identification_no,'=');
    $application_id = $fetch_application->execute()->fetchObject()->id; 
	
	return $application_id;
	
}

function get_application_plan_approval_no($plan_approval_no, $plan_approaval_date){//echo $plan_approval_no.'<br/>'.$plan_approaval_date;
	$application_approved_det  =  db_query('SELECT id,is_backlog,reference_number,created_by from fa_cafa WHERE factory_plan_approval_number = :plan_approval_no and plan_approval_date =:plan_approaval_date',
	array(':plan_approval_no'=>$plan_approval_no,':plan_approaval_date'=>$plan_approaval_date))->fetchAssoc();
	
	//print_r($application_approved_det);die();

	if($application_approved_det['id'] != NULL){
		
		$fetch_application_back	= db_select('fa_cafa ', 'cafa');
		$fetch_application_back	->fields('cafa', array('id','is_backlog'));
		$fetch_application_back	->condition('cafa.backlog_plan_approval_no ',$plan_approval_no,'=');
		$fetch_application_back	->condition('cafa.backlog_plan_approval_date ',$plan_approaval_date,'=');
		$application_backlog_det = $fetch_application_back->execute()->fetchAssoc(); 
		
		$approval_det = $application_backlog_det;
	}else{
		$approval_det = $application_approved_det;
	}
	
	$approval_det = $application_approved_det;
	return $approval_det;
}

/*function get_plan_approval_no($plan_approval_no, $plan_approval_date){

		$db_and1	= db_and();
		$db_and1	->condition('cafa.factory_plan_approval_number ',$plan_approval_no,'=');
		$db_and1	->condition('cafa.plan_approval_date ',$plan_approval_date,'=');
		
		$db_and2	= db_and();
		$db_and2	->condition('cafa.backlog_plan_approval_no ',$plan_approval_no,'=');
		$db_and2	->condition('cafa.backlog_plan_approval_date ',$plan_approval_date,'=');

		$db_or		= db_or();
		$db_or		->condition($db_and1);
		$db_or		->condition($db_and2);
		
		$fetch_application	= db_select('fa_cafa ', 'cafa');
		$fetch_application	->fields('cafa', array('id','service_id','plan_approve_status','created_by','reference_number'));
		$fetch_application	->condition($db_or);
		$approval_det = $fetch_application->execute()->fetchAssoc();

	return $approval_det;
}*/


function get_plan_approval_no($plan_approval_no, $plan_approval_date){ 
	
		 $given_date = $plan_approval_date;
		 $given_year = date('Y', strtotime($given_date));
		
		$fetch_plan_approval_date = db_select('fa_cafa', 'cafa');
		$fetch_plan_approval_date ->fields('cafa', array('id','service_id','plan_approve_status','created_by','reference_number','factory_name','plan_approval_date'));
		$fetch_plan_approval_date ->condition('cafa.factory_plan_approval_number',$plan_approval_no,'=');
		$fetch_plan_approval_date_result = $fetch_plan_approval_date->execute()->fetchAssoc();
		
		if(!empty($fetch_plan_approval_date_result))
		{
			$fetch_date = $fetch_plan_approval_date_result['plan_approval_date'];
			$fetch_year = date('Y', strtotime($fetch_date));
			$final_result = $fetch_plan_approval_date_result;
		} else {
			$fetch_backlog_plan_approval_date = db_select('fa_cafa', 'cafa');
			$fetch_backlog_plan_approval_date ->fields('cafa', array('id','service_id','plan_approve_status','created_by','reference_number','factory_name','backlog_plan_approval_date'));
			$fetch_backlog_plan_approval_date ->condition('cafa.backlog_plan_approval_no',$plan_approval_no,'=');
			$fetch_backlog_plan_approval_date_result = $fetch_backlog_plan_approval_date->execute()->fetchAssoc();
			
			$fetch_date = $fetch_backlog_plan_approval_date_result['backlog_plan_approval_date'];
			$fetch_year = date('Y', strtotime($fetch_date));
			$final_result = $fetch_backlog_plan_approval_date_result;
		} 

		if($given_year == $fetch_year){
			if(strtotime($given_date) == strtotime($fetch_date)){
				$return = $final_result;
			} 
		} else {		 
			$return = array();
		} 
//print_r($return);die;
		return $return;
	}

//function created_identification($reference_no,$service_id){
//	$refrencse_no = '';
//	if($service_id == 4 || $service_id == 5){/*
//		$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa WHERE plan_approve_identification_number!='' ORDER BY id DESC LIMIT 1")->fetchObject()->plan_approve_identification_number;
//		//$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa where id = (select max(id) from fa_cafa ) ")->fetchObject()->plan_approve_identification_number;
//
//	if($plan_identification_number == NULL || empty($plan_identification_number)){
//		$max_identification_number = "plan_app_0".$reference_no."_".date('Y')."_00001";
//	}else{
//		$max_appno  =  db_query("select max (NULLIF(substr(plan_approve_identification_number,22,8),'') :: integer) as max_appno from fa_cafa")->fetchObject()->max_appno;
//
//		$next_no = $max_appno+1;
//		$iden_first     =   "plan_app_0".$reference_no."_".date('Y')."_";
//        $iden_second    =    str_pad($next_no, 5, "0", STR_PAD_LEFT);
//		$max_identification_number = $iden_first.$iden_second;
//	}
//	*/
//	
//		$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa WHERE plan_approve_identification_number!='' AND service_id = ".$service_id." ORDER BY id DESC LIMIT 1")->fetchObject()->plan_approve_identification_number;
//
//		if($plan_identification_number == NULL || empty($plan_identification_number)){
//			//$max_identification_number = "plan_app_0".$reference_no."_".date('Y')."_00001";
//			$max_identification_number = "AP".date('Y')."PLN0001";
//		}else{
//			
//			$max_appno = substr($plan_identification_number,9); echo "<br>";
//			
//			$next_no = $max_appno+1; 
//			//$iden_first     =   "plan_app_0".$reference_no."_".date('Y')."_";
//			$iden_first     =   "AP".date('Y')."PLN";
//			$iden_second    =    str_pad($next_no, 4, "0", STR_PAD_LEFT);
//			$max_identification_number = $iden_first.$iden_second;
//		}
//	}//if($service_id == 5){
////		
////		/*$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa WHERE plan_approve_identification_number!='' ORDER BY id DESC LIMIT 1")->fetchObject()->plan_approve_identification_number;
////		//$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa where id = (select max(id) from fa_cafa ) ")->fetchObject()->plan_approve_identification_number;
////	
////		if($plan_identification_number == NULL || empty($plan_identification_number)){
////			$max_identification_number = "plan_exten_0".$reference_no."_".date('Y')."_00001";
////		}else{
////			$max_appno  =  db_query("select max (NULLIF(substr(plan_approve_identification_number,22,8),'') :: integer) as max_appno from fa_cafa")->fetchObject()->max_appno;
////			
////			$next_no = $max_appno+1;
////			$iden_first     =   "plan_exten_0".$reference_no."_".date('Y')."_";
////			$iden_second    =    str_pad($next_no, 5, "0", STR_PAD_LEFT);
////			$max_identification_number = $iden_first.$iden_second;
////		}*/
////		
////		$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa WHERE plan_approve_identification_number!='' AND service_id ='5' ORDER BY id DESC LIMIT 1")->fetchObject()->plan_approve_identification_number;
////
////		if($plan_identification_number == NULL || empty($plan_identification_number)){
////			//$max_identification_number = "plan_app_0".$reference_no."_".date('Y')."_00001";
////			$max_identification_number = "AP".date('Y')."EXTN0001";
////		}else{
////			
////			$max_appno = substr($plan_identification_number,9); echo "<br>";
////			
////			$next_no = $max_appno+1; 
////			//$iden_first     =   "plan_app_0".$reference_no."_".date('Y')."_";
////			$iden_first     =   "AP".date('Y')."EXTN";
////			$iden_second    =    str_pad($next_no, 4, "0", STR_PAD_LEFT);
////			$max_identification_number = $iden_first.$iden_second;
////		}
////	}
//	
//	return $max_identification_number;
//}

function created_identification($reference_no,$service_id){
	$refrencse_no = '';
	
	// FOR PLAN & EXTENSION
	if($service_id == 4 || $service_id == 5){
	
		$plan_identification_number  = db_query("select plan_approve_identification_number from fa_cafa WHERE plan_approve_identification_number!='' AND service_id = ".$service_id." ORDER BY plan_approve_identification_number DESC LIMIT 1")->fetchObject()->plan_approve_identification_number;

		if($plan_identification_number == NULL || empty($plan_identification_number)){
			
			$max_identification_number = "AP".date('Y')."PLN0001";
		}else{
			
			$max_appno = substr($plan_identification_number,9); echo "<br>";
			
			$next_no = $max_appno+1; 
			
			$iden_first     =   "AP".date('Y')."PLN";
			$iden_second    =    str_pad($next_no, 4, "0", STR_PAD_LEFT);
			$max_identification_number = $iden_first.$iden_second;
		}
	}

	// FOR NOTICE SECTION
	if($service_id == 12 || $service_id == 13 || $service_id == 14){
		
			if($service_id == 12) { 
				$table = 'fa_form18_notice_accident';
				$service_abbr = 'NA';
			}
			if($service_id == 13) { 
				$table = 'fa_form19_dangerous_occurrence';
				$service_abbr = 'DO';
			}
			if($service_id == 14) { 
				$table = 'fa_form20_notice_poisoning';
				$service_abbr = 'NP';
			}
		
		$notice_identification_number  = db_query("select case_identification_number from ".$table." WHERE case_identification_number!='' AND service_id = ".$service_id." ORDER BY case_identification_number DESC LIMIT 1")->fetchObject()->case_identification_number;
		
		if($notice_identification_number == NULL || empty($notice_identification_number)){
			
			$max_identification_number = "AP".date('Y').$service_abbr."0001";
		}else{
			
			$max_appno = substr($notice_identification_number,9); echo "<br>";
			
			$next_no = $max_appno+1; 
			
			$iden_first     =   "AP".date('Y').$service_abbr;
			$iden_second    =    str_pad($next_no, 4, "0", STR_PAD_LEFT);
			$max_identification_number = $iden_first.$iden_second;
		}
	}

	return $max_identification_number;
}

 function get_backlog_plan_approval_no($backlog_plan_approval_number){


$fetch_application	= db_select('fa_cafa ', 'cafa');
$fetch_application	->fields('cafa', array('id'));
$fetch_application	->condition('cafa.backlog_plan_approval_no ',$backlog_plan_approval_number,'=');
    $application_id = $fetch_application->execute()->fetchObject()->id; 

return $application_id;

}

function get_application_resigtration_no($registration_number){
	

	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application	->fields('cafa', array('id'));
	$fetch_application	->condition('cafa.factory_reg_number ',$registration_number,'=');
    $application_approved_id = $fetch_application->execute()->fetchObject()->id; 
	if($application_approved_id == NULL){
		$fetch_application	= db_select('fa_cafa ', 'cafa');
		$fetch_application	->fields('cafa', array('id'));
		$fetch_application	->condition('cafa.backlog_registration_no ',$registration_number,'=');
		$application_backlog_id = $fetch_application->execute()->fetchObject()->id; 
		$application_id = $application_backlog_id;
	}else{
		$application_id = $application_approved_id;
	}
	
	return $application_id;
}

function get_manager_detials_service($application_id,$service_id,$factory_typeid){
	//echo $application_id.'</br/>'.$service_id.'</br/>'.$factory_typeid;die();
	
	$query_manager_details 	=  db_select('fa_manager_details', 'manager_details');
	$query_manager_details	-> fields('manager_details',array());
	$query_manager_details	-> condition('manager_details.application_manager_id', $application_id);
	$query_manager_details	-> condition('manager_details.manager_service_id', $service_id);
	$query_manager_details	-> condition('manager_details.factory_type_id', $factory_typeid);
	$query_manager_details	-> condition('manager_details.factory_type_id', $factory_typeid);
	$query_manager_details	-> condition('manager_details.active_inactive_manager',1);
	$query_manager_details	-> orderBy('manager_details.id', 'desc');
	$result_manager_details 	=  $query_manager_details->execute()->fetchAll();
	
	return $result_manager_details;
}

function get_year($application_id,$service_id,$factory_typeid,$reference_no){
	
	$query_calculate_year 	=  db_select('fa_calculate_year', 'calculate_year');
	$query_calculate_year	-> fields('calculate_year',array('id','calculate_year'));
	$query_calculate_year	-> condition('calculate_year.application_id', $application_id);
	$query_calculate_year	-> condition('calculate_year.service_id', $service_id);
	$query_calculate_year	-> condition('calculate_year.factory_id', $factory_typeid);
	$query_calculate_year	-> condition('calculate_year.reference_no', $reference_no);
	
	$calculate_year 	=  $query_calculate_year->execute()->fetchAll();
	
	return $calculate_year;
}
function get_year_id($application_id,$service_id,$factory_typeid,$reference_no){
	
	$query_calculate_year 	=  db_select('fa_calculate_year', 'calculate_year');
	$query_calculate_year	-> fields('calculate_year',array('id'));
	$query_calculate_year	-> condition('calculate_year.application_id', $application_id);
	$query_calculate_year	-> condition('calculate_year.service_id', $service_id);
	$query_calculate_year	-> condition('calculate_year.factory_id', $factory_typeid);
	$query_calculate_year	-> condition('calculate_year.reference_no', $reference_no);
	
	$calculate_year 	=  $query_calculate_year->execute()->fetchObject()->id;
	
	return $calculate_year;
}

function get_category_wbpcb(){
	//echo $application_id.'</br/>'.$service_id.'</br/>'.$factory_typeid;die();
	
	$default_wbpcbselect 	= array(""=>"- Select -");
	$all_wbpcb 			= array();
	$query_wbpcb 		= db_select('fa_category_wbpcb', 'wbpcb');
	$query_wbpcb		->fields('wbpcb',array('id','category_name'));
	$query_wbpcb		->orderBy('wbpcb.id', 'ASC');
	$result_wbpcb		= $query_wbpcb->execute(); 
	if(!empty($result_wbpcb)) {
		
	  	foreach($result_wbpcb as $rows) {
			$all_wbpcb[$rows->id] = t('@wbpcb_name', array('@wbpcb_name' => $rows->category_name));
	  	}    
	}
	//print_r($all_po);
 	if (isset($all_wbpcb)) {
		//print_r($all_po);			
		return ($default_wbpcbselect + $all_wbpcb);	
	} else {				
		return $default_wbpcbselect;
	}
	
	
}
function get_manufacturing($application_id,$service_id,$factory_typeid,$referance_number){
	
	//echo $service_id.','.$factory_typeid.','.$application_id.','.$referance_number	;die();
	$query_manufacturing 	=  db_select('fa_nature_manufacturing', 'manufacturing');
	$query_manufacturing	-> fields('manufacturing',array());
	$query_manufacturing	-> condition('manufacturing.application_id', $application_id);
	$query_manufacturing	-> condition('manufacturing.service_id', $service_id);
	$query_manufacturing	-> condition('manufacturing.factory_type', $factory_typeid);
	$query_manufacturing	-> condition('manufacturing.application_reference_no', $referance_number);
	$query_manufacturing	-> condition('manufacturing.manufacturing_active_inactive',1);
	$query_manufacturing	-> orderBy('manufacturing.id', 'desc');
	$query_manufacturing_details 	=  $query_manufacturing->execute()->fetchAll();
	
	
	return $query_manufacturing_details;
}

function fa_power_details($application_id,$service_id,$factory_typeid){
	
	
	$query_power 	=  db_select('fa_power_details', 'power');
	$query_power	-> fields('power',array());
	$query_power	-> condition('power.application_id', $application_id);
	$query_power	-> condition('power.service_id', $service_id);
	$query_power	-> condition('power.factory_type', $factory_typeid);
	$query_power	-> condition('power.power_active_inactive',1);
	$query_power	-> orderBy('power.id', 'desc');
	$query_power_details 	=  $query_power->execute()->fetchAll();
	
	
	return $query_power_details;
}
function is_power($application_id,$service_id,$factory_typeid,$service_year){
	
	
	$query_power_id  =  db_query('SELECT count(id) as power_id  FROM {fa_power_details} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid and power_active_inactive=:active and service_year =:service_year',
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':active'=>'1',':service_year'=>$service_year))->fetchObject()->power_id;
	
	return $query_power_id;
	
	
}
function is_manufacturing($application_id,$service_id,$factory_typeid,$service_year){
	
	$query_power_id  =  db_query('SELECT count(id) as manufacturing_id  FROM {fa_nature_manufacturing} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid and manufacturing_active_inactive=:active and service_year =:service_year',
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':active'=>'1',':service_year'=>$service_year))->fetchObject()->manufacturing_id;
		return $query_power_id;
}
function is_worker($application_id,$service_id,$factory_type_id,$application_reference_no){
	//echo $application_id.'<br>'.$service_id.'<br>'.$factory_type_id.'<br>'.$service_year.'<br>'.$application_reference_no;
	$query_worker_id  =  db_query("SELECT count(id) as worker_id  FROM {fa_worker_details} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid   and application_reference_no=:application_reference_no",
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_type_id,':application_reference_no'=>$application_reference_no))->fetchObject()->worker_id;
	//print_r($query_worker_id);die();
	
		return $query_worker_id;
}

function get_parts_address($table='', $type='', $id='', $fieldArr=''){
		//echo $table.'<br/>'.$type.'<br/>'.$id.'<br/>'; print_r($fieldArr);exit;
		$text_AreaType_loc ='';
		if(($fieldArr=='')|| empty($fieldArr)){
			$fieldArr				=	array();
		}
		$location_address_result	=	'';
		$alias						=	$table.'ali';
		
		$query_location_address		= 	db_select($table, $alias);
		if($fieldArr[0]!='' || $fieldArr[0]!=0){
			$query_location_address		->	LeftJoin('fa_district_master', 'd', 'd.district_code='.$alias.'.'.$fieldArr[0]);
			$query_location_address		->	fields('d', array('district_name'));
			if($fieldArr[1]!='' || $fieldArr[1]!=0){
				$query_location_address		->	LeftJoin('fa_sub_division', 's', 's.sub_div_code='.$alias.'.'.$fieldArr[1]);
				$query_location_address		->	fields('s', array('sub_div_name'));
				if($fieldArr[3]!='' || $fieldArr[3]!=0){
					$query_location_address		->	LeftJoin('fa_block_mun_master', 'b', 'b.block_code='.$alias.'.'.$fieldArr[3]);
					$query_location_address		->	fields('b', array('block_mun_name'));
					if($fieldArr[4]!='' || $fieldArr[4]!=0){
						$query_location_address		->	LeftJoin('fa_village_ward_master', 'v', 'v.village_code='.$alias.'.'.$fieldArr[4]);
						$query_location_address		->	fields('v', array('village_name'));
						if($fieldArr[5]!='' || $fieldArr[5]!=0){
							$query_location_address		->	LeftJoin('fa_police_station', 'p', 'p.police_station_code='.$alias.'.'.$fieldArr[5]);
							$query_location_address		->	fields('p', array('name_of_police_station'));
							if($fieldArr[7]!='' || $fieldArr[7]!=0){
								$query_location_address		->	LeftJoin('fa_state_master', 'state', 'state.id='.$alias.'.'.$fieldArr[7]);
								$query_location_address		->	fields('state', array('statename'));
							}if($fieldArr[8]!='' || $fieldArr[8]!=0){
								$query_location_address		->	LeftJoin('fa_all_india_pin_code', 'pin', 'pin.id='.$alias.'.'.$fieldArr[8]);
								$query_location_address		->	fields('pin', array('po_name'));
							}
						}
					}
				}
			}		
		}
		
		if($type=="sub-table"){
			$query_location_address		->	fields($alias, $fieldArr);
			$query_location_address		->	condition($alias.'.id',$id,'=');		
			
		}

		$location_result = $query_location_address->execute()->fetchAssoc();
		
		return $location_result;

}


/*function fetch_year($application_id,$service_id,$factory_typeid,$reference_no){
	$calculateyear 	= array(""=>"- Select -");
	$all_year 		= array();
	$query_year		= 	db_select('fa_calculate_year', 'year');
	$query_year		->	fields('year',array('calculate_year','id','is_active_year'));
	$query_year		-> 	condition('year.application_id', $application_id);
	$query_year		-> 	condition('year.service_id', $service_id);
	$query_year		-> 	condition('year.factory_id', $factory_typeid);
	$query_year		-> 	condition('year.reference_no', $reference_no);
	//$query_year		->	orderBy('year.id', 'DESC');
	$result_year		= $query_year->execute()->fetchAll(); 
	
	return $result_year;
}*/


function is_manager_exists(){

$is_managers	=  db_query("SELECT count(id) as bo_mun_vil  FROM {fa_manager_details}")->fetchObject()->bo_mun_vil;

return $is_managers;
}
/*function get_all_manager_data(){

$manager_details	=  db_query("SELECT *   FROM {fa_manager_details} where active_inactive_manager =1 order by id desc")->fetchAll();

return $manager_details;
}*/
function get_all_manager_data($application_id,$service_id,$factory_typeid,$reference_number){
	$query_data 	=  db_select('fa_manager_details', 'od');
	$query_data	    -> fields('od',array());
	$query_data	    -> condition('od.application_manager_id', $application_id);
	$query_data	    -> condition('od.manager_service_id', $service_id);
	$query_data	    -> condition('od.factory_type_id', $factory_typeid);
	$query_data	    -> condition('od.application_reference_no', $reference_number);
	$query_data		-> orderBy('od.id', 'desc');
	$manager_details  =  $query_data->execute()->fetchAll();
	return $manager_details;
}
function get_all_occupier_data($application_id,$service_id,$factory_typeid,$reference_number){
	/*echo $application_id;
	echo '<br>'.$service_id;
	echo '<br>'.$factory_typeid;
	echo '<br>'.$reference_number;*/
	
	$query_data 	=  db_select('fa_occupier_details', 'od');
	$query_data	    -> fields('od',array());
	$query_data	    -> condition('od.application_occupier_id', $application_id);
	$query_data	    -> condition('od.occupier_service_id', $service_id);
	$query_data	    -> condition('od.factory_type_id', $factory_typeid);
	$query_data		-> condition('od.application_reference_no', $reference_number);
	$query_data		-> orderBy('od.id', 'desc');
	$occupier_data  =  $query_data->execute()->fetchAll();
	return $occupier_data;
}
function get_director_details_service($application_id,$service_id,$factory_typeid,$reference_number){
	//echo $application_id.'</br/>'.$service_id.'</br/>'.$factory_typeid;die();
	
	$query_director_details 	=  db_select('fa_director_details', 'director_details');
	$query_director_details	-> fields('director_details',array());
	$query_director_details	-> condition('director_details.application_director_id', $application_id);
	$query_director_details	-> condition('director_details.director_service_id', $service_id);
	$query_director_details	-> condition('director_details.factory_type_id', $factory_typeid);
	$query_director_details	-> condition('director_details.application_reference_no', $reference_number);
	$query_director_details	-> condition('director_details.active_inactive_director',1);
	$query_director_details	-> orderBy('director_details.id', 'desc');
	$result_director_details 	=  $query_director_details->execute()->fetchAll();
	return $result_director_details;
}
function get_power_data($application_id,$service_id,$factory_type_id,$reference_no){
	//echo $application_id.'</br/>'.$service_id.'</br/>'.$factory_type_id.'</br/>'.$reference_no;die();
	$fetch_power	= db_select('fa_power_details ', 'power');
	$fetch_power->InnerJoin('fa_service_master', 'service_master', 'service_master.id=power.service_id');
	$fetch_power->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=power.factory_type');
	$fetch_power->fields('power', array());
	$fetch_power->fields('service_master', array('service_name'));
	$fetch_power->fields('factory_type', array('factory_type'));
	$fetch_power->condition('power.application_id ',$application_id,'=');
	$fetch_power->condition('power.application_reference_no ',$reference_no,'=');
	$fetch_power-> orderBy('power.id', 'ASC');
	$power_result = $fetch_power->execute()->fetchAll();
	//print_r($power_result) ;
	//die;
	return $power_result;
}
function get_worker_tab_check($application_id){ 

$query_tab_info = db_select('fa_worker_details', 'cafa_worker');
$query_tab_info	->fields('cafa_worker',array());
$query_tab_info	->condition('cafa_worker.application_id',$application_id);
$query_tab_info_details = $query_tab_info->execute()->fetchAssoc(); 

return $query_tab_info_details;

}
function get_document_tab_check($application_id){ 

$query_tab_info = db_select('fa_caf_upload_doc', 'cafa_doc');
$query_tab_info	->fields('cafa_doc',array());
$query_tab_info	->condition('cafa_doc.app_id',$application_id);
$query_tab_info_details = $query_tab_info->execute()->fetchAssoc(); 

return $query_tab_info_details;
}
/*function get_attached_filename($application_id,$reference_id){

	$query_file 	=  db_select('fa_caf_upload_doc', 'file');
	$query_file	    -> fields('file',array());
	$query_file	    -> condition('file.app_id', $application_id);
	$query_file	    -> condition('file.application_reference_no', $reference_id);
	$query_file	    -> orderBy('file.id', 'desc');
	$query_file_details  =  $query_file->execute()->fetchAll();

return $query_file_details;
}
*/
/*function get_final_application($zoneUserMap,$currentStatus){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	//$fetch_application->InnerJoin('fa_cafa_remarks', 'cafa_remarks', 'cafa_remarks.app_id=cafa.id');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.plan_approve_status',$currentStatus,'in');
	//$fetch_application->condition('cafa_remarks.status',$currentStatus,'in');
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	//$fetch_application->groupBy('cafa.id', 'desc');
	$fetch_application->orderBy('cafa.id', 'desc');
	
	//echo $fetch_application; //die;
	$application_result = $fetch_application->execute()->fetchAll();
	return $application_result;
}*/

function get_final_application($zoneUserMap,$serviceid){//,$currentStatus
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	//$fetch_application->InnerJoin('fa_cafa_remarks', 'cafa_remarks', 'cafa_remarks.app_id=cafa.id');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
//	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number'));
	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number','backlog_plan_approval_no','factory_plan_approval_number','uploaded_letter','uploaded_plan','modification_date','backlog_plan_approval_date','plan_approval_date','approve_dsc_reg_file_id','approve_dsc_licence_file_id','approve_dsc_reg_licence_file_id','period_for_application','is_chemical'));

	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.plan_approve_status','F','!=');
	//$fetch_application->condition('cafa_remarks.status',$currentStatus,'in');
	$fetch_application->condition('cafa.service_id',$serviceid,'=');
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	//$fetch_application->groupBy('cafa.id', 'desc');
	$fetch_application->orderBy('cafa.id', 'desc');
	
	//echo $fetch_application; die;
	$application_result = $fetch_application->execute()->fetchAll();
	return $application_result;
}

/*function get_final_application_send_by_section($zoneUserMap){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->InnerJoin('fa_cafa_remarks', 'cafa_remarks', 'cafa_remarks.app_id=cafa.id');
	$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	//$fetch_application->condition('cafa.plan_approve_status',array('AI'),'in');
	$fetch_application->condition('cafa_remarks.status',array('AI'),'in');
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->orderBy('cafa.id', 'desc');
	
	//echo $fetch_application; die;
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
}*/

// added by naren
// check wheather user is associated with multiple zone or not
function getZoneUserMap($uid){
	$query_p = db_select('fa_zone_user_map', 'fzum');
	$query_p->leftJoin('fa_zone', 'fz', 'fzum.zone_id = fz.zone_id'); 
	$query_p->fields('fzum', array('zone_id'));
	$query_p->fields('fz', array('zone_name'));
	$query_p->condition('fzum.uid', $uid, '=');
	$result_p = $query_p->execute();
  	$resultZoneData = $result_p->fetchAll();
	return $resultZoneData;
}

function get_details_employee($uid){
	$query = db_select('users', 'u');
	$query->leftJoin('fa_employee_details', 'fud', 'u.uid = fud.uid');  
	$query->fields('u', array('name'));
	$query->fields('fud', array('fname'));
	$query->condition('u.uid', $uid, '=');
	$result = $query->execute();
	$userData = $result->fetchAssoc();
	return $userData;
}


function is_year($application_id,$service_id,$factory_typeid,$reference_no){
	$query_year_id  =  db_query('SELECT count(id) as year_id  FROM {fa_calculate_year} WHERE application_id = :application_id and service_id= :service_id and factory_id =:factory_typeid and  reference_no =:reference_no',	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':reference_no'=>$reference_no))->fetchObject()->year_id;
   return $query_year_id;

}
function del_year($application_id,$service_id,$factory_typeid,$reference_no){
	$query = db_delete('fa_calculate_year');
	$query->condition('application_id',$application_id,'=');
	$query->condition('service_id',$service_id,'=');
	$query->condition('factory_id',$factory_typeid,'=');
	$query->condition('reference_no',$reference_no,'=');
	$query->execute();
}

function fetch_occupier_year($application_id,$service_id,$factory_typeid,$reference_no){
//echo $application_id.'aap<br/>'.$service_id.'sid<br/>ftype'.$factory_typeid.'<br/>Rno'.$reference_no;//die();
		$calculateyear 	= array(""=>"- Select -");
		$all_year 	 	= array();
		$query_year	 	= db_select('fa_calculate_year', 'year');
		$query_year		-> fields('year',array('calculate_year','id'));
		$query_year	 	-> condition('year.application_id', $application_id);
		$query_year	 	-> condition('year.service_id', $service_id);
		$query_year		-> condition('year.factory_id', $factory_typeid);
		$query_year	 	-> condition('year.reference_no', $reference_no);
		$query_year	 	-> condition('year.is_active_year',1,'=');
		$result_year	 = $query_year->execute(); //print_r($result_year);die();
		if(!empty($result_year)) {
		
			foreach($result_year as $rows) {
		$all_year[$rows->calculate_year] = t('@year_details', array('@year_details' => $rows->calculate_year));
			}    
		}
		
			if (isset($all_year)) {
		
		return ($calculateyear + $all_year);	
		} else {	
		return $calculateyear;
		
  }


}
function create_validate_year1($amenablity_date,$application_for,$serviceid_hidden,$factorytypeid_hidden,$reference_number,$application_id){
	 global $base_root, $base_path, $user;
	 $service_id					= encryption_decryption_fun('decrypt',$serviceid_hidden);
	 $factory_typeid				= encryption_decryption_fun('decrypt',$factorytypeid_hidden);
	 $amenablity_date_mofify 	    = date('Y-m-d',strtotime(date("Y-m-d", strtotime($amenablity_date))));
	 $year							= date('Y', strtotime($amenablity_date_mofify));
	 $current_year 					= date("Y");
	 $current_date 					= date('Y-m-d');

	if($amenablity_date_mofify>='2016-01-01' &&  $amenablity_date_mofify<='2016-12-29'){ 
				
		$year						= date('Y', strtotime($amenablity_date));
		$month						= date('m', strtotime($amenablity_date));
		$date						= date('d', strtotime($amenablity_date));
		$year2						= date('Y', strtotime($amenablity_date));
		$pre_date					= ($year2-1).'-'.$month.'-'.$date;
		
		$lepyear_pre				= date('Y',$pre_date);
		$leap_pre 					= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
		$is_lepyear_pre				= ($leap_pre ? 'leap' : 'not leap');
		
		if($is_lepyear_pre== 'leap'){
				$next_date 			=  strtotime ( '+364 day' , strtotime ($pre_date)) ;
		}else{
			$date_month			= date('m',$pre_date);
			$next_date 			= strtotime ( '+365 day' , strtotime($pre_date)) ;
			if($date_month == 2 || $date_month == 02){
					$next_date 			=  strtotime ( '+1 day' , $next_date) ;
				}
		}
		//echo date('Y-m-d', $next_date);die();	
		$lepyear					= date('Y',$next_date);
		$leap 						= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
		$is_lepyear					= ($lepyear ? 'leap' : 'not leap');
		if($is_lepyear== 'leap'){
				//$next_date 			=  strtotime ( '+364 day' , strtotime ($pre_date)) ;
				$date_month		= date('m',$next_date); 
				if($date_month == 2 || $date_month == 02){
					$next_date 			=  strtotime ( '+1 day' , $next_date) ;
				}
		}
		 	$newdate		 		=  date ( 'Y-m-d' , $next_date );
			$year_list				=  date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($newdate));
			$year_calclation 		=  array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 0,
					'calculate_starting_year'		=> $pre_date,
					'calculate_end_year'			=> $newdate,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id 				= db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		$pre_date_first 	= strtotime('+1 day',strtotime($newdate)) ;
		$pre_date			= date('Y-m-d',$pre_date_first);
		$pre_date1 =$pre_date_checking= $pre_date ;
		
		$Next_year			= date('Y',strtotime($pre_date)); 
		
		$i = 0;
		$application_for1  = $application_for;
		
		for($j=1; $j<=3 ; $j++){
			  	$day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
				$lepyear_pre		= date('Y',strtotime($pre_date1));
				$leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
				$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
				if($is_lepyear== 'leap'){
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    	$newdate 			= $next_date;
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
				
		
		}
		$year_list	= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($next_date)); 
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 3
			);
			$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();	
			//$pre_date1 = $next_date;
			$datez 				= new DateTime($next_date);
			$datex 				= new DateTime($current_date);
			 if($datez>$datex){
			 $application_for1 = $application_for1 -1;
			
		 } if($datez<$datex){
			 $application_for1 = $application_for1 +1;
			
		 }
		if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 -1;
			
		 }
		while($i<$application_for1){//echo $pre_date_checking;echo '<br/>';echo $pre_date1;die();
			   $day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			 $lepyear_pre		= date('Y',strtotime($pre_date1));
			 $leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
			if($is_lepyear== 'leap'){
					 $month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){echo $month; 
					$day 				= "+".(365)."day";
					 $next_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					
					
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    $newdate = $next_date; 
		
	
		 $datex = new DateTime($current_date);
		  $datey = new DateTime($pre_date_checking);
		
		 $datez = new DateTime($next_date);
		
			
		if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 -1;
			
		 }
		
			
			  $year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			 //echo '<br/>';
			 
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();	
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
		
			$i = $i+1;
			}
		

		  
	}
	if($amenablity_date_mofify>='2016-12-30' &&  $amenablity_date_mofify<='2017-10-16'){
			$year2				= date('Y', strtotime($amenablity_date));
			$month				= date('m', strtotime($amenablity_date));
			$date				= date('d', strtotime($amenablity_date));
			$pre_date			= ($year2-1).'-'.$month.'-'.$date;
			$pre_date_leapyera	= date('Y',$pre_date);
			$leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
			 $is_lepyear_pre		= $leap_pre ? 'leap' : 'not leap';
			if($is_lepyear_pre == 'leap'){
				$month_pre				= date('m', strtotime($pre_date));
				if($month_pre==2 || $month_pre == 1){
					$next_date 			= strtotime ( '+365 day' , strtotime($pre_date)) ;
				}else{
					$next_date 			= strtotime ( '+364 day' , strtotime($pre_date)) ;
					
				}
				
	
			}else{
				$lepyear			= date('Y',$next_date);
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
				if($is_lepyear== 'leap'){
					$next_date 		= 	strtotime ( '+364 day' , strtotime ( $pre_date ) ) ;
				}
			}
			
			$newdate		 	=  	date ( 'Y-m-d' , $next_date );
			$year_list			= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($newdate));
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 0,
					'calculate_starting_year'		=> $pre_date,
					'calculate_end_year'			=> $newdate,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id 				= db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		$pre_date_first 	= strtotime('+1 day',strtotime($newdate)) ;
		$pre_date			= date('Y-m-d',$pre_date_first);
		 $pre_date1 =$pre_date_checking= $pre_date ;
		
		$Next_year			= date('Y',strtotime($pre_date)); 
		
		$i = 0;
	$application_for1  = $application_for;
	
		while($i<$application_for1){//echo $application_for1.'<br/>';
			   $day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
			$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
			$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			 $lepyear_pre		= date('Y',strtotime($pre_date1));
			 $leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
				if($is_lepyear== 'leap'){
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){echo $is_lepyear_pre; 
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    $newdate = $next_date; 
		
		//echo 'New date '.$newdate.'<br/>';
		 $datex = new DateTime($current_date);
		 $datey = new DateTime($pre_date_checking);
		 $datez = new DateTime($next_date);
		 if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 + 1;
			
		 }
			echo '<br/> predate :-'.$pre_date_checking.'<br/> Next date :-'.$next_date.'<br/>';	
			$year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $newdate,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
		
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
		
		$i = $i+1;
			//$year_list	= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($newdate));
			
			
			
		
			}
		
			//die();
			 
	

	
		  
	}
	if($amenablity_date_mofify>='2017-10-17'){
		$year						= date('Y', strtotime($amenablity_date));
		$month						= date('m', strtotime($amenablity_date));
		$date						= date('d', strtotime($amenablity_date));
		$year2						= date('Y', strtotime($amenablity_date));
		$pre_date					= ($year2-1).'-'.$month.'-'.$date;
		$next_date 					= strtotime ( '+363 day' , strtotime($pre_date)) ;
		$lepyear					= date('Y',$next_date);
		$leap 						= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
		$is_lepyear					= ($lepyear ? 'leap' : 'not leap');
		if($is_lepyear== 'leap'){
				$next_date 			= 	strtotime ( '+364 day' , strtotime ($pre_date)) ;
			}
		 	$newdate		 		=  	date ( 'Y-m-d' , $next_date );
		
		$year_list	= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($newdate));
		$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $service_id,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factory_typeid,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 0,
				'application_form_type'			=> 'Common Application Form',
				'calculate_starting_year'		=> $pre_date,
				'calculate_end_year'			=>  $newdate,
				'showing_year'					=> 1
			);
		 $id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		 $pre_date_first 	 = strtotime('+1 day',strtotime($newdate)) ;
		 $pre_date			= date('Y-m-d',$pre_date_first); 
		
		$pre_date_year			= date('Y',strtotime($pre_date));
		$pre_date_month			= date('m',strtotime($pre_date));
		$pre_date_day			= date('d',strtotime($pre_date));
		
		
		$pre_date1 =$pre_date_checking= $pre_date ;
			$application_for1  = $application_for;
		while($i<$application_for1){
		     
			 $day 				= "+".(364)."day";
			 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			 
			 $lepyear			= date('Y',strtotime($next_date));
			$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
			$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			$lepyear_pre		= date('Y',strtotime($pre_date1));
			$leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
		
			if($is_lepyear== 'leap'){//echo 'hii';
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
			}if($is_lepyear== 'not leap'){
				 $month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
						
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
				
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		//echo $current_date;die();
		//echo '<br/>current date:-'.$current_date.'<br/><br/> predate :-'.$pre_date_checking.'<br/> Next date :-'.$next_date.'<br/>';
		
		 $datex = new DateTime($current_date);
		 $datey = new DateTime($pre_date_checking);
		 $datez = new DateTime($next_date);
		 if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 + 1;
			//echo 'Application Year:-'.$application_for1.'<br/>';
		 }
				
		$year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $service_id,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factory_typeid,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
				

				$i = $i+1;
				
		}
		
		
		
	}
	if($amenablity_date_mofify<='2015-12-31'){
		$year2			= date('Y', strtotime($amenablity_date));
		$month			= date('m', strtotime($amenablity_date));
		$date			= date('d', strtotime($amenablity_date));
		$diff			= 2015-$year2;
		$diff1			= $current_year-2015;
		$pre_date		= ($year2-1);
		$year_list		= 	$pre_date;
		$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $service_id,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factory_typeid,
				'created_by'					=> $user->uid,

				'is_active_year'				=> 0,
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $pre_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 1
			 );
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		//echo 	$year_list.'<br/>';
		$next_date 		= $pre_date+1 ;
		for($i=$next_date;$i<2016;$i++){
			$pre_date		= $next_date;
			$next_date 		= $next_date+1 ;
			$year_list		= 	$pre_date;
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $service_id,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factory_typeid,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1,
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $pre_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 1
			 );
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		}
		//echo 	$year_list.'<br/>';
		
		if($next_date==2016){
			$pre_date		= $next_date;
			$next_date 		= $next_date+2 ;
			$year_list		= 	$pre_date." TO ".$next_date;
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $service_id,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factory_typeid,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1,
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $next_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 3
			 );
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		}
		
		if($next_date>2016){
			if($current_year >2019){
				
				$f= ($current_year-$next_date)-1;
					$application_for 			= $application_for + $f;
					//echo $current_year.'------'.$f;die($f);
					 
			  }if($current_year ==2018){
				$f= ($current_year-$next_date);
					$application_for 			= $application_for-1;
					
			  }if($current_year==2019){
				$f= ($current_year-$next_date);
					$application_for 			= $application_for;
					 
			  }
	
			  $pre_date		= $next_date+1;
			$next_date 		= $next_date+$application_for ;
			$year_list		= 	$pre_date." TO ".$next_date;
			 
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> $application_for,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $service_id,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factory_typeid,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1, 
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $next_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 1
			 );
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
		}
		//echo 	$year_list.'<br/>';
		
		}
  
} 
  
function get_all_manager_year($application_id){
	$query_file 	=  db_select('fa_manager_details', 'ma');
	$query_file	    -> fields('ma',array('add_year_manager'));
	$query_file	    -> condition('ma.application_manager_id', $application_id);
	$manager_year  	=  $query_file->execute()->fetchAll();
	return $manager_year;
 
}
function check_year($application_id,$service_id,$factory_typeid,$reference_no){
	$query_year 	=  db_select('fa_calculate_year', 'y');
	$query_year	    -> fields('y',array('calculate_year'));
	$query_year	    -> condition('y.application_id', $application_id);
	$query_year	 	-> condition('y.service_id', $service_id);
	$query_year	 	-> condition('y.factory_id', $factory_typeid);
	$query_year	 	-> condition('y.reference_no', $reference_no);
	$ch_year  =  $query_year->execute()->fetchAll();
	return $manager_year;
}
function worker_detials_year($year,$application_no,$reference_no,$factory_id,$service_id){
	$query_worker_details 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details	-> fields('worker_details',array('worker_men','worker_women','adolescents_male','adolescents_female','children_male','children_female','change_date','worker_registration_status','worker_total'));
	$query_worker_details	-> condition('worker_details.application_id', $application_no);
	$query_worker_details	-> condition('worker_details.factory_type', $factory_id);
	$query_worker_details	-> condition('worker_details.application_reference_no', $reference_no);
	$query_worker_details	-> condition('worker_details.service_id', $service_id);
	$query_worker_details	-> condition('worker_details.service_year', $year);
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	return $result_worker_details;
}

function QUANTITY_FIELD_VALIDATION($element, &$form_state){
	if(trim($element['#value'])){
		$q="a".trim($element['#value']);
		if(stripos($q,"~") >0  || stripos($q,"!") >0 || stripos($q,"@")>0 || stripos($q,"<")>0 || stripos($q,">")>0 || stripos($q,"'")>0 || stripos($q,"$")>0 || stripos($q,"#")>0 || stripos($q,"%")>0 || stripos($q,"^")>0 || stripos($q,"&")>0 || stripos($q,"*")>0 || stripos($q,"-")>0){
       		form_error($element, t($element['#title'].' contain illegal character.'));
	   }else if(stripos($q,".")>0) {
		   form_error($element, t($element['#title'].' should be a whole number.'));
	   }else if(!is_numeric(trim($element['#value']))) {
		   form_error($element, t($element['#title'].' should be a whole number.'));
	   }
	}
}
function DOUBLE_FIELD_VALIDATION($element, &$form_state){
	if(trim($element['#value'])){
		$q="a".trim($element['#value']);
		if(stripos($q,"~") >0  || stripos($q,"!") >0 || stripos($q,"@")>0 || stripos($q,"<")>0 || stripos($q,">")>0 || stripos($q,"'")>0 || stripos($q,"$")>0 || stripos($q,"#")>0 || stripos($q,"%")>0 || stripos($q,"^")>0 || stripos($q,"&")>0 || stripos($q,"*")>0 || stripos($q,"-")>0){
       		form_error($element, t($element['#title'].' contain illegal character.'));
	   }else if(!is_numeric(trim($element['#value']))) {
		   form_error($element, t($element['#title'].' should be a whole number.'));
	   }
	}
}
 
function del_worker($application_id,$service_id,$factory_typeid,$reference_no){
	$query 	=  db_delete('fa_worker_details');
	$query	-> condition('application_id', $application_id);
	$query	-> condition('factory_type', $factory_typeid);
	$query	-> condition('application_reference_no', $reference_no);
	$query	-> condition('service_id', $service_id);
	$query	-> condition('worker_active_inactive',0,'!=');
	//$query	-> condition('worker_registration_status', 'In');
	//$query	-> condition('service_year', $year);
	$e= $query->execute();
}

function power_detials_year($year,$application_no,$reference_no,$factory_id,$service_id){
	
	$query_power_details 	=  db_select('fa_power_details', 'power_details');
	$query_power_details	-> fields('power_details',array('installed_power','power_unit','type_power_station','power_active_inactive','change_date','power_application_status'));
	$query_power_details	-> condition('power_details.application_id', $application_no);
	$query_power_details	-> condition('power_details.factory_type', $factory_id);
	$query_power_details	-> condition('power_details.application_reference_no', $reference_no);
	$query_power_details	-> condition('power_details.service_id', $service_id);
	$query_power_details	-> condition('power_details.service_year', $year);
	$result_power_details 	=  $query_power_details->execute()->fetchAll();

	
	return $result_power_details;
}

function del_power($application_id,$service_id,$factory_typeid,$reference_no){

	$query = db_delete('fa_power_details');
	$query	-> condition('application_id', $application_id);
	$query	-> condition('factory_type', $factory_typeid);
	$query	-> condition('application_reference_no', $reference_no);
	$query	-> condition('service_id', $service_id);
	//$query	-> condition('power_application_status', 'In');
	$e= $query->execute();
}
function yearly_power_worker_details($application_id,$factory_type,$service_id,$application_reference_no){//echo 'hii';die();

//die($application_id.'-----'.$factory_type.'-----'.$service_id.'-----'.$application_reference_no);
	$query_power 			=  db_select('power_worker_yearly', 'power');
	$query_power			-> fields('power',array());
	//$query_power			-> fields('power',array());
	$query_power			-> condition('power.application_id', $application_id);
	$query_power			-> condition('power.application_reference_no', $application_reference_no);
	$query_power			-> condition('power.factory_type', $factory_type);
	$query_power			-> condition('power.service_id', $service_id);
	$query_power   			-> orderBy('power.calculate_starting_year', 'ASC');//ORDER BY created
	//$query_power   			-> orderBy('is_amended', 1,'!=');
	//$query_power   			-> orderBy('is_amendment', 1,'!=');//ORDER BY created
	$query_power_details 	=  $query_power->execute()->fetchAll();
	//print_r($query_power_details);die;
	//echo $query_power;die;
	return $query_power_details;
}

function fees_calculation_registration($power,$workers,$starting_year){
	//echo $year.'Power-'.$power.'Worker-'.$workers.'Starting Year-'.$starting_year;
	try {
	$power_round_off 		 	= 	round($power);
	$r							= validateDate($starting_year, 'Y-m-d');

    if($r==1){
			 if($starting_year>='2016-12-30'){
				 $actuall_year_assign=2017;
			 }if($starting_year >='2016-01-01' && $starting_year <='2016-12-29'){
				 $actuall_year_assign=2016;
			 }if($starting_year >='2006-01-01' && $starting_year <='2015-12-31'){
				  $actuall_year_assign=2006;
			}if($starting_year >='1992-01-01' && $starting_year <='2005-12-31'){				
			  $actuall_year_assign=1992;
			 }if($starting_year >='1972-01-01' && $starting_year<='1991-12-31'){
				 $actuall_year_assign=1972;
			 }if($starting_year >='1958-05-22' && $starting_year <='1971-12-31'){
				  $actuall_year_assign=1958;
			}
			
	
	}else{
		   $actuall_year = $starting_year;
		   if($actuall_year>=2017){
			   $actuall_year_assign	=	2017;
		   } if($actuall_year>='1992' && $actuall_year<='2005'){
			   $actuall_year_assign	=	1992;
		   }if($actuall_year>='1972' && $actuall_year<='1991'){
			   $actuall_year_assign	=	1972;
		   }if($actuall_year>='2006' && $actuall_year<='2015'){
			   $actuall_year_assign	=	2006;
		   }if($actuall_year=='2016'){
			   $actuall_year_assign	=	2016;
		   }if($actuall_year>='1958' && $actuall_year<='1971'){
			   $actuall_year_assign=1958;
		   }
		   if($actuall_year_assign >2016){
			   $diff_period = ($year_array[2]-$year_array[0]);
		   }
	}
//echo $actuall_year_assign.$power_round_off;die();

	$query_fees 	=  db_select('fa_fees_structure', 'fees');
	$query_fees		-> fields('fees',array('fees','power_range_end_hp','workers_end_to','feesyear'));

	$query_fees		-> condition('fees.feesyear', $actuall_year_assign);
	if($workers<=10000){
		$query_fees	-> condition('fees.workers_start_form',$workers,'<=');
		$query_fees	-> condition('fees.workers_end_to',$workers,'>=');
	}if($workers>10000){
		$query_fees	-> condition('fees.workers_start_form',10001,'=');
		
	}
	//----------2015
	if($actuall_year_assign =='2006'){
		if($power_round_off>10000){
			$query_fees	-> condition('fees.powe_range_start_hp',10001,'=');
			
		}if($power_round_off<=10000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
		}
		
	}
	//--------2016
	if($actuall_year_assign =='2016'){
		if($power_round_off>15000){
			$query_fees	-> condition('fees.powe_range_start_hp',15001,'=');
			
		}if($power_round_off<=15000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
			
		}
		
	}
	//---2017
	if($actuall_year_assign=='2017'){
		if($power_round_off>15000){
			$query_fees	-> condition('fees.powe_range_start_hp',15001,'=');
			
		}if($power_round_off<=15000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
			
		}
	}//--------1992
	if($actuall_year_assign =='1992'){
		if($power_round_off>10000){
			$query_fees	-> condition('fees.powe_range_start_hp',10001,'=');
			
		}if($power_round_off<=10000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
		}
	}//--------1972
	if($actuall_year_assign =='1972'){
		if($power_round_off>10000){
			$query_fees	-> condition('fees.powe_range_start_hp',10001,'=');
			
		}if($power_round_off<=10000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
		}
	}
	//--------1958
	if($actuall_year_assign =='1958'){
		if($power_round_off>10000){
			$query_fees	-> condition('fees.powe_range_start_hp',10001,'=');
			
		}if($power_round_off<=10000){
			$query_fees	-> condition('fees.powe_range_start_hp',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_hp',$power_round_off,'>=');
		}
	}
	//print_r($query_fees->execute());die();
	$result_data 	=  $query_fees->execute()->fetchAssoc();
	//print_r($result_data);
	//die();
	return $result_data;
	}catch (Exception $e) {
    //echo 'Caught exception: ',  $e->getMessage(), "\n";
	echo 99;
}
}
function validateDate($date, $format = 'Y-m-d'){
	 $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}
function fees_calculation_registration_section_85($starting_year){
	
	$r					= validateDate($starting_year, 'Y-m-d');

//echo $starting_year;die();
	
	 if($r==1){
			 if($starting_year>='2016-12-30'){
				 $actuall_year_assign=2017;
			 }if($starting_year <='2016-12-29'){
				 $actuall_year_assign=2016;
			 }if($starting_year >='1992-01-01' && $starting_year <='2005-12-31'){				
			  $actuall_year_assign=1992;
			 }if($starting_year >='1972-01-01' && $starting_year<='1991-12-31'){
				 $actuall_year_assign=1972;
			 }if($starting_year >='2006-01-01' && $starting_year <='2015-12-31'){
				  $actuall_year_assign=2006;
			}if($starting_year >='1958-05-22' && $starting_year <='1971-12-31'){
				  $actuall_year_assign=1958;
			}
			
	
	}
	else{
		   $actuall_year = $starting_year;
		   if($actuall_year>=2017){
			   $actuall_year_assign	=	2017;
		   } if($actuall_year>='1992' && $actuall_year<='2005'){
			   $actuall_year_assign	=	1992;
		   }if($actuall_year>='1972' && $actuall_year<='1991'){
			   $actuall_year_assign	=	1972;
		   }if($actuall_year>='2006' && $actuall_year<='2015'){
			   $actuall_year_assign	=	2006;
		   }if($actuall_year=='2016'){
			   $actuall_year_assign	=	2016;
		   }if($actuall_year>='1958' && $actuall_year<='1971'){
			   $actuall_year_assign=1958;
		   }
		   if($actuall_year_assign >2016){
			   $diff_period = ($year_array[2]-$year_array[0]);
		   }
	}
	
	$query_fees 	=  db_select('fa_fees_structure_section_85', 'fees');
	$query_fees		-> fields('fees',array('fees','feesyear'));
	$query_fees		-> condition('fees.feesyear', $actuall_year_assign);
	

	 $fees 	=  $query_fees->execute()->fetchAssoc();
	
	return $fees;
	}

function fees_calculation_registration_power_station($power,$starting_year){
	
	$power_round_off 	= 	round($power);
	$r					=   validateDate($starting_year, 'Y-m-d');
		if($r==1){
			 if($starting_year>='2016-12-30'){
				 $actuall_year_assign=2017;
			 }if($starting_year >='2016-01-01' && $starting_year <='2016-12-29'){
				 $actuall_year_assign=2016;
			 }if($starting_year >='1992-01-01' && $starting_year <='2005-12-31'){
				 $actuall_year_assign=1992;
			 }if($starting_year >='1972-01-01' && $starting_year<='1991-12-31'){
				 $actuall_year_assign=1972;
			 }if($starting_year >='2006-01-01' && $starting_year <='2015-12-31'){
				  $actuall_year_assign=2006;
			}if($starting_year >='1958-05-22' && $starting_year <='1971-12-31'){
				  $actuall_year_assign=1958;
			}
			
		 
			 
	}else{
		   $actuall_year = $starting_year[0];
		  
		   if($actuall_year>=2017){
			   $actuall_year_assign	=	2017;
		   } if($actuall_year>='1992' && $actuall_year<='2005'){
			   $actuall_year_assign	=	1992;
		   }if($actuall_year>='1972' && $actuall_year<='1991'){
			   $actuall_year_assign	=	1972;
		   }if($actuall_year>='2006' && $actuall_year<='2015'){
			   $actuall_year_assign	=	2006;
		   }if($actuall_year=='2016'){
			   $actuall_year_assign	=	2016;
		   }if($actuall_year>='1958' && $actuall_year<='1971'){
			   $actuall_year_assign=1958;
		   }
		  
	}
	//echo $actuall_year_assign;die();
	$query_fees 	=  db_select('fa_fees_structure_power_station', 'fees');
	$query_fees		-> fields('fees',array('fees','workers_end_to','power_range_end_kw','feesyear'));
	$query_fees		-> condition('fees.feesyear', $actuall_year_assign);
	//----------2015
	if($actuall_year_assign== 2006){
		if($power_round_off>300000){
			$query_fees	-> condition('fees.power_range_start_kw',300001,'=');
			
		}if($power_round_off<=300000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
		}
	}
	//--------2016
	if($actuall_year_assign == 2016){
		if($power_round_off<=2000000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
			
		}if($power_round_off>2000000){
			$query_fees	-> condition('fees.power_range_start_kw',2000001,'=');
			
		}
	}
		//---2017
	if($actuall_year_assign== 2017){
		if($power_round_off<=2000000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
			
		}if($power_round_off>2000000){
			$query_fees	-> condition('fees.power_range_start_kw',2000000,'=');
			
		}
	}
	//--------1992
	if($actuall_year_assign== 1992){
		if($power_round_off<=3000000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
			
		}if($power_round_off>3000000){
			$query_fees	-> condition('fees.power_range_start_kw',3000001,'>=');
			
		}
	}
	//--------1972
	if($actuall_year_assign== 1972){
		if($power_round_off<=300000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
			
		}if($power_round_off>300000){
			$query_fees	-> condition('fees.power_range_start_kw',300001,'=');
			
		}
	}
	//--------1958
	if($actuall_year_assign== 1958){
		if($power_round_off<300000){
			$query_fees	-> condition('fees.power_range_start_kw',$power_round_off,'<=');
			$query_fees	-> condition('fees.power_range_end_kw',$power_round_off,'>=');
			
		}if($power_round_off>300000){
			$query_fees	-> condition('fees.power_range_start_kw',300001,'=');
			
		}
	}

	 $result_data 	=  $query_fees->execute()->fetchAssoc();
	
	return $result_data;
	}
function fees_calculation_registration_2mii($starting_year,$worker){
	$amenablity_date_mofify 	= 	date('Y-m-d',strtotime(date("Y-m-d", strtotime($date_of_amenability))));
	$power_round_off 			= 	round($power);
	$r							= validateDate($starting_year, 'Y-m-d');
	//die;
    if($r==1){ 
	
					$datex 					= new DateTime($starting_year);
					$datey 					= new DateTime('2016-12-30');
	
	 if($starting_year>='2016-12-30'){
				 $actuall_year_assign=2017;
			 }if($starting_year >='2016-01-01' && $starting_year <='2016-12-29'){
				 $actuall_year_assign=2016;
			 }if($starting_year >='1992-01-01' && $starting_year <='2005-12-31'){
				 $actuall_year_assign=1992;
			 }if($starting_year >='1972-01-01' && $starting_year<='1991-12-31'){
				 $actuall_year_assign=1972;
			 }if($starting_year >='2006-01-01' && $starting_year <='2015-12-31'){
				  $actuall_year_assign=2006;
			}if($starting_year >='1958-05-22' && $starting_year <='1971-12-31'){
				  $actuall_year_assign=1958;
			}
			
			 
	}else{
		   $actuall_year = $starting_year;
		  // $actuall_year = 2005;
		   if($actuall_year>=2017){
			   $actuall_year_assign	=	2017;
		   } if($actuall_year>='1992' && $actuall_year<='2005'){
			   $actuall_year_assign	=	1992;
		   }if($actuall_year>='1972' && $actuall_year<='1991'){
			   $actuall_year_assign	=	1972;
		   }if($actuall_year>='2006' && $actuall_year<='2015'){
			   $actuall_year_assign	=	2006;
		   }if($actuall_year=='2016'){
			   $actuall_year_assign	=	2016;
		   }if($actuall_year>='1958' && $actuall_year<='1971'){
			   $actuall_year_assign=1958;
		   }
		  
	}
	
	$query_fees 	=  db_select('fa_fees_structure_2mii', 'fees');
	$query_fees		-> fields('fees',array('fees','workers_end_to','feesyear'));
	$query_fees		-> condition('fees.feesyear', $actuall_year_assign);
	//----------2015
	if($actuall_year_assign== 2006){
		if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
		}
	}
	//----------2016
	if($actuall_year_assign == 2016){
		if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
			
		}if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}
	}
	//----------2017
	if($actuall_year_assign== 2017){
		if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
			
		}if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}
		
	
	}
	//--------1992
	if($actuall_year_assign== 1992){
		if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
			
		}if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}
	}

	//--------1972
	if($actuall_year_assign== 1972){
		if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
			
		}if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}
	}
	//--------1958
	if($actuall_year_assign== 1958){
		if($worker<=1000){
			$query_fees	-> condition('fees.workers_start_form',$worker,'<=');
			$query_fees	-> condition('fees.workers_end_to',$worker,'>=');
			
		}if($worker>1000){
			$query_fees	-> condition('fees.workers_start_form',1001,'=');
			
		}
	}
	 $result_data 	=  $query_fees->execute()->fetchAssoc();
	 //echo $query_fees;die;
	
	return $result_data;
	}
	
function get_factory_zone(){
$query_z = db_select('fa_zone', 'fz');
$query_z->fields('fz', array('zone_id','zone_name','zone_details'));
$query_z->orderBy('fz.zone_id', 'asc');
$result_z = $query_z->execute();
  	$resultZoneData = $result_z->fetchAll();
return $resultZoneData;
}

/* COMMON FUNCTION FOR PLAN ADMIN SECTION */

function get_all_worker($service_id,$factory_type_id,$application_id,$reference_no){
	global $base_root,$base_path,$user;
	$applicant_id = $user->uid;
	$worker_detials = array();
	$type					= '';
	$details				= '';
	$relationship			= '';
	$address_of_director	= '';
	
					
	/* WORKER DETAILS */
	$worker_detials = worker_details_reference($application_id,$service_id,$factory_type_id,$reference_no);
	
	$header = array(
						array('data' => 'TOTAL NO. OF WORKERS: '.$worker_detials['worker_total'], 'colspan' => 2),
				);
						
	$rows[] = array( 
						array('data' =>'<b>No. of Men:- </b> '.$worker_detials['worker_men'] ,'class' => array('')),
						array('data' =>'<b>No. of Women:- </b>'.$worker_detials['worker_women'] ,'class' => array('')),
					);
	$rows[] = array( 
						array('data' =>'<b>No. of Adolescents Male:-</b> '.$worker_detials['adolescents_male'] ,'class' => array('')),
						array('data' =>'<b>No. of Adolescents Female:-</b> '.$worker_detials['adolescents_female'] ,'class' => array('')),
);
	$rows[] = array( 
						array('data' =>'<b>No. of Child Male:-</b> '.$worker_detials['children_male'] ,'class' => array('')),
						array('data' =>'<b>No. of Child Female:-</b> '.$worker_detials['children_female'] ,'class' => array('')),
);
	
	$output = theme_table(
	array(
		  'header' => $header,
		  'rows' => $rows,
		  'attributes' => array('class' => array('table', 'pretty', 'table-bordered table-hover')),
		  'sticky' => true,
		  'caption' => '',
		  'colgroups' => array(),
		  'empty' => t("No data found!") 
		)
	);	
		 return $output;
}

//Modify by Labani
function get_uploaded_document_data($service_id,$factory_typeid,$application_id,$reference_number){
	

	$query 	=  db_select('fa_caf_upload_doc', 'fcud');
	$query	-> LeftJoin('fa_file_managed_custom', 'file' ,'file.id = fcud.fid');
	$query 	-> fields('fcud', array( 'id', 'app_id', 'uid', 'fid', 'doc_name', 'file_name','application_reference_no','doc_id'));
	$query	-> fields('file', array('file_uri','tm_application_id'));
	$query	-> condition('fcud.app_id', $application_id);
	$query	-> condition('fcud.application_reference_no', $reference_number);
	$query	-> condition('fcud.upload_documents_service_id', $service_id);
	$query	-> condition('fcud.upload_doc_factory_type_id', $factory_typeid);
	//echo $application_id.'-----'.$factory_typeid.'-------'.$reference_number.'------'.$query;exit;
	$result_all_upload_doc = $query->execute()->fetchAll();
	return $result_all_upload_doc;
}


function get_application_details($service_id,$factory_type_id,$application_id,$reference_no){
	global $base_root,$base_path,$user,$_SESSION;
	$applicant_id = $user->uid;
	$get_all_data = array();
	$type					= '';
	$details				= '';
	$relationship			= '';
	$address_of_director	= '';

	/* GENERAL INFO */
	$get_all_data =  get_application_withid($application_id);
	//echo "<pre>"; print_r($get_all_data); die();
	
	$header_general_info = array(
								array('data' => 'GENERAL INFORMATION', 'colspan' => 3),
						);
	if(!empty($get_all_data)){
			foreach($get_all_data as $details_general_info){ 
					
			 		$rows_general_info[] = array( 
									array('data' =>'<b>Factory Name:- </b> '.$details_general_info->factory_name.' <b>[ '.$details_general_info->factory_type.' ]</b>' ,'class' => array('')),
									array('data' =>'<b>Zone:-</b>  '.$details_general_info->zone_name ,'class' => array('')),
									array('data' =>'<b>PAN:-</b> '.$details_general_info->factory_pan ,'class' => array('')),
								);
		} 
		
	}
	$output_general_info = theme_table(
	array(
		  'header' => $header_general_info,
		  'rows' => $rows_general_info,
		  'attributes' => array('class' => array('table', 'pretty', 'table-bordered table-hover')),
		  'sticky' => true,
		  'caption' => '',
		  'colgroups' => array(),
		  'empty' => t("No data found!") 
		)
	);	
	
	/* FACTORY ADDRESS PART */
	$getdata_factory_address =  array('district','subdivision','areatype','block','panchayat','policestation','pincode','state','postoffice');
	$getdata_headoffice_address =  array('district_off','subdivision_off','areatype_off','block_off','panchayat_off','policestation_off','pincodeoff','state_off','postoffice_off');
	
	$header_address_info = array(
								array('data' => 'FACTORY ADDRESS ', 'colspan' => 4),
						   );
						
	if(!empty($get_all_data)){
			foreach($get_all_data as $details_address_info){ 
			
				    $factory_address =	get_full_address('fa_cafa','sub-table',$details_address_info->id,$getdata_factory_address);
					$headoffice_address = get_full_address('fa_cafa','sub-table',$details_address_info->id,$getdata_headoffice_address);
					
					$rows_address_info[] = array( 
								array('data' =>'<b>Location of Factory:-</b> '.$factory_address.' '.$details_general_info->addrline ,'class' => array(''), 'colspan' => 2),
								array('data' =>'<b>Registered office / Head office:-</b> '.$headoffice_address.' '.$details_general_info->addrline_off ,'class' => array(''), 'colspan' => 2),
							);
								
					$rows_address_info[] = array( 
									array('data' =>'<b>Telephone No.:- </b> '.$details_address_info->comm_telephone ,'class' => array('')),
									array('data' =>'<b>Mobile No.:-</b>  '.$details_address_info->comm_mobile ,'class' => array('')),
									array('data' =>'<b>Fax No.:-</b> '.$details_address_info->comm_fax ,'class' => array('')),
									array('data' =>'<b>Email Id:-</b> '.$details_address_info->comm_email ,'class' => array('')),
								);
					$rows_address_info[] = array( 
								array('data' =>'<b style="font-size:0.85em; color:#FF0000">(N.B:-This Registered/Head office address will be treated as communication address as per Section 7 of Factories Act,1948 )</b>' ,'class' => array(''), 'colspan' => 4),
							);		
							
			}
	}
	$output_address_info = theme_table(
	array(
		  'header' => $header_address_info,
		  'rows' => $rows_address_info,
		  'attributes' => array('class' => array('table', 'pretty', 'table-bordered table-hover')),
		  'sticky' => true,
		  'caption' => '',
		  'colgroups' => array(),
		  'empty' => t("No data found!") 
		)
	);
	
	/* OCCUPIER INFO */
	
	$getdata_occupier_permanent_address =  array('district_oprmntadr','subdivision_oprmntadr','areatype_oprmntadr','block_oprmntadr','panchayat_oprmntadr','policestation_oprmntadr','pincodeoprmntadr','state_oprmntadr','postoffice_oprmntadr');

	$getdata_occupier_present_address =  array('district_oprsntadr','subdivision_oprsntadr','areatype_oprsntadr','block_oprsntadr','panchayat_oprsntadr','policestation_oprsntadr','pincodeoprsntadr','state_oprsntadr','postoffice_oprsntadr');
	
	$header_occupier_info = array(
									array('data' => 'OCCUPIER DETAILS', 'colspan' => 4),
							);
	if(!empty($get_all_data)){
			foreach($get_all_data as $details_occupier_info){ 
			
					$permanent_address      =	get_full_address('fa_cafa','sub-table',$details_occupier_info->id,$getdata_occupier_permanent_address);
					$present_address        =	get_full_address('fa_cafa','sub-table',$details_occupier_info->id,$getdata_occupier_present_address);
					$details_occupier_adhaar  =   !empty($details_occupier_info->occupier_aadhaar)?$details_occupier_info->occupier_aadhaar:'N/A';
					$details_occupier_passport  =   !empty($details_occupier_info->occupier_passport)?$details_occupier_info->occupier_passport:'N/A';
					
					$rows_occupier_info[] = array( 
									array('data' =>'<b>Occupier Type:-</b>  '.$details_occupier_info->occupier_type ,'class' => array('')),
									array('data' =>'<b>Name:- </b> '.$details_occupier_info->occupier_name ,'class' => array('')),
									array('data' =>'<b>Father\'s/Husband\'s name:- </b> '.$details_occupier_info->occupier_gurdian_name ,'class' => array('')),
								);
								
					if($details_occupier_info->occupier_nationality == 'Indian')
					{  $identification = 'Aadhaar No';
					   $identification_no = $details_occupier_adhaar;
					} else { 
						$identification = 'Passport No';
						$identification_no = $details_occupier_passport;
					}
			
			 		$rows_occupier_info[] = array( 
									array('data' =>'<b>Nationailty:- </b> '.$details_occupier_info->occupier_nationality ,'class' => array('')),
									array('data' =>'<b>'.$identification.':-</b>  '.$identification_no ,'class' => array('')),
									array('data' =>'<b>Mobile No:- </b> '.$details_occupier_info->occupier_mobile ,'class' => array('')),
								);
								
					$rows_occupier_info[] = array( 
									array('data' =>'<b>Age:- </b> '.$details_occupier_info->occupier_age ,'class' => array('')),
									array('data' =>'<b>Telephone Number:- </b> '.$details_occupier_info->occupier_telephone ,'class' => array('')),
									array('data' =>'<b>Fax No:-</b> '.$details_occupier_info->occupier_fax_no ,'class' => array('')),
							);

					$rows_occupier_info[] = array( 
					 
									array('data' =>'<b>Email Id:- </b> '.$details_occupier_info->occupier_email_id ,'class' => array('')),
									array('data' =>'<b>Permanent Address:-</b> '.$permanent_address.', '.$details_occupier_info->addrline_oprmntadr ,'class' => array('')),
									array('data' =>'<b>Present Address:-</b> '.$present_address.', '.$details_occupier_info->addrline_oprsntadr ,'class' => array('')),
							);
			}
			
	}
	
	$output_occupier_info = theme_table(
	array(
		  'header' => $header_occupier_info,
		  'rows' => $rows_occupier_info,
		  'attributes' => array('class' => array('table', 'pretty', 'table-bordered table-hover')),
		  'sticky' => true,
		  'caption' => '',
		  'colgroups' => array(),
		  'empty' => t("No data found!") 
		)
	);
	
	/* OWNER ADDRESS PART */
	$getdata_owner_address =  array('district_premises','subdivision_premises','areatype_premises','block_premises','panchayat_premises','policestation_premises','pincodepremises','state_premises','postoffice_premises');
	
	$header_owner_address = array(
								array('data' => 'DETAILS OF OWNER OF PREMISES', 'colspan' => 2),
						   );
						
	if(!empty($get_all_data)){
			foreach($get_all_data as $details_owner_address){ 
			
				    $owner_address =	get_full_address('fa_cafa','sub-table',$details_owner_address->id,$getdata_owner_address);
					
					$rows_owner_address[] = array( 
								array('data' =>'<b>Name:- </b> '.$details_owner_address->owner_name ,'class' => array('')),
								array('data' =>'<b>Address:-</b> '.$owner_address.', '.$details_owner_address->addrline_premises ,'class' => array('')),
							);
			}
	}
	$output_owner_address = theme_table(
	array(
		  'header' => $header_owner_address,
		  'rows' => $rows_owner_address,
		  'attributes' => array('class' => array('table', 'pretty', 'table-bordered table-hover')),
		  'sticky' => true,
		  'caption' => '',
		  'colgroups' => array(),
		  'empty' => t("No data found!") 
		)
	);

		 return $output_general_info.$output_address_info.$output_others_info.$output_occupier_info.$output_owner_address;	
}

function ajax_zone_callback($form, &$form_state){
	$commands   	= array();
	$zone_id = array();
	$zone_id[] = $form_state['values']['zone_id'];
	$commands[] = ajax_command_replace('#table_app_replace_div', '<div id="table_app_replace_div"><div class="col-md-12">'.get_all_application($zone_id).'</div></div>');
	return array('#type' => 'ajax', '#commands' => $commands);
}
////////////TAMAL REGISTRATION SECTION////////////////

function get_reg_application_list($zoneUserMap){
	
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('plan_approve_status','modification_date','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number','backlog_plan_approval_no','backlog_plan_approval_date','factory_registrstion_no','registration_date','factory_license_no','license_date','backlog_license_number','backlog_license_date','backlog_registration_no','backlog_registration_date','factory_plan_approval_number','is_backlog','tm_migrated_flag','approve_dsc_licence_file','approve_dsc_reg_file','license_valid_upto','approve_dsc_reg_file_id'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('cafa.application_status','In','!=');
	$fetch_application->condition('cafa.application_status','F','!=');
	$fetch_application->condition('cafa.application_status','P','!=');
	$fetch_application->condition('cafa.service_id',2);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
	
	}
	
function get_all_reginspector_list($zoneUserMap){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('plan_approve_status','modification_date','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number','backlog_plan_approval_no','backlog_plan_approval_date','factory_registrstion_no','factory_license_no','license_date','backlog_license_number','backlog_license_date','backlog_registration_no','backlog_registration_date','factory_plan_approval_number','is_backlog','tm_migrated_flag','approve_dsc_licence_file','approve_dsc_reg_file','license_valid_upto'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('cafa.application_status','In','!=');
	$fetch_application->condition('cafa.service_id',2);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
	}
	
/*function created_reg_identification($service_id, $reference_no){
	$refrencse_no = '';
	if($service_id == 2){
		$reg_identification_number  = db_query("select factory_reg_identification_number from fa_cafa where id = (select max(id) from fa_cafa ) ")->fetchObject()->factory_reg_identification_number;
        if($reg_identification_number == NULL || empty($reg_identification_number)){
		$max_identification_number = "reg_app_0".$reference_no."_".date('Y')."_00001";
        }else{
			$max_appno  =  db_query("select max (NULLIF(substr(factory_reg_identification_number,22,8),'') :: integer) as max_appno from fa_cafa")->fetchObject()->max_appno; 
            $next_no = $max_appno+1;
			$iden_first     =   "reg_app_0".$reference_no."_".date('Y')."_";
        	$iden_second    =    str_pad($next_no, 5, "0", STR_PAD_LEFT);
			$max_identification_number = $iden_first.$iden_second;
		}
	}
	return $max_identification_number;
}*/
function get_nature_manufacture_data($application_id){
	///echo $application_id,$service_id,$factorytype_id,$reference_id;die();
	$fetch_application	= db_select('fa_nature_manufacturing ', 'nature');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=nature.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=nature.factory_type');
	$fetch_application->fields('nature', array());
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->condition('nature.application_id ',$application_id,'=');
	//$fetch_application->condition('nature.factory_type ',$factorytype_id,'=');
	//$fetch_application->condition('nature.application_reference_no ',$reference_id,'=');
	//$fetch_application->condition('nature.service_id ',$service_id,'=');
	$fetch_application	-> orderBy('nature.id', 'ASC');
	$nature_result = $fetch_application->execute()->fetchAll(); 
	return $nature_result;
}

function get_manager_data($application_id){
	$fetch_application	= db_select('fa_manager_details ', 'manager');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=manager.manager_service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=manager.factory_type_id');
	$fetch_application->fields('manager', array());
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->condition('manager.application_manager_id ',$application_id,'=');
	$fetch_application	-> orderBy('manager.id', 'desc');
	$manager_result = $fetch_application->execute()->fetchAll(); 
	return $manager_result;
}

function get_director_data($application_id){
	$fetch_application	= db_select('fa_director_details ', 'director');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=director.director_service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=director.factory_type_id');
	$fetch_application->fields('director', array());
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->condition('director.application_director_id ',$application_id,'=');
	$fetch_application	-> orderBy('director.id', 'desc');
	$director_result = $fetch_application->execute()->fetchAll(); 
	return $director_result;
}
/*function get_occupier_data($application_id){
	$query_data 	=  db_select('fa_occupier_details', 'od');
	$query_data	    -> fields('od',array());
	$query_data	    -> condition('od.application_occupier_id', $application_id);
	$query_data	    -> condition('od.occupier_service_id', $service_id);
	$query_data	    -> condition('od.factory_type_id', $factory_typeid);
	$query_data		-> condition('od.application_reference_no', $reference_number);
	if(!empty($year_id)){
		$query_data	    -> condition('od.calculate_year_id', $year_id);
	}
	$query_data		-> orderBy('od.id', 'desc');
	$occupier_data  =  $query_data->execute()->fetchAll();
	return $occupier_data;
}*/

function get_manager_details_service($application_id,$service_id,$factory_typeid,$reference_number){
	//echo $application_id.'</br/>'.$service_id.'</br/>'.$reference_number;die();
	
	$query_manager_details 	=  db_select('fa_manager_details', 'manager_details');
	$query_manager_details	-> fields('manager_details',array());
	$query_manager_details	-> condition('manager_details.application_manager_id', $application_id);
	$query_manager_details	-> condition('manager_details.manager_service_id', $service_id);
	$query_manager_details	-> condition('manager_details.factory_type_id', $factory_typeid);
	$query_manager_details	-> condition('manager_details.application_reference_no', $reference_number);
	$query_manager_details	-> condition('manager_details.active_inactive_manager',1);
	$query_manager_details	-> orderBy('manager_details.id', 'desc');
	$result_manager_details 	=  $query_manager_details->execute()->fetchAll();
	return $result_manager_details;
}
function get_checking($application_id,$service_id,$factory_type_id,$reference_no){	

			$query_check_applicant = db_select('fa_cafa_remarks','remarks');
			$query_check_applicant->fields('remarks', array());
			$query_check_applicant->condition('remarks.app_id', $application_id, '=');
			$query_check_applicant->condition('remarks.app_reference_no', $reference_no, '=');
			$query_check_applicant->orderBy('remarks.id','DESC');
			$query_check_applicant->range(0, 1);
			$result = $query_check_applicant->execute();
			$data = $result->fetchAssoc();
		//print_r($data);die;
	return $data;
}
function get_send_user($app_user_id){
	
	$default_select 	= array(""=>"Select");
	$result 			= db_query("SELECT rid, name FROM {role} order by rid");
	$list 				= array();
	foreach ($result as $record) {
		if($record->rid != '1' && $record->rid != '2' && $record->rid != '3' && $record->rid != '5' && $record->rid != '7' && $record->rid != '8' && $record->rid != '9')
		$list[$record->rid] = t('@name', array(
			'@name' => $record->name,
		));
	}
	return ($default_select+$list);	
}
function get_fact_reg_identification_no($factory_reg_identification_number, $factory_reg_identification_date){
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application	->fields('cafa', array('id'));
	$fetch_application	->condition('cafa.factory_reg_identification_number ',$factory_reg_identification_number,'=');
	//$fetch_application	->condition('cafa.created_date ',$plan_approval_identification_date,'=');
    $application_approved_id = $fetch_application->execute()->fetchObject()->id; 
	if($application_approved_id == NULL){
		$fetch_application	= db_select('fa_cafa ', 'cafa');
		$fetch_application	->fields('cafa', array('id'));
		$fetch_application	->condition('cafa.backlog_registration_no ',$factory_reg_identification_number,'=');
		//$fetch_application	->condition('cafa.created_date ',$plan_approval_identification_date,'=');
		$application_backlog_id = $fetch_application->execute()->fetchObject()->id; 
		$application_id = $application_backlog_id;
	}else{
		$application_id = $application_approved_id;
	}
	return $application_id;
}



function fetch_year($application_id,$service_id,$factory_typeid,$reference_no){
	$calculateyear 	= array(""=>"- Select -");
	$all_year 		= array();
	$query_year		= 	db_select('fa_calculate_year', 'year');
	$query_year		->	fields('year',array('calculate_year','id','is_active_year','calculate_end_year','valid_time_period','calculate_starting_year','id','application_form_type'));
	$query_year		-> 	condition('year.application_id', $application_id);
	$query_year		-> 	condition('year.service_id', $service_id);
	$query_year		-> 	condition('year.factory_id', $factory_typeid);
	$query_year		-> 	condition('year.reference_no', $reference_no);
	//$query_year		->	orderBy('year.id', 'DESC');
	$result_year		= $query_year->execute()->fetchAll(); 
	
	return $result_year;
}


function is_previous_name($application_id,$application_reference_no,$factory_typeid,$service_id,$service_year){
	$query_previous_id  =  db_query("SELECT count(id) as previous_id  FROM {fa_factory_previous_name} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid and application_reference_no=:application_reference_no and service_year=:service_year",
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':application_reference_no'=>$application_reference_no,':service_year' => $service_year))->fetchObject()->previous_id;
	return $query_previous_id;
}


function del_previous_name($application_id,$service_id,$factory_typeid,$reference_no){
	$query 	=  db_delete('fa_factory_previous_name');
	$query	-> condition('application_id', $application_id);
	$query	-> condition('factory_type', $factory_typeid);
	$query	-> condition('application_reference_no', $reference_no);
	$query	-> condition('name_application_status', 'In');
	$query	-> condition('service_id', $service_id);
	$e		= $query->execute();
}
function get_previous_details_yearwise($application_id,$application_reference_no,$factory_typeid,$service_id,$service_year){
	//echo $application_id.'-----------Applicationid<br/>'.$application_reference_no.'--Reference no.<br/>'.$factory_typeid.'........type<br/>'.$service_id.'---------serviceid<br/>'.$service_year.'-----------year';
	$query_previous_details 	=  db_select('fa_factory_previous_name', 'previous_nam');
	$query_previous_details		-> fields('previous_nam',array('pervious_factory_name','change_date','conversation_ownership_type','service_year','is_change','transfer_fees'));
	$query_previous_details		-> condition('previous_nam.application_id', $application_id);
	$query_previous_details	-> condition('previous_nam.factory_type', $factory_typeid);
	$query_previous_details	-> condition('previous_nam.application_reference_no', $application_reference_no);
	$query_previous_details	-> condition('previous_nam.service_id', $service_id);
	$query_previous_details	-> condition('previous_nam.service_year', $service_year);
	$result_previous_details 	=  $query_previous_details->execute()->fetchAll();
	return $result_previous_details;
}
function max_previous_name($application_id,$application_reference_no,$factory_typeid,$service_id){
	$query_previous_id  =  db_query("SELECT max(id) as max_previous_id FROM {fa_factory_previous_name} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid and application_reference_no=:application_reference_no",
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':application_reference_no'=>$application_reference_no))->fetchObject()->max_previous_id;
	
	$query_previous_details 	=  db_select('fa_factory_previous_name', 'previous_nam');
	$query_previous_details		-> fields('previous_nam',array('conversation_ownership_type'));
	$query_previous_details		-> condition('previous_nam.id', $query_previous_id);
	$result_previous_details 	=  $query_previous_details->execute()->fetchObject()->ownership_type;
	
	
	return $result_previous_details;
}

function get_power_generating_station($application_no,$reference_no,$factory_id,$service_id){
	
	$query_power_details 	=  db_select('fa_power_details', 'power_details');
	$query_power_details	-> fields('power_details',array());
	$query_power_details	-> condition('power_details.application_id', $application_no);
	$query_power_details	-> condition('power_details.factory_type', $factory_id);
	$query_power_details	-> condition('power_details.application_reference_no', $reference_no);
	$query_power_details	-> condition('power_details.service_id', $service_id);
	$result_power_details 	=  $query_power_details->execute()->fetchAll();
	return $result_power_details;
}
function get_previous_details($application_id,$application_reference_no,$factory_typeid,$service_id){
	$query_previous_details 	=  db_select('fa_factory_previous_name', 'previous_nam');
	$query_previous_details		-> fields('previous_nam',array('pervious_factory_name','change_date','conversation_ownership_type','service_year','is_change','transfer_fees','conversation_name','description_conversation'));
	$query_previous_details		-> condition('previous_nam.application_id', $application_id);
	$query_previous_details	-> condition('previous_nam.factory_type', $factory_typeid);
	$query_previous_details	-> condition('previous_nam.application_reference_no', $application_reference_no);
	$query_previous_details	-> condition('previous_nam.service_id', $service_id);
	//$query_previous_details	-> condition('previous_nam.name_active_inactive','1','=');
	$result_previous_details 	=  $query_previous_details->execute()->fetchAll();
	return $result_previous_details;
}
function nature_manufacturing_year($year,$application_id,$application_reference_no,$factory_typeid,$service_id){
	//echo $application_id.'<br/>'.$application_reference_no.'<br/>'.$factory_typeid.'<br/>'.$service_id.'<br/>'.$year;die();
	$query_manufacturing_details 	=  db_select('fa_nature_manufacturing', 'manufacturing');
	$query_manufacturing_details	-> fields('manufacturing',array('nature_manufacturing'));
	$query_manufacturing_details	-> condition('manufacturing.application_id', $application_id);
	$query_manufacturing_details	-> condition('manufacturing.factory_type', $factory_typeid);
	$query_manufacturing_details	-> condition('manufacturing.application_reference_no', $application_reference_no);
	$query_manufacturing_details	-> condition('manufacturing.service_id', $service_id);
	$query_manufacturing_details	-> condition('manufacturing.service_year', $year);
	$result_manufacturing_details 	=  $query_manufacturing_details->execute()->fetchAll();
	return $result_manufacturing_details;
}
function is_nature_work($application_id,$service_id,$factory_typeid,$service_year,$application_reference_no){
	$query_nature_id =  db_query("SELECT count(id) as nature_id  FROM {fa_nature_manufacturing} WHERE application_id = :application_id and service_id= :service_id and factory_type =:factory_typeid and manufacturing_active_inactive=:active and service_year ='".$service_year."' and application_reference_no =:application_reference_no and manufacturing_application_status ='In'",
	array(':application_id'=>$application_id,':service_id'=>$service_id,':factory_typeid'=> $factory_typeid,':active'=>'1',':application_reference_no'=> $application_reference_no))->fetchObject()->nature_id;
	return $query_nature_id;
}
function del_nature_work($application_id,$service_id,$factory_typeid,$reference_no){
	$query 	=  db_delete('fa_nature_manufacturing');
	$query	-> condition('application_id', $application_id);
	$query	-> condition('factory_type', $factory_typeid);
	$query	-> condition('application_reference_no', $reference_no);
	$query	-> condition('manufacturing_application_status', 'In');
	$query	-> condition('service_id', $service_id);
	$e		= $query->execute();
}
function get_previous_name($application_id,$application_reference_no,$factory_typeid,$service_id){
	$query_previous_details 	=  db_select('fa_factory_previous_name', 'previous_nam');
	$query_previous_details		-> fields('previous_nam',array('pervious_factory_name','change_date','ownership_type','service_year','is_change'));
	$query_previous_details		-> condition('previous_nam.application_id', $application_id);
	$query_previous_details	-> condition('previous_nam.factory_type', $factory_typeid);
	$query_previous_details	-> condition('previous_nam.application_reference_no', $application_reference_no);
	$query_previous_details	-> condition('previous_nam.service_id', $service_id);
	
	$result_previous_details 	=  $query_previous_details->execute()->fetchAll();
	return $result_previous_details;
}

function get_plan_additional_conditions($application_id,$application_reference_no){
    
    $query_conditions     =  db_select('fa_cafa_conditions', 'addl_cond');
    $query_conditions    -> fields('addl_cond',array('conditions'));
    $query_conditions    -> condition('addl_cond.app_id', $application_id);
    $query_conditions    -> condition('addl_cond.app_reference_no', $application_reference_no);
    $query_conditions    -> condition('addl_cond.status', 'active');
    $result_conditions     =  $query_conditions->execute()->fetchAll();
    return $result_conditions;
}
function get_role_id($uid){
		$fetch_users_role		= db_select('users_roles', 'ur');
		$fetch_users_role->InnerJoin('role', 'ro', 'ro.rid = ur.rid');
		$fetch_users_role->fields('ro', array('rid'));;
		$fetch_users_role->condition('ur.uid', $uid,'=');
		$result = $fetch_users_role->execute();
		$details_check = $result->fetchObject()->rid;
		return $details_check;
}
function is_rm_user($application_id,$reference_no,$uid,$rid){
	
	$query_rm_id  =  db_query('SELECT verify_details  FROM {fa_cafa_remarks} WHERE app_id = :application_id and  app_reference_no =:reference_no and  remark_by_uid =:remark_by_uid and remark_by_roleid =:remark_by_rid', array(':application_id'=>$application_id,':reference_no'=>$reference_no,':remark_by_uid'=>$uid,':remark_by_rid'=>$rid))->fetchObject()->verify_details;
   return $query_rm_id;

}

function get_plan_document_lists($service_id,$factory_type_id){

	$query 	=  db_select('fa_documents_master', 'fdm');
	$query	-> fields('fdm', array('id','document_name','document_service_id','document_factory_id','status','identity_flag'));
	$query	-> condition('fdm.document_service_id', $service_id);
	$query	-> condition('fdm.document_factory_id', $factory_type_id);
	$query	-> condition('fdm.status', '1');
	$query  -> orderBy('fdm.id', 'ASC');
	//echo $query; die;
	$result = $query->execute();
	$resultData = $result->fetchAll();
	
	return $resultData;	
} 

function get_other_plan_document_lists($service_id,$factory_type_id){
	$query 	=  db_select('fa_documents_master', 'fdm');
	$query	-> fields('fdm', array('id','document_name','document_service_id','document_factory_id','status'));
	$query	-> condition('fdm.document_service_id', $service_id);
	$query	-> condition('fdm.document_factory_id', $factory_type_id);
	$query	-> condition('fdm.status', '0');
	$query  -> orderBy('fdm.id', 'ASC');
	//echo $query;die;
	$result = $query->execute();
	$resultData = $result->fetchAll();
	
	return $resultData;	
} 

function get_plan_uploaded_document_lists($service_id,$factory_type_id,$application_id,$doc_id){
	
	$query_up 	=  db_select('fa_caf_upload_doc', 'fcud');
	//$query_up	-> InnerJoin('file_managed', 'fm' ,'fm.fid = fcud.fid');
	$query_up	-> InnerJoin('fa_file_managed_custom', 'ffmc' ,'ffmc.id = fcud.fid');
	$query_up 	-> fields('fcud', array('id', 'app_id', 'uid', 'fid', 'doc_name', 'file_name','application_reference_no','doc_id'));
	$query_up	-> fields('ffmc', array('filename','file_uri'));
	$query_up	-> condition('fcud.doc_id', $doc_id);
	$query_up	-> condition('fcud.app_id', $application_id);
	$query_up	-> condition('fcud.upload_documents_service_id', $service_id);
	$query_up	-> condition('fcud.upload_doc_factory_type_id', $factory_type_id);
	//echo $query_up; die;
	$result_up = $query_up->execute();
	$resultData_up = $result_up->fetchAll();
	
	return $resultData_up;	
} 

function get_verified_field($application_id, $reference_number, $plan_approve_status) {

	$query_check_applicant = db_select('fa_cafa_remarks','fcr');
	$query_check_applicant ->fields('fcr', array('verify_details','doc_verify'));
	$query_check_applicant ->condition('fcr.app_id', $application_id, '=');
	$query_check_applicant ->condition('fcr.app_reference_no', $reference_number, '=');
	$query_check_applicant ->condition('fcr.plan_status', $plan_approve_status, '=');
	$query_check_applicant ->orderBy('fcr.id','DESC');
    $query_check_applicant ->range(0, 1);
	//echo $query_check_applicant; //die;
	$result = $query_check_applicant->execute();
	$details_check = $result->fetchAssoc();

	return $details_check;
}
function get_all_deputychif_list($zoneUserMap){
	
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('cafa.application_status','In','!=');
	$fetch_application->condition('cafa.service_id',2);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
	}
function get_all_jointchif_list($zoneUserMap){
	
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('cafa.application_status','In','!=');
	$fetch_application->condition('cafa.service_id',2);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
	}
function get_all_chif_list($zoneUserMap){
	
	$fetch_application	= db_select('fa_cafa ', 'cafa');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
	$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
	$fetch_application->fields('cafa', array('application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type'));
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('cafa.application_status','In','!=');
	$fetch_application->condition('cafa.service_id',2);
	$fetch_application	-> orderBy('cafa.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll(); 
	return $application_result;
	}
	function rm_edit($application_id,$reference_no,$uid,$rid){
	$query_rm_id  =  db_query('SELECT remarks  FROM {fa_cafa_remarks} WHERE app_id = :application_id and  app_reference_no =:reference_no and  remark_by_uid =:remark_by_uid and remark_by_roleid =:remark_by_rid', array(':application_id'=>$application_id,':reference_no'=>$reference_no,':remark_by_uid'=>$uid,':remark_by_rid'=>$rid))->fetchObject()->remarks;
   return $query_rm_id;
   }
	function get_wbpcb_name($pcb_no){
	$no = db_query('SELECT category_name  FROM {fa_category_wbpcb} WHERE id = :id',array(':id'=>$pcb_no))->fetchObject()->category_name;
	return $no;
	}
function get_notesheet_data($application_id,$service_id,$factorytype_id,$reference_id){
		//echo $application_id.'</br>';echo $service_id.'</br>';echo $factorytype_id.'</br>';echo $reference_id.'</br>';
	$fetch_notesheet	= db_select('fa_cafa_notesheet', 'notesheet');
	$fetch_notesheet->InnerJoin('fa_service_master', 'service_master', 'service_master.id=notesheet.service_id');
	$fetch_notesheet->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=notesheet.factory_type_id');
	$fetch_notesheet->fields('notesheet', array());
	$fetch_notesheet->fields('service_master', array('service_name'));
	$fetch_notesheet->fields('factory_type', array('factory_type'));
	$fetch_notesheet->condition('notesheet.application_no ',$application_id,'=');
	$fetch_notesheet->condition('notesheet.referance_no ',$reference_id,'=');
	$fetch_notesheet-> orderBy('notesheet.id', 'ASC');
	$fetch_notesheet = $fetch_notesheet->execute()->fetchAll();
	return $fetch_notesheet;
	}
function get_name($uid){
	$result = db_query('SELECT distinct fname  FROM {fa_employee_details} WHERE uid = :id',array(':id'=>$uid))->fetchObject()->fname;
	return $result;
	}
function get_role_name($rid){
	$result_role = db_query('SELECT distinct name  FROM {role} WHERE rid = :id',array(':id'=>$rid))->fetchObject()->name;
	return $result_role;
	}
function get_applicant_name($uid){
		$result_name = db_query('SELECT distinct fullname  FROM {fa_user_details} WHERE uid = :id',array(':id'=>$uid))->fetchObject()->fullname;
		return $result_name;
	}
	
function get_remark_data($application_id,$service_id,$factorytype_id,$reference_id){
	$fetch_remark	= db_select('fa_cafa_remarks', 'remark');
	$fetch_remark	->leftjoin('fa_cafa_notesheet', 'notesheet', 'notesheet.remark_id=remark.id');
	$fetch_remark	->fields('remark', array());
	$fetch_remark	->fields('notesheet', array('remark_id'));
	$fetch_remark	->condition('remark.app_id ',$application_id,'=');
	$fetch_remark	->condition('remark.app_reference_no ',$reference_id,'=');
	$fetch_remark	-> orderBy('remark.id', 'ASC');
	$result_remark 	= $fetch_remark->execute()->fetchAll();
	return $result_remark;
	}
function get_remark_id($application_id,$reference_no,$uid,$rid){
	//echo $application_id.'---'.$reference_no.'---'.$uid.'---'.$rid;
	
	$query_rm_id  =  db_query('SELECT id, app_id, remark_by_uid, sending_time, plan_status, remarks, 
       verify_details, remark_by_roleid, remark_by_name, remark_type, 
       remark_to_user, doc_verify, status, app_reference_no, remark_to_roleid, 
       tm_application_id, plan_status_chem, service_id FROM {fa_cafa_remarks} WHERE app_id = :application_id and  app_reference_no =:reference_no and  remark_by_uid =:remark_by_uid and remark_by_roleid =:remark_by_rid', array(':application_id'=>$application_id,':reference_no'=>$reference_no,':remark_by_uid'=>$uid,':remark_by_rid'=>$rid))->fetchAssoc();
	   
	 
	   //print_r($r);die;
   return $query_rm_id;

}
function get_previous_details_view($application_id,$application_reference_no,$factory_typeid,$service_id){
	$query_previous_details =  db_select('fa_factory_previous_name', 'previous_nam');
	$query_previous_details	-> fields('previous_nam',array('id','pervious_factory_name','change_date','conversation_ownership_type','service_year','is_change','is_previous','same_as_pre_details','previous_ownership','conversation_name','transfer_fees'));
	$query_previous_details	-> condition('previous_nam.application_id', $application_id);
	$query_previous_details	-> condition('previous_nam.factory_type', $factory_typeid);
	$query_previous_details	-> condition('previous_nam.application_reference_no', $application_reference_no);
	$query_previous_details	-> condition('previous_nam.service_id', $service_id);
	$result_previous_details 	=  $query_previous_details->execute()->fetchAll();
	return $result_previous_details;
}
function common_del_function($cal_id,$table_name){
	
	$query 	=  db_delete($table_name);
	if($table_name == 'fa_factory_previous_name'){
		$query	-> condition('calculate_year_id', $cal_id);
	}if($table_name == 'fa_calculate_year'){
		$query	-> condition('id', $cal_id);
	}if($table_name == 'fa_worker_details'){
		$query	-> condition('calculate_year_id', $cal_id);
	}
	
	
	$e= $query->execute();
}

function fetch_year_details($application_id,$service_id,$factory_typeid,$reference_no,$service_year){
	$calculateyear 	= array(""=>"- Select -");
	$all_year 		= array();
	$query_year		= 	db_select('fa_calculate_year', 'year');
	$query_year		->	fields('year',array('calculate_year','id','is_active_year','calculate_end_year','valid_time_period','calculate_starting_year','id'));
	$query_year		-> 	condition('year.application_id', $application_id);
	$query_year		-> 	condition('year.service_id', $service_id);
	$query_year		-> 	condition('year.factory_id', $factory_typeid);
	$query_year		-> 	condition('year.reference_no', $reference_no);
	$query_year		-> 	condition('year.calculate_year', $service_year);
	//$query_year		->	orderBy('year.id', 'DESC');
	$result_year		= $query_year->execute()->fetchAssoc(); 
	
	return $result_year;
}
function manual_payment_deatils($application_id,$service_id,$factory_typeid,$reference_no){//echo $application_id.'------------------'.$service_id.'--------------------'.$factory_typeid.'-------------------'.$reference_no;
	$query_payment 	=  db_select('fa_manual_payment_history', 'payment_history');
	$query_payment	    -> fields('payment_history',array('id','is_payment_mad','brn_grn_challan_no','date_payment','payment_amount','upload_challan_file'));
	$query_payment	    -> condition('payment_history.application_id', $application_id);
	$query_payment	 	-> condition('payment_history.service_id', $service_id);
	$query_payment	 	-> condition('payment_history.factory_type', $factory_typeid);
	$query_payment	 	-> condition('payment_history.application_reference_no', $reference_no);
	$query_payment_deatils  		=  $query_payment->execute()->fetchAll();

//print_r($query_payment->execute());die();
	return $query_payment_deatils;
	//print
}
function get_notesheet_data_details($app_note_id){
	$remark_details = db_query('SELECT *  FROM {fa_cafa_notesheet} WHERE remark_id = :rid',array(':rid'=>$app_note_id))->fetchAll();
	return $remark_details;
	}
function get_notesheet_premises_data($pid){
	$premises_data = db_query('SELECT *  FROM {fa_director_details} WHERE id = :pid',array(':pid'=>$pid))->fetchObject();
	return $premises_data;
	}
function get_factory_plan_doc($service_id,$factory_type_id,$application_id,$reference_no){
	
	/*echo 'AA :: '.$application_id; echo '<br>';
	echo 'BB :: '.$reference_no; 
	echo 'CC :: '.$service_id; echo '<br>';
	echo 'DD :: '.$factory_type_id; echo '<br>';*/
	                                                  
	//$db_or = db_or();
//	$db_or ->condition('fcud.doc_id', '2');
//	$db_or ->condition('fcud.doc_id', '5');
//
//	$query 	=  db_select('fa_caf_upload_doc', 'fcud');
//	$query	-> InnerJoin('fa_file_managed_custom', 'file' ,'file.id = fcud.fid');
//	$query 	-> fields('fcud', array( 'id', 'app_id', 'uid', 'fid', 'doc_name', 'file_name','application_reference_no','doc_id'));
//	$query	-> fields('file', array('file_uri'));
//	$query	-> condition('fcud.app_id', $application_id);
//	$query	-> condition('fcud.application_reference_no', $reference_no);
//	$query	-> condition('fcud.upload_documents_service_id', $service_id);
//	$query	-> condition('fcud.upload_doc_factory_type_id', $factory_type_id);
//	$query	-> condition($db_or);
//	//echo $query;die;
//	$result = $query->execute();
//	$resultData = $result->fetchAll();


		$query_caf_upload_doc = db_select('fa_caf_upload_all_doc', 'caf_up_doc');
		$query_caf_upload_doc ->fields('caf_up_doc',array());
		
		$db_and = db_and();
		$db_and ->condition('caf_up_doc.application_id', $application_id, '=');
		$db_and ->condition('caf_up_doc.service_id', $service_id, '=');
		$db_and ->condition('caf_up_doc.factory_typeid', $factory_type_id, '=');
		$db_and ->condition('caf_up_doc.application_reference_no', $reference_no, '=');
		$db_and ->condition('caf_up_doc.upload_doc_type', 'DOC', '=');
		
		
		$db_or = db_or();
		$db_or ->condition('caf_up_doc.file_name', 'DOCUMENTS_2_%', 'LIKE');
		$db_or ->condition('caf_up_doc.file_name', 'DOCUMENTS_5_%', 'LIKE');
		
		$db_and ->condition($db_or);
		$query_caf_upload_doc ->condition($db_and);
		$resultData = $query_caf_upload_doc->execute()->fetchObject();


	return $resultData;
}

function get_uploaded_document_url($fid){
	$query 	=  db_select('fa_file_managed_custom', 'managed');
	$query 	-> fields('managed', array('file_uri'));
	$query->condition('managed.id',$fid,'=');
	$result = $query->execute();
	$resultData = $result->fetchObject()->file_uri;
	return $resultData;
}	

function get_occupier_last_slab($application_id,$service_id,$factory_type_id,$reference_no){
	//echo $application_id.'----'.$service_id.'------'.$factory_type_id.'-----'.$reference_no;
	$occupier_last = db_query("select name_occupier from fa_occupier_details WHERE application_occupier_id='".$application_id."' AND occupier_service_id='".$service_id."' AND factory_type_id='".$factory_type_id."' AND application_reference_no='".$reference_no."' ORDER BY id DESC LIMIT 1")->fetchObject()->name_occupier;
	return $occupier_last;

	}
	function get_owner_last_slab($application_id,$service_id,$factory_type_id,$reference_no){
		//echo $application_id.'----'.$service_id.'------'.$factory_type_id.'-----'.$reference_no; die;
		$owner_last = db_query("select owner_name from fa_owner_details WHERE application_id='".$application_id."' AND service_id='".$service_id."' AND factory_type_id='".$factory_type_id."' AND application_reference_no='".$reference_no."' ORDER BY id DESC LIMIT 1")->fetchObject()->owner_name;
		return $owner_last;
	
		}
function get_worker_data_previous_year($application_id,$service_id,$factory_type_id,$reference_no){
	$worker_previous = db_query("select worker_total from fa_worker_details WHERE application_id='".$application_id."' AND service_id='".$service_id."' AND factory_type='".$factory_type_id."' AND application_reference_no='".$reference_no."' AND worker_active_inactive='0' ORDER BY id DESC LIMIT 1")->fetchObject()->worker_total;
	return $worker_previous;
	}
function get_worker_data_amenabilty_year($application_id,$service_id,$factory_type_id,$reference_no){

	$worker_previous = db_query("select * from fa_calculates_license_fees WHERE application_id='".$application_id."' AND service_id='".$service_id."' AND factory_type='".$factory_type_id."' AND application_reference_no='".$reference_no."' ORDER BY id ASC LIMIT 1")->fetchObject()->worker;
	return $worker_previous;
	}
	
	
function get_nicautocomplete_autocomplete($string='') {
	//echo $string;
	 $matches = array();
	 $qry = db_select ('nic_2008_code_details', 'code');
     $qry->fields('code', array()); 
	 $db_or = db_or();
	$db_or->condition('sub_class_code', '%' . trim($string) . '%', 'LIKE');
	$db_or->condition('sub_class_name',db_like(trim($string)) . '%', 'LIKE');
	$db_or->condition('sub_class_name', $string ,'=');
	
	$qry->condition($db_or);

	 
	//$qry->range(0, 10);
	// echo $qry.$string; exit;
	 $result =  $qry->execute();
	  // save the query to matches
    foreach ($result as $row) {
	  $matches[$row->sub_class_code] = check_plain($row->sub_class_name);
	 
    }




    // Return the result to the form in json
    drupal_json_output($matches);
}

function nature_work_section85(){
	$nature_work 			= array();
	$default_select 	= array(""=>"- Select-","other" => "Other");
	$query_nature_work 	=  db_select('fa_section85_nature_work', 'nature_work');
	$query_nature_work	-> fields('nature_work',array('id','work_nature'));
	$query_nature_work	-> orderBy('nature_work.id', 'ASC');
		
	$result_nature_work 	= $query_nature_work->execute(); 
	
	
	foreach ($result_nature_work as $record) {
		$nature_work[$record->id] = t('@worker_name', array(
			'@worker_name' => $record->work_nature,
		));
	}
	
	return ($default_select+$nature_work);
}


function fetch_year_asc($application_id,$service_id,$factory_typeid,$reference_no){
	$calculateyear 	= array(""=>"- Select -");
	$all_year 		= array();
	$query_year		= 	db_select('fa_calculate_year', 'year');
	$query_year		->	fields('year',array('calculate_year','id','is_active_year','calculate_end_year','valid_time_period','calculate_starting_year'));
	$query_year		-> 	condition('year.application_id', $application_id);
	$query_year		-> 	condition('year.service_id', $service_id);
	$query_year		-> 	condition('year.factory_id', $factory_typeid);
	$query_year		-> 	condition('year.reference_no', $reference_no);
	//$query_year		->	orderBy('year.id', 'DESC');
	$result_year		= $query_year->execute()->fetchAll(); 
	
	return $result_year;
}

function fetch_occupier_director_year($application_id,$service_id,$factory_typeid,$reference_no){
	//echo $application_id.'aap<br/>'.$service_id.'sid<br/>ftype'.$factory_typeid.'<br/>Rno'.$reference_no;die();
	
	$query_year	 	= db_select('fa_calculate_year', 'year');
	$query_year	 -> fields('year',array('calculate_year','id','calculate_end_year','is_active_year','valid_time_period','calculate_starting_year'));
	$query_year	 	-> condition('year.application_id', $application_id);
	$query_year	 	-> condition('year.service_id', $service_id);
	$query_year	 -> condition('year.factory_id', $factory_typeid);
	$query_year	 	-> condition('year.reference_no', $reference_no);
	$query_year	 	-> condition('year.is_active_year',1,'=');
	$result_year	 = $query_year->execute()->fetchAll(); 
	
	return $result_year;
}

function get_factory_zone_name($zone_id){
	$query_z = db_select('fa_zone', 'fz');
	$query_z->fields('fz', array('zone_id','zone_name','zone_details'));
	$query_z->condition('zone_id',$zone_id,'=');
	
	$result_z = $query_z->execute();
		$resultZoneData = $result_z->fetchAssoc();
	return $resultZoneData;
}
function documents_master_details($service_id,$factory_type_id){
	
		$query_factory_documents 	=  db_select('fa_documents_master', 'documents');
		$query_factory_documents	-> fields('documents',array('id','document_name','status','short_name'));
		$query_factory_documents	-> condition('documents.document_service_id', $service_id, '=');
		$query_factory_documents	-> condition('documents.document_factory_id', $factory_type_id, '=');
		
		$query_factory_documents	-> orderBy('documents.id', 'ASC');
		
		$result_factory_documents 	= $query_factory_documents->execute()->fetchAll(); 
		return $result_factory_documents;
}
function view_attached_filename($application_id,$reference_id,$factory_typeid,$id_doc_master,$service_id){
		
	if($service_id == '4' || $service_id == '5')
	{ $docid = 'file.doc_id';}
	else
	{ $docid = 'file.id_doc_master';}

	$query_file 	=  db_select('fa_caf_upload_doc', 'file');
	$query_file	    -> fields('file',array());
	$query_file	    -> condition('file.app_id', $application_id);
	$query_file	    -> condition('file.application_reference_no', $reference_id);
	$query_file	    -> condition('file.upload_doc_factory_type_id', $factory_typeid);
	$query_file	    -> condition($docid, $id_doc_master);
	$query_file	    -> orderBy('file.id', 'desc');
	
	//echo $query_file; die;
	$query_file_details  =  $query_file->execute()->fetchAssoc();

return $query_file_details;
}
function del_doc($application_id,$service_id,$factory_typeid,$reference_no){
	$query = db_delete('fa_caf_upload_doc');
	$query->condition('app_id',$application_id,'=');
	$query->condition('upload_documents_service_id',$service_id,'=');
	$query->condition('upload_doc_factory_type_id',$factory_typeid,'=');
	$query->condition('application_reference_no',$reference_no,'=');
	$query->execute();
}
function fileupload($file){
	$file_details 	= file_load($file);
	  if ($file_details!="")  {
		 	   $uri						  	 	=	trim($file_details->uri); 
			   $file_details->status 			= 	1;
			   file_save($file_details);
			
	}
	return $file_details;
}
function del_manual_payment($application_id,$service_id,$factory_typeid,$reference_no){
	$query = db_delete('fa_manual_payment_history');
	$query->condition('application_id',$application_id,'=');
	$query->condition('service_id',$service_id,'=');
	$query->condition('factory_type',$factory_typeid,'=');
	$query->condition('application_reference_no',$reference_no,'=');
	$query->execute();
}
function worker_section_85($application_no,$reference_no,$factory_id,$service_id){
	$query_worker_details 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details	-> fields('worker_details',array('service_year','valid_time_period','starting_year','valid_year'));
	$query_worker_details	-> condition('worker_details.application_id', $application_no);
	$query_worker_details	-> condition('worker_details.factory_type', $factory_id);
	$query_worker_details	-> condition('worker_details.application_reference_no', $reference_no);
	$query_worker_details	-> condition('worker_details.service_id', $service_id);
	$query_worker_details	-> condition('worker_details.worker_active_inactive', '1');
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	return $result_worker_details;
}
function get_max_payment_date($application_id,$service_id,$factory_typeid,$reference_no){//echo 
	
	$query_payment 		= db_select('fa_manual_payment_history');
	$query_payment		->addExpression('MAX(date_payment)');
	$query_payment	    -> condition('application_id', $application_id);
	$query_payment	 	-> condition('service_id', $service_id);
	$query_payment	 	-> condition('factory_type', $factory_typeid);
	$query_payment	 	-> condition('application_reference_no', $reference_no);
	$max_payment_date	= $query_payment->execute()->fetchField();
	return $max_payment_date;
}


function fetch_catogoryname_wbpcb($id){//echo 
	
	$query_cat 			= db_select('fa_category_wbpcb','wbpcb');
	$query_cat			-> fields('wbpcb',array('category_name'));
	$query_cat	    	-> condition('wbpcb.id', $id);
	$catagory_name		= $query_cat->execute()->fetchObject()->category_name;
	return $catagory_name;
}

function get_regsection_application_list($zoneUserMap){

$fetch_application	= db_select('fa_cafa ', 'cafa');
$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa.service_id');
$fetch_application->InnerJoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa.factory_typeid');
$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa.factory_zone');
$fetch_application->fields('cafa', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number'));
$fetch_application->fields('service_master', array('service_name'));
$fetch_application->fields('factory_type', array('factory_type'));
$fetch_application->fields('zone', array('zone_name'));
$fetch_application->condition('cafa.factory_zone',$zoneUserMap,'in');
$fetch_application->condition('cafa.application_status','In','!=');
$fetch_application->condition('cafa.service_id',2);
$fetch_application	-> orderBy('cafa.id', 'desc');
$application_result = $fetch_application->execute()->fetchAll(); 
return $application_result;

}
function toatl_fees_breakup($application_id,$service_id,$factory_typeid,$reference_number){//echo 
	
	$query_fees 	= db_select('fa_calculates_license_fees','licesne_breakup');
	$query_fees		-> fields('licesne_breakup',array());
	$query_fees	    -> condition('licesne_breakup.application_id', $application_id);
	$query_fees	    -> condition('licesne_breakup.service_id', $service_id);
	$query_fees	    -> condition('licesne_breakup.factory_type', $factory_typeid);
	$query_fees	    -> condition('licesne_breakup.application_reference_no', $reference_number);
	$query_fees	    -> condition('licesne_breakup.fees_status', 1,'=');
	$query_fees	-> orderBy('licesne_breakup.id', 'ASC');
	
	//echo $application_id.'-->'.$service_id.'-->'.$factory_typeid.'-->'.$reference_number.'-->'.$query_fees;exit;
	$fees_deatils	= $query_fees->execute()->fetchAll();
	return $fees_deatils;
}

function get_max_power_worker($application_id,$service_id,$factory_type_id,$reference_no){
	$is_tranfer_fees =1;
	//echo $application_id.'---appid<br/>'.$service_id.'----Service id <br/>'.$factory_type_id.'----factory_id <br/>'.$reference_no;die();
	$power_worker_current = db_query("select power,worker,max_power,max_worker,service_year from fa_calculates_license_fees WHERE application_id='".$application_id."' AND service_id='".$service_id."' AND factory_type='".$factory_type_id."'
	 AND application_reference_no='".$reference_no."' AND is_tranfer_fees!='".$is_tranfer_fees."' 
	 ORDER BY id DESC LIMIT 1")->fetchAssoc();
	
	return $power_worker_current;
	}
function get_current_year_power($application_id,$service_id,$factory_type_id,$reference_no,$date_of_amenability){
		$currentDate = date('Y-m-d');
		$currentDate = date('Y-m-d', strtotime($currentDate));
		$amenability = date('Y-m-d', strtotime($date_of_amenability));
		//echo $amenability;die;
		$result  = db_query("SELECT * FROM fa_calculates_license_fees WHERE application_id='".$application_id."' AND service_id='".$service_id."' AND factory_type='".$factory_type_id."' AND application_reference_no='".$reference_no."'");
		//print_r($result);die;
	foreach ($result as $record){
		$dates = split ("TO", $record->service_year); 
		 $contractDateBegin = date('Y-m-d', strtotime($dates[0] ));
		 $contractDateEnd = date('Y-m-d', strtotime($dates[1]));
		
		if (($currentDate > $contractDateBegin) && ($currentDate < $contractDateEnd)){
				 $value = $record->power;
			}else{
				 $value = $record->power;
				}
			return $value;	
		}
	}
	
function fetch_code_district($district_code){//echo 
	
	$query_code 	= db_select('fa_district_master','district');
	$query_code		-> fields('district',array('area_district_code_factory'));
	$query_code	    -> condition('district.district_code', $district_code);
	$code_details	= $query_code->execute()->fetchObject()->area_district_code_factory;
	return $code_details;
}
	
function create_license_no($factorytype_id,$district_code){
	$refrencse_no = '';
	$max_appno  = db_query("select max (cast(regexp_replace(factory_license_no, '[^0-9]+', ' ', 'g') as bigint))as max_licenseno from fa_cafa")->fetchObject()->max_licenseno;
	if($factorytype_id == 3){
		$district_area_code = fetch_code_district($district_code);
	
		if($max_appno == NULL || empty($max_appno)){
		$licesne_no = '01/'.$district_area_code;
	}else{
		
		$licesne_no =  '0'.($max_appno+1).'/'.$district_area_code;
		
	}
	
	}else{
		if($max_appno == NULL || empty($max_appno)){
		$licesne_no = '01';
	}else{
		
		$licesne_no = $max_appno+1;
		
	}
	}
	//echo $licesne_no;die();
	return $licesne_no;
}

function create_registration_no($factorytype_id,$district_code){
	$max_regno  =  db_query("select max(CAST(LEFT(regexp_replace(factory_registrstion_no, '[^0-9]+', '#', 'g'),POSITION('#' in regexp_replace(factory_registrstion_no, '[^0-9]+', '#', 'g'))-1)
as bigint)) as max_reg from fa_cafa")->fetchObject()->max_reg;

	$district_area_code = fetch_code_district($district_code);
	if($factorytype_id == 1){
		$catagory = 'X';
	}if($factorytype_id == 2){
		$catagory = 'Y';
	}if($factorytype_id == 3){
		$catagory = 'Z';
	}
	$max_reg  =  db_query("select factory_registrstion_no as max_registrstionno from fa_cafa where factory_registrstion_no is not NULL")->fetchObject()->max_registrstionno;

	if($factorytype_id==3){
		if($max_reg == NULL || empty($max_reg)){
		$registration_no = '01/'.$district_area_code.'/'.$catagory.'/'.date("Y");
	}else{
		
		 $max_regno  =  db_query("select max (NULLIF(substr(factory_registrstion_no,1,2),'') :: integer) as max_reg from fa_cafa")->fetchObject()->max_reg;	
		$next_reg_no = $max_regno+1;
		$registration_no = '0'.$next_reg_no.'/'.$district_area_code.'/'.$catagory.'/'.date("Y");
		
	}
	}else{
		if($max_reg == NULL || empty($max_reg)){
		$registration_no = '01-'.$district_area_code.'/'.$catagory.'/'.date("Y");
	}else{
		
		$max_regno  =  db_query("select max(CAST(LEFT(regexp_replace(factory_registrstion_no, '[^0-9]+', '#', 'g'),POSITION('#' in regexp_replace(factory_registrstion_no, '[^0-9]+', '#', 'g'))-1) as bigint)) as max_reg from fa_cafa")->fetchObject()->max_reg;

		$next_reg_no = $max_regno+1;
		$registration_no = '0'.$next_reg_no.'-'.$district_area_code.'/'.$catagory.'/'.date("Y");
		
	}
	}
	
	return $registration_no;
}
function get_full_address_certificates($table='', $type='', $id='', $fieldArr=''){
		//echo $table.'<br/>'.$type.'<br/>'.$id.'<br/>'; print_r($fieldArr);exit;
		$text_AreaType_loc ='';
		if(($fieldArr=='')|| empty($fieldArr)){
			$fieldArr				=	array();
		}
		$location_address_result	=	'';
		$alias						=	$table.'ali';
		
		$query_location_address		= 	db_select($table, $alias);
		if($fieldArr[0]!='' || $fieldArr[0]!=0){
			$query_location_address		->	LeftJoin('fa_district_master', 'd', 'd.district_code='.$alias.'.'.$fieldArr[0]);
			$query_location_address		->	fields('d', array('district_name'));
			if($fieldArr[1]!='' || $fieldArr[1]!=0){
				$query_location_address		->	LeftJoin('fa_sub_division', 's', 's.sub_div_code='.$alias.'.'.$fieldArr[1]);
				$query_location_address		->	fields('s', array('sub_div_name'));
				if($fieldArr[3]!='' || $fieldArr[3]!=0){
					$query_location_address		->	LeftJoin('fa_block_mun_master', 'b', 'b.block_code='.$alias.'.'.$fieldArr[3]);
					$query_location_address		->	fields('b', array('block_mun_name'));
					if($fieldArr[4]!='' || $fieldArr[4]!=0){
						$query_location_address		->	LeftJoin('fa_village_ward_master', 'v', 'v.village_code='.$alias.'.'.$fieldArr[4]);
						$query_location_address		->	fields('v', array('village_name'));
						if($fieldArr[5]!='' || $fieldArr[5]!=0){
							$query_location_address		->	LeftJoin('fa_police_station', 'p', 'p.police_station_code='.$alias.'.'.$fieldArr[5]);
							$query_location_address		->	fields('p', array('name_of_police_station'));
							if($fieldArr[7]!='' || $fieldArr[7]!=0){
								$query_location_address		->	LeftJoin('fa_state_master', 'state', 'state.id='.$alias.'.'.$fieldArr[7]);
								$query_location_address		->	fields('state', array('statename'));
							}if($fieldArr[8]!='' || $fieldArr[8]!=0){
								$query_location_address		->	LeftJoin('fa_all_india_pin_code', 'pin', 'pin.id='.$alias.'.'.$fieldArr[8]);
								$query_location_address		->	fields('pin', array('po_name'));
							}
						}
					}
				}
			}		
		}
		
		if($type=="sub-table"){
			$query_location_address		->	fields($alias, $fieldArr);
			$query_location_address		->	condition($alias.'.id',$id,'=');		
		}

		$location_result = $query_location_address->execute()->fetchAssoc();
		
		if(!empty($location_result)){
			
			if($location_result[$fieldArr[2]]=="B"){
				$text_AreaType_loc = "Block - ";
				$areatype_loc_name = ucwords($location_result['village_name']);
			}elseif($location_result[$fieldArr[2]]=="M"){
				$areatype_loc_name = 'Ward-'.$location_result['village_name']; 
			}elseif($location_result[$fieldArr[2]]=="C"){
				$areatype_loc_name = $location_result['village_name'];
			}elseif($location_result[$fieldArr[2]]=="N"){
				$areatype_loc_name = 'Notified Area - '.$location_result['village_name'];
			}
			
			if($location_result[$fieldArr[0]] == 17){  //If the area is Kolkata ***/
				
					if(!empty($location_result['village_name'])){
						
						$location_address_result 	.= $areatype_loc_name;
					}
					
					if(!empty($location_result['name_of_police_station'])){
						$location_address_result 	.= ',&nbsp;PS - '.$location_result['name_of_police_station'];
					}
					
					if(!empty($location_result['district_name'])){
						$location_address_result 	.= ',&nbsp;'.$location_result['district_name'].'- '.$location_result[$fieldArr[6]];
					}
					
			}else{
				
					//If the state is West Bengal ***/
					
					if($location_result[$fieldArr[7]] == 1 || empty($fieldArr[7])){ 
						
						if(!empty($location_result['village_name'])){
							$location_address_result 	.= $areatype_loc_name;
						}
						
						if(!empty($location_result[$fieldArr[2]]) && !empty($location_result['block_mun_name']) ){
							$location_address_result 	.= ',&nbsp;'.$text_AreaType_loc.$location_result['block_mun_name'].',';
						}
						
						if(!empty($location_result['sub_div_name'])){
							$location_address_result 	.= $location_result['sub_div_name'];
						}
						
						if(!empty($location_result['name_of_police_station'])){
							$location_address_result 	.= ',&nbsp;PS - '.$location_result['name_of_police_station'];
						}
						if(!empty($location_result['po_name'])){
							$location_address_result 	.= ',&nbsp;PO - '.$location_result['po_name'];
						}
						
						if(!empty($location_result['district_name'])){
							$location_address_result 	.= ','.$location_result['district_name'];
						}
						
						if(!empty($location_result[$fieldArr[6]])){
							$location_address_result 	.= '&nbsp;, PIN- '.$location_result[$fieldArr[6]];
						}
						if(!empty($location_result[$fieldArr[7]])){
							$location_address_result 	.= ',&nbsp;'.$location_result['statename'];
						}else{
							$location_address_result 	.= '';
						}
					}else{
					
						//If the state is Others ***/
						
						if(!empty($location_result['sub_div_name'])){
							$location_address_result 		.= $location_result['sub_div_name'];
						}else{
							$location_address_result 		.= '';
						}
						
						
						if( (!empty($location_result['district_name'])) && !empty($location_result['sub_div_name'])) {
							$location_address_result 	.= ','.$location_result['district_name'];
						}else if( (!empty($location_result['district_name'])) && empty($location_result['sub_div_name']) ){
							$location_address_result 	.= $location_result['district_name'];
						}else{
							$location_address_result 	.= '';
						}
						
						
						
						if ( (!empty($location_result[$fieldArr[7]])) && !empty($location_result['district_name'])){
							$location_address_result 	.= ',&nbsp;'.$location_result['statename'];
						}else if( (!empty($location_result[$fieldArr[7]])) && empty($location_result['district_name']) ){
							$location_address_result 	.= $location_result['statename'];
						}else{
							$location_address_result 	.= '';
						}
				}
			}
		}
		
	return $location_address_result;
}
function fetch_year_details_withid($id){
	$query_year		= 	db_select('fa_calculate_year', 'year');
	$query_year		->	fields('year',array('calculate_year','id','is_active_year','calculate_end_year','valid_time_period','calculate_starting_year','id'));
	$query_year		-> 	condition('year.id', $id);
	
	$result_year	= $query_year->execute()->fetchAssoc(); 
	
	return $result_year;
}
function fetch_previous_calid($calculate_year_id){
	
	$query_year		= 	db_select('fa_factory_previous_name', 'previous');
	$query_year		->	fields('previous',array('pervious_factory_name'));
	$query_year		-> 	condition('previous.calculate_year_id', $calculate_year_id);
	
	$pervious_factory_name	= $query_year->execute()->fetchObject()->pervious_factory_name; 
	
	return $pervious_factory_name;
}

function create_registration_application($service_id){
 		$reg_identification  = db_query("select factory_reg_identification_number from fa_cafa WHERE factory_reg_identification_number!='' ORDER BY id DESC LIMIT 1")->fetchObject()->factory_reg_identification_number;
		
	if($service_id == 2){
			if($reg_identification == NULL || empty($reg_identification)){
						$max_identification = "AP".date('Y')."REG000001";
			}else{
					$max_regno  =  db_query("select max (NULLIF(substr(factory_reg_identification_number,10,12),'') :: integer) as max_reg from fa_cafa")->fetchObject()->max_reg;	 
					$next_reg_no 	=  $max_regno+1;
					$iden_second    =   str_pad($next_reg_no, 6, "0", STR_PAD_LEFT);
					$max_identification = "AP".date('Y').'REG'.$iden_second;
	
	 
			}
	}if($service_id == 3){
			if($reg_identification == NULL || empty($reg_identification)){
					$max_identification = "AP".date('Y')."REN000001";
			}else{
					$max_regno  =  db_query("select max (NULLIF(substr(factory_reg_identification_number,10,12),'') :: integer) as max_reg from fa_cafa")->fetchObject()->max_reg;
					$next_reg_no 	=  $max_regno+1;
					$iden_second    =   str_pad($next_reg_no, 6, "0", STR_PAD_LEFT);
					$max_identification = "AP".date('Y').'REN'.$iden_second;
			}
	}

return $max_identification;
}


function get_application_form_pdf($application_id,$reference_no,$factory_type_id,$service_id) {

	$upload_application_from_pdf = db_select('fa_upload_application_from_pdf','pdfs');
	$upload_application_from_pdf ->fields('pdfs', array());
	$upload_application_from_pdf ->condition('pdfs.application_id', $application_id, '=');
	$upload_application_from_pdf ->condition('pdfs.reference_number', $reference_no, '=');
	$upload_application_from_pdf ->condition('pdfs.factory_type_id', $factory_type_id, '=');
	$upload_application_from_pdf ->condition('pdfs.service_id', $service_id, '=');
	//$upload_application_from_pdf ->orderBy('pdfs.id','DESC');
	$application_from_pdf = $upload_application_from_pdf->execute();
	$application_forms = $application_from_pdf->fetchAll();
	return $application_forms;
}
function power_details_log($power_id){
	$power_details_log  =  db_query("select * from fun_caf_hp_log('".$power_id."')" );
}

function worker_details_log($worker_id){
	$power_details_log  =  db_query("select * from fun_caf_worker_log('".$worker_id."')" );
}
function get_current_occupier($application_id,$service_id,$factory_typeid,$reference_number){
	$query_data 	=  db_select('fa_occupier_details', 'od');
	$query_data	    -> fields('od',array());
	$query_data	    -> condition('od.application_occupier_id', $application_id);
	$query_data	    -> condition('od.occupier_service_id', $service_id);
	$query_data	    -> condition('od.factory_type_id', $factory_typeid);
	$query_data		-> condition('od.application_reference_no', $reference_number);
	$query_data		-> orderBy('od.id', 'desc');
	$query_data		-> range(0, 1);
	$occupier_data  =  $query_data->execute()->fetchAssoc();
	//$occupier_data  =  $query_data->execute();
	return $occupier_data;
}


function licence_journal_detalis($application_id,$service_id,$factory_typeid,$reference_no){
	
	$query_year		= 	db_select('fa_calculates_license_fees', 'year');
	$query_year		->	fields('year',array('id','service_year','worker','power','schedule_fees','late_fees','due_fees','application_id','application_reference_no','previous_paid_fees','factory_type','service_id','original_excess_amount'));	
	$query_year		->	InnerJoin('fa_cafa', 'cafa', 'cafa.id = year.application_id');
	//$query_year		->	leftJoin('fa_manual_payment_history', 'history', 'history.application_id = year.application_id');
	$query_year		->	fields('cafa', array('is_previous_payment'));
	//$query_year		->	fields('history', array('date_payment','brn_grn_challan_no'));
	$query_year		-> 	condition('year.application_id', $application_id);
	$query_year		-> 	condition('year.service_id', $service_id);
	$query_year		-> 	condition('year.factory_type', $factory_typeid);
	$query_year		-> 	condition('year.application_reference_no', $reference_no);
	//$query_year		-> 	condition('year.is_active_year', 1);
	$query_year		->	orderBy('year.id', 'ASC');
	//echo $query_year;die;
	$result_year	=   $query_year->execute()->fetchAll();
	return $result_year;
}
function payment_dts($application_id){
	$payment_dts = db_select('fa_manual_payment_history', 'history')->condition('application_id', $application_id, '=');
	$payment_dts ->fields('history',array());
	$payment_all_dts = $payment_dts->execute()->fetchAll(); 
	return $payment_all_dts;
	}


function get_remarks_to_applicant($application_id, $reference_number, $plan_approve_status) {

	$query_check_applicant = db_select('fa_cafa_remarks','fcr');
	$query_check_applicant ->fields('fcr', array('remarks'));
	$query_check_applicant ->condition('fcr.app_id', $application_id, '=');
	$query_check_applicant ->condition('fcr.app_reference_no', $reference_number, '=');
	$query_check_applicant ->condition('fcr.plan_status', $plan_approve_status, '=');
	$query_check_applicant ->orderBy('fcr.id','ASC');
    $query_check_applicant ->range(0, 1);
	//echo $query_check_applicant; die;
	$result = $query_check_applicant->execute();
	$details_check = $result->fetchAssoc();

	return $details_check;
}

function get_fa_escalate_time()
{
	$query_escalate_time = db_select('fa_escalate_time', 'esctime')->condition('status', 1, '=');
	$query_escalate_time ->fields('esctime',array());

	$query_escalate_time_details = $query_escalate_time->execute()->fetchAssoc(); 
	return $query_escalate_time_details;
}

function get_applcation_escalate($factory_zone)
{
	$zone = implode(", ", $factory_zone);
	
	$result  = db_query("SELECT id,service_id,factory_typeid,reference_number,modification_date,created_date,plan_approve_status FROM fa_cafa where factory_zone IN ($zone) AND plan_approve_status != 'In' AND plan_approve_status != 'F' AND plan_approve_status != 'App'");

	foreach ($result as $record)
	{
		$application_id	= $record->id;
		$service_id	    = $record->service_id;
		$factorytype_id	= $record->factory_typeid;
		$reference_no   = $record->reference_number;

		//final submit date of application
		$created_date = $record->created_date;
		$modification_date = $record->modification_date;
		
		//today's date
		$today_date = date('Y-m-d H:i:s');
		//application current status
		$application_current_status = $record->plan_approve_status;
		
		//duration of application to be stay in Plan section
		$get_fa_escalate_time       = get_fa_escalate_time();
		//echo '<pre>'.print_r($get_fa_escalate_time);
		$plan_section_total_time 			= $get_fa_escalate_time['plan_section']; // 5, 0-5
		$factory_inspector_total_time 		= $get_fa_escalate_time['factory_inspector']+$plan_section_total_time; // 20, 6-25
		$deputy_director_total_time 		= $get_fa_escalate_time['deputy_director']+$factory_inspector_total_time; // 10, 26-35
		$joint_director_total_time 			= $get_fa_escalate_time['joint_director']+$deputy_director_total_time; // 7, 36-42
		$chief_inspector_total_time 		= $get_fa_escalate_time['chief_inspector']+$joint_director_total_time; // 5, 43-47
		$factory_inspector_dsc_total_time 	= $get_fa_escalate_time['factory_inspector_dsc']+$chief_inspector_total_time; // 3, 48-50

		if($application_current_status == 'U')
		{  //application is in plan section now.so take created date
			$date1 = date_create($created_date);
		} else {
			$date1 = date_create($modification_date);
		}
		$date2 = date_create($today_date);		
		$diff  = date_diff($date1,$date2);
		$date_diffrence = $diff->format("%a");

		//shift to inspector
		if($date_diffrence > $plan_section_total_time && ($date_diffrence < $factory_inspector_total_time) || ($date_diffrence == $factory_inspector_total_time))
			{$new_application_status = 'AI';}

		//shift to deputy
		elseif($date_diffrence > $factory_inspector_total_time && ($date_diffrence < $deputy_director_total_time) || ($date_diffrence == $deputy_director_total_time))
			{$new_application_status = 'DC';}

		//shift to joint
		elseif($date_diffrence > $deputy_director_total_time && ($date_diffrence < $joint_director_total_time) || ($date_diffrence == $joint_director_total_time))
			{$new_application_status = 'JC';}

		//shift to chief
		elseif($date_diffrence > $joint_director_total_time && ($date_diffrence < $chief_inspector_total_time) || ($date_diffrence == $chief_inspector_total_time))
			{$new_application_status = 'C';}

	if($new_application_status == 'AI' || $new_application_status == 'DC' || $new_application_status == 'JC' || $new_application_status == 'C')
	{
	  //---------------- CAFA TABLE UPDATE -------------------
		  
			$approval_status = 	array('plan_approve_status' => $new_application_status);
			$queryapp 		 =	db_update('fa_cafa');
			$queryapp		 ->	fields($approval_status);
			$queryapp		 ->	condition('id',$application_id,'=');
			$queryapp		 ->	condition('service_id',$service_id,'=');
			$queryapp	     ->	condition('factory_typeid',$factorytype_id,'=');
			$queryapp		 ->	condition('reference_number',$reference_no,'=');
			$queryapp		 ->	execute();
	
		  //----------- WORKER TABLE UPDATE ---------------------------
		  
			$worker_status 	= 	array('worker_plan_approval_status' => $new_application_status);
			$querywork 		=	db_update('fa_worker_details');
			$querywork		->	fields($worker_status);
			$querywork		->	condition('application_id',$application_id,'=');
			$querywork		->	condition('service_id',$service_id,'=');
			$querywork		->	condition('factory_type',$factorytype_id,'=');
			$querywork		->	condition('application_reference_no',$reference_no,'=');
			$querywork		->	execute();
		  
		  //----------------DOCUMENTS TABLE UPDATE-------------------
			$doc_status 	= 	array('plan_approval_status' => $new_application_status);
			$querydoc 		=	db_update('fa_caf_upload_doc');
			$querydoc		->	fields($doc_status);
			$querydoc		->	condition('app_id',$application_id,'=');
			$querydoc		->	condition('upload_documents_service_id',$service_id,'=');
			$querydoc	    ->	condition('upload_doc_factory_type_id',$factorytype_id,'=');
			$querydoc		->	condition('application_reference_no',$reference_no,'=');
			$querydoc		->	execute();
			
		  //----------------OCCUPIER DETAILS TABLE UPDATE-------------------
			$occupr_status 	= 	array('worker_plan_approval_status' => $new_application_status);
			$querydic 		=	db_update('fa_occupier_details');
			$querydic		->	fields($occupr_status);
			$querydic		->	condition('application_occupier_id',$application_id,'=');
			$querydic		->	condition('occupier_service_id',$service_id,'=');
			$querydic		->	condition('factory_type_id',$factorytype_id,'=');
			$querydic		->	condition('application_reference_no',$reference_no,'=');
			$querydic		->	execute();
	
		//----------------Remarks Table Insert -------------------
		
			$cafa_remarks = array(
				'app_id'   			 => $application_id,
				'remark_by_uid' 	 => $uid,
				'remark_by_roleid'   => $urole,
				'remark_by_name' 	 => $uname,
				'sending_time' 		 => date('Y-m-d h:i:s'),
				'app_reference_no' 	 => $reference_no,
				'doc_verify' 	     => $doc_verify,
				'plan_status' 		 => $new_application_status,
			);	
			db_insert('fa_cafa_remarks')->fields($cafa_remarks)->execute();
		}
	}

	return;
}
function log_genaration_caf($application_id){
	$caf_details_log  =  db_query("select * from fun_cafa_log('".$application_id."')" );
}
function log_genaration_worker($workerid,$referenceno,$serviceid){//echo $workerid;die();
	$worker_details_log  =  db_query("select * from fun_worker_log('".$workerid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_power($powerid, $referenceno, $serviceid){
	$power_details_log  =  db_query("select * from fun_power_log('".$powerid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_manager($managerid, $referenceno, $serviceid){
	$manager_dtails_log  =  db_query("select * from fun_manager_log('".$managerid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_occupier($occupierid, $referenceno, $serviceid){
	$occupier_details_log  =  db_query("select * from fun_occupier_log('".$occupierid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_manufacturing($manufacturingid, $referenceno, $serviceid){
	$manufacturing_details_log  =  db_query("select * from fun_manufacturing_log('".$manufacturingid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_doc($docid, $referenceno, $serviceid){
	$doc_details_log  =  db_query("select * from fun_doc_log('".$docid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_director($directorrid, $referenceno, $serviceid){
	$director_dtails_log  =  db_query("select * from fun_director_log('".$directorrid."','".$referenceno."','".$serviceid."')" );
}
function log_genaration_upload_doc($docid, $referenceno, $serviceid,$contentid){
	//echo $docid.'---'.$referenceno.'--'.$referenceno.'---'. $serviceid.'---'. $contentid;die;
	$doc_details_log  =  db_query("select * from fun_upload_doc_log_new('".$docid."','".$referenceno."','".$serviceid."','".$contentid."')" );
}
function log_genaration_owner($ownerid, $referenceno, $serviceid){
	$owner_details_log  =  db_query("select * from fun_owner_log('".$ownerid."','".$referenceno."','".$serviceid."')" );
}


function get_comment_data($application_id,$service_id,$factorytype_id,$reference_id){
	$fetch_comment	= db_select('fa_cafa_remarks', 'remark');
	$fetch_comment->leftjoin('fa_cafa_notesheet', 'notesheet', 'notesheet.remark_id=remark.id');
	$fetch_comment->fields('remark', array());
	$fetch_comment->fields('notesheet', array('remark_id'));
	$fetch_comment->condition('remark.app_id ',$application_id,'=');
	//$fetch_comment->condition('remark.app_reference_no ',$reference_id,'=');
	$fetch_comment-> orderBy('remark.id', 'ASC');
	$fetch_comment-> condition('remark.remark_type','n','=');
	$result_comment = $fetch_comment->execute()->fetchAll();
	return $result_comment;
}

function zone_name($zone_id){
	$zone_n	=  db_query("SELECT zone_name  FROM {fa_zone} WHERE zone_id = '".$zone_id."'")->fetchObject()->zone_name;
	return $zone_n;
}

function get_plan_notesheet($applicationid, $referenceid) {	

	$query_note		= 	db_select('fa_cafa_remarks', 'fcr');
	$query_note     ->  InnerJoin('role', 'r', 'fcr.remark_by_roleid=r.rid');
	$query_note     ->  InnerJoin('users', 'u', 'fcr.remark_by_uid=u.uid');
	$query_note     ->  InnerJoin('fa_employee_details', 'fed', 'u.uid=fed.uid');
	$query_note		->	fields('fcr',array('sending_time','remarks','remark_by_name'));
	$query_note		->	fields('r',array('name'));
	$query_note		->	fields('u',array('name'));
	$query_note		->	fields('fed',array('fname'));
	$query_note		-> 	condition('fcr.app_id', $applicationid);
	$query_note		-> 	condition('fcr.app_reference_no', $referenceid);
	$query_note		-> 	condition('fcr.remarks',' ','!=');
	$query_note		-> 	condition('fcr.remark_type', 'n');
	$query_note		-> 	orderBy('fcr.sending_time', 'ASC');
	
	$result_comment = $query_note->execute()->fetchAll();
	return $result_comment;
}
function view_total_worker($applicationid, $userid) {	

	$query_total		= 	db_select('fa_worker_details', 'worker');
	$query_total		->	fields('worker',array('worker_total'));
	$query_total		-> 	condition('worker.application_id', $applicationid);
	$query_total		-> 	condition('worker.created_by', $userid);
	$query_total		-> 	condition('worker.worker_plan_approval_status', 'I');
	$result_total_worker = $query_total->execute()->fetchObject()->worker_total;
	return $result_total_worker;
}
function worker_detials_for_fees($application_id,$worker_referance_no,$factory_typeid,$service_id){
	$query_worker_details 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details	-> fields('worker_details',array());
	$query_worker_details	-> condition('worker_details.application_id', $application_id);
	$query_worker_details	-> condition('worker_details.service_id', $service_id);
	$query_worker_details	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details	-> condition('worker_details.application_reference_no', $worker_referance_no);
	$query_worker_details	-> 	condition('worker_details.worker_active_inactive','0','!=');
	$query_worker_details	-> 	orderBy('worker_details.id', 'ASC');
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	//print_r($query_worker_details->execute());die();
	return $result_worker_details;
}
function worker_detials_for_fees2mii($application_id,$worker_referance_no,$factory_typeid,$service_id){
	//die('dd');
	$query_worker_details 	=  db_select('worker2mii', 'worker_details');
	$query_worker_details	-> fields('worker_details',array());
	$query_worker_details	-> condition('worker_details.application_id_worker', $application_id);
	$query_worker_details	-> condition('worker_details.service_id_worker', $service_id);
	$query_worker_details	-> condition('worker_details.factory_type_worker', $factory_typeid);
	$query_worker_details	-> condition('worker_details.reference_no_worker', $worker_referance_no);
	//$query_worker_details	-> 	condition('worker_details.worker_active_inactive','0','!=');
	$query_worker_details	-> 	orderBy('worker_details.application_id_worker', 'ASC');
	$result_worker_details 	=  $query_worker_details->execute()->fetchAll();
	//print_r($query_worker_details->execute());die();
	return $result_worker_details;
}

function get_licence_register($id){
	$fetch_data	= db_select('fa_licence_register ', 'licence');
	$fetch_data->fields('licence', array());
	$fetch_data->condition('licence.id ',$id,'=');
	$fetch_data	-> orderBy('licence.id', 'desc');
	$all_data = $fetch_data->execute();
	$data  = $all_data->fetchAll();
	return $data;
}
function get_licence_register_list($id){
	
	$fetch_data	= db_select('fa_licence_register_amount ', 'register_amount');
	$fetch_data->fields('register_amount', array());
	$fetch_data->condition('register_amount.register_id ',$id,'=');
	$fetch_data	-> orderBy('register_amount.id', 'desc');
	$all_data = $fetch_data->execute();
	//echo $fetch_data; die;
	$data  = $all_data->fetchAll();
	return $data;
}

/////////////////////////////////FORM 2 functions/////////////////////////////////////

function get_form2_manager_data($application_id,$service_id,$factorytype_id,$reference_id,$year_id){
	
	$query_data 	=  db_select('fa_manager_details', 'od');
	$query_data	    -> fields('od',array());
	$query_data	    -> condition('od.application_manager_id', $application_id);
	$query_data	    -> condition('od.manager_service_id', $service_id);
	$query_data	    -> condition('od.factory_type_id', $factorytype_id);
	$query_data	    -> condition('od.application_reference_no', $reference_id);
	$query_data	    -> condition('od.calculate_year_id', $year_id);
	$manager_data  =  $query_data->execute()->fetchAll();
	return $manager_data;
	}
	
function get_form2_nature_manufacturing_previous_year($application_id,$application_reference_no,$factory_typeid,$service_id){
	//echo $application_id.'<br/>'.$application_reference_no.'<br/>'.$factory_typeid.'<br/>'.$service_id.'<br/>'.$year;die();
	$query_manufacturing_details 	=  db_select('fa_nature_manufacturing', 'manufacturing');
	$query_manufacturing_details	-> fields('manufacturing',array('nature_manufacturing'));
	$query_manufacturing_details	-> condition('manufacturing.application_id', $application_id);
	$query_manufacturing_details	-> condition('manufacturing.factory_type', $factory_typeid);
	$query_manufacturing_details	-> condition('manufacturing.application_reference_no', $application_reference_no);
	$query_manufacturing_details	-> condition('manufacturing.service_id', $service_id);
	$query_manufacturing_details	-> condition('manufacturing.manufacturing_active_inactive', 0);
	$result_manufacturing_details 	=  $query_manufacturing_details->execute()->fetchAssoc();
	return $result_manufacturing_details;
}
	
function get_form2_nature_manufacturing_year($year,$application_id,$application_reference_no,$factory_typeid,$service_id){
	//echo $application_id.'<br/>'.$application_reference_no.'<br/>'.$factory_typeid.'<br/>'.$service_id.'<br/>'.$year;die();
	$query_manufacturing_details 	=  db_select('fa_nature_manufacturing', 'manufacturing');
	$query_manufacturing_details	-> fields('manufacturing',array('nature_manufacturing'));
	$query_manufacturing_details	-> condition('manufacturing.application_id', $application_id);
	$query_manufacturing_details	-> condition('manufacturing.factory_type', $factory_typeid);
	$query_manufacturing_details	-> condition('manufacturing.application_reference_no', $application_reference_no);
	$query_manufacturing_details	-> condition('manufacturing.service_id', $service_id);
	$query_manufacturing_details	-> condition('manufacturing.service_year', $year);
	$result_manufacturing_details 	=  $query_manufacturing_details->execute()->fetchAssoc();
	return $result_manufacturing_details;
}
function get_form2_worker_previous_year($application_id,$reference_id,$factorytype_id,$service_id){
	//echo $application_id.'<br/>'.$application_reference_no.'<br/>'.$factory_typeid.'<br/>'.$service_id.'<br/>'.$year;die();
	$worker_details 	=  db_select('fa_worker_details', 'worker');
	$worker_details	-> fields('worker',array('worker_total','change_date'));
	$worker_details	-> condition('worker.application_id', $application_id);
	$worker_details	-> condition('worker.factory_type', $factorytype_id);
	$worker_details	-> condition('worker.application_reference_no', $reference_id);
	$worker_details	-> condition('worker.service_id', $service_id);
	$worker_details	-> condition('worker.worker_active_inactive', 0);
	$worker_previous_details 	=  $worker_details->execute()->fetchAssoc();
	return $worker_previous_details;
}
////////////ADD TAMAL///////////////////////
function get_country_with_ph(){
	$default_select 	= array(""=>"--Select--",99=>"INDIA");//""=>"--Select--",
	$result 	 = db_query("SELECT id,name FROM {fa_country}");
	$list 	 = array();
	foreach ($result as $record) {
		$list[$record->id] = t('@countryname', array(
		'@countryname' => $record->name,
		));
	}

	return ($default_select+$list);
}
function country_name($country_code){
	if(!empty($country_code)){
		$country_name 	=  db_query("SELECT name  FROM {fa_country} WHERE id = '".$country_code."'")->fetchObject()->name;
		return $country_name;
	}else{
		$country_name = 0;
		return $country_name;
		}
}

function get_section_85_master_service(){
    
    $default_select     = array(""=>"- Select-");
    $result             = db_query("SELECT id,service_name FROM {fa_service_master} where service_parent_id = 0 AND  is_active = 1 AND service_name NOT LIKE '%Plan%' order by id");
    $list                 = array();
    foreach ($result as $record) {
        $list[$record->id] = t('@service_name', array(
            '@service_name' => $record->service_name,
        ));
    }
    
    return ($default_select+$list);
}

function find_chemical_status($id)
{
	$result = db_query("SELECT plan_status_chem FROM {fa_cafa_remarks} where app_id = '$id' AND plan_status_chem != '' order by id DESC LIMIT 1")->fetchObject()->plan_status_chem;
	return $result;
}

function find_general_status($id)
{
	$result = db_query("SELECT plan_status FROM {fa_cafa_remarks} where app_id = '$id' AND plan_status != '' order by id DESC LIMIT 1")->fetchObject()->plan_status;
	return $result;
}

function find_final_status($id)
{
	$result1 = db_query("SELECT count(*) FROM {fa_cafa_remarks} where app_id = '$id' AND plan_status ='JC'")->fetchObject()->count;
	$result2 = db_query("SELECT count(*) FROM {fa_cafa_remarks} where app_id = '$id' AND plan_status ='JCF'")->fetchObject()->count; 
	return $result1*$result2;
}

function file_name($mst_id){
	$file_name 	=  db_query("SELECT document_name  FROM {fa_documents_master} WHERE id = '".$mst_id."'")->fetchObject()->document_name;
	return $file_name;
	}

function year_calculation_for_license_period($amenablity_date,$application_for,$serviceid_hidden,$factorytypeid_hidden,$reference_number,$application_id){
	 global $base_root, $base_path, $user;
	 $service_id					= encryption_decryption_fun('decrypt',$serviceid_hidden);
	 $factory_typeid				= encryption_decryption_fun('decrypt',$factorytypeid_hidden);
	 $year							= date('Y', strtotime($amenablity_date_mofify));
	 $current_year 					= date("Y");
	 $current_date 					= date('Y-m-d');
	 if($serviceid_hidden == 2){
		  $amenablity_date_mofify		= date('Y-m-d',strtotime($amenablity_date)) ;
	 }if($serviceid_hidden == 3){
		  $amenablity_date_mofify		= date('Y-m-d',strtotime('+1 day',strtotime($amenablity_date))) ;
	 }
	
	if($amenablity_date_mofify>='2016-01-01' &&  $amenablity_date_mofify<='2016-12-29'){ 
				
		$pre_date1 =$pre_date_checking= $amenablity_date_mofify ;
		
		$Next_year			= date('Y',strtotime($pre_date)); 
		
		$i = 0;
		$application_for1  = $application_for;
		
		for($j=1; $j<=3 ; $j++){
			  	$day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
				$lepyear_pre		= date('Y',strtotime($pre_date1));
				$leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
				$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
				if($is_lepyear== 'leap'){
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    	$newdate 			= $next_date;
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
				
		
		}
		$year_list	= date('dS M Y', strtotime($amenablity_date_mofify))." TO ". date('dS M Y', strtotime($next_date)); 
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $serviceid_hidden,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factorytypeid_hidden,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $amenablity_date_mofify,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 3
			);
			//print_r($year_calclation);
			$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();	
			
			$datez 				= new DateTime($next_date);
			$datex 				= new DateTime($current_date);
			 if($datez>$datex){
			 $application_for1 = $application_for1 -1;
			
		 } if($datez<$datex){
			 $application_for1 = $application_for1 +1;
			
		 }
		if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 -1;
			
		 }
		 
		while($i<$application_for1){//echo $pre_date_checking;echo '<br/>';echo $pre_date1;die();
		//echo $i;
			   $day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			 $lepyear_pre		= date('Y',strtotime($pre_date1));
			 $leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
			if($is_lepyear== 'leap'){
					 $month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){//echo $month; 
					$day 				= "+".(365)."day";
					 $next_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					
					
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    $newdate = $next_date; 
		
	
		 $datex = new DateTime($current_date);
		  $datey = new DateTime($pre_date_checking);
		
		 $datez = new DateTime($next_date);
		
			
		if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 -1;
			
		 }
		
			
			  $year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			 //echo '<br/>';
			 
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $serviceid_hidden,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factorytypeid_hidden,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			//print_r($year_calclation);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();	
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
		
			$i = $i+1;
			}//die();
		

		  
	}
	if($amenablity_date_mofify>='2016-12-30' &&  $amenablity_date_mofify<='2017-10-16'){
			
		 $pre_date1 	= $pre_date_checking	= $amenablity_date_mofify ;
		 $Next_year		= date('Y',strtotime($pre_date)); 
		
		$i = 0;
	echo $application_for1  = $application_for;
	
		while($i<$application_for1){
			   $day 				= "+".(364)."day";
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			    $lepyear			= date('Y',strtotime($next_date));
			$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
			$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			 $lepyear_pre		= date('Y',strtotime($pre_date1));
			 $leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
			
				if($is_lepyear== 'leap'){
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
				
			}if($is_lepyear== 'not leap'){
				$month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
					
				}if($month != 2 && $month != 1){//echo $is_lepyear_pre; 
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
					
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		    $newdate = $next_date; 
		
		
		 $datex = new DateTime($current_date);
		 $datey = new DateTime($pre_date_checking);
		 $datez = new DateTime($next_date);
		 if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 + 1;
			
		 }
			
			$year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $serviceid_hidden,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factorytypeid_hidden,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $newdate,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
		
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
		
				$i = $i+1;
			//$year_list	= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($newdate));
			
			
			
		
			}
			//print_r($year_calclation);die();
		
			//die();
			 
	

	
		  
	}
	if($amenablity_date_mofify>='2017-10-17'){
		$application_for1  = $application_for;
		$pre_date1 = $pre_date_checking=$amenablity_date_mofify;
		while($i<$application_for1){
		     
			 $day 				= "+".(364)."day";
			 $next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day));
			 
			 $lepyear			= date('Y',strtotime($next_date));
			$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
			$is_lepyear			= ($leap ? 'leap' : 'not leap');
			
			
			$lepyear_pre		= date('Y',strtotime($pre_date1));
			$leap_pre 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
			$is_lepyear_pre		= ($leap_pre ? 'leap' : 'not leap');
		
			if($is_lepyear== 'leap'){
					$month				= date('m', strtotime($next_date));
				if($month == 2){
					$day 				= "+".(364)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}if($month != 2 && $month != 1){
					$day 				= "+".(365)."day";
					$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
				}
			}if($is_lepyear== 'not leap'){
				 $month				= date('m', strtotime($next_date));
				if($month == 2){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
						
					}
					
				}if($month != 2 && $month != 1){
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}if($month == 1){
				
					if($is_lepyear_pre == 'leap'){
						$day 				= "+".(365)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}else{
						$day 				= "+".(364)."day";
						$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date1)) . $day)); 
					}
				}
			}
		
		
		 $datex = new DateTime($current_date);
		 $datey = new DateTime($pre_date_checking);
		 $datez = new DateTime($next_date);
		 if($datey <$datex && $datez<$datex){
			 $application_for1 = $application_for1 + 1;
			
		 }
				
		$year_list	= date('dS M Y', strtotime($pre_date_checking))." TO ". date('dS M Y', strtotime($next_date));
			
			$year_calclation 	= array(
					'amanabilty_date' 				=> $amenablity_date_mofify,
					'valid_time_period' 			=> 1,
					'calculate_year'				=> $year_list,
					'service_id' 					=> $serviceid_hidden,
					'application_id' 				=> $application_id,
					'reference_no' 					=> $reference_number,
					'factory_id'					=> $factorytypeid_hidden,
					'created_by'					=> $user->uid,
					'is_active_year'				=> 1,
					'calculate_starting_year'		=> $pre_date_checking,
					'calculate_end_year'			=> $next_date,
					'application_form_type'			=> 'Common Application Form',
					'showing_year'					=> 1
			);
			
		$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
				$pre_date_first1	= strtotime('+1 day',strtotime($next_date)) ;
		    	$pre_date1			= date('Y-m-d',$pre_date_first1);
				$pre_date_checking 	= $pre_date1;
				

				$i = $i+1;
				
		}
		
		
		
	}
	if($amenablity_date_mofify<='2015-12-31'){echo $amenablity_date_mofify.'---99';
		$year2			= date('Y', strtotime($amenablity_date));
		$month			= date('m', strtotime($amenablity_date));
		$date			= date('d', strtotime($amenablity_date));
		//$diff			= 2015-$year2;
		//$diff1			= $current_year-2015;
		$pre_date		= ($year2);
		$year_list		= $pre_date;
		$next_date 		= ($year2) ;
		for($i=$next_date;$i<2016;$i++){
			$pre_date		= $next_date;
			$next_date 		= $next_date+1 ;
			$year_list		= 	$pre_date;
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $serviceid_hidden,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factorytypeid_hidden,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1,
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $pre_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 1
			 );
		//print_r($year_calclation);	 
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		}
		
		
		if($next_date==2016){
			$pre_date		= $next_date;
			$next_date 		= $next_date+2 ;
			$year_list		= 	$pre_date." TO ".$next_date;
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $serviceid_hidden,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factorytypeid_hidden,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1,
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $next_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 3
			 );
			 print_r($year_calclation);	 
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		}
		
		if($next_date>2016){
			if($current_year >2019){
				
				$f= ($current_year-$next_date)-1;
					$application_for 	= $application_for + $f;
			 }if($current_year ==2018){
				$f= ($current_year-$next_date);
					$application_for 			= $application_for-1;
					
			  }if($current_year==2019){
				$f= ($current_year-$next_date);
					$application_for 			= $application_for;
					 
			  }
	
			  $pre_date		= $next_date+1;
			$next_date 		= $next_date+$application_for ;
			$year_list		= 	$pre_date." TO ".$next_date;
			 
			$year_calclation = array(
				'amanabilty_date' 				=> $amenablity_date_mofify,
				'valid_time_period' 			=> $application_for,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $serviceid_hidden,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factorytypeid_hidden,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1, 
				'calculate_starting_year'		=> $pre_date.'-01-01',
				'calculate_end_year'			=> $next_date.'-12-31',
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> $application_for
			 );
			
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		
		}
		
		
	}
  
}

function get_zone_name($value_block,$value_panchayat){
	
	$zonedata	= db_select('fa_village_ward_master', 'fvwm');
	$zonedata->innerjoin('fa_zone', 'fz', 'fvwm.zone_id=fz.zone_id');
	$zonedata->fields('fvwm', array('zone_name','zone_id'));
	$zonedata->fields('fz', array('zone_details'));
	$zonedata->condition('fvwm.block_code ',$value_block,'=');
	$zonedata->condition('fvwm.village_code ',$value_panchayat,'=');
	$fetch_zone = $zonedata->execute()->fetchAll();
	return $fetch_zone;
}

function documents_master_list($service_id,$factory_type_id,$uploaded_by){

$query_factory_documents 	=  db_select('fa_documents_master', 'documents');

$query_factory_documents	-> fields('documents',array('id','document_name','status','short_name','doc_listid'));
$query_factory_documents	-> condition('documents.document_service_id', $service_id, '=');
$query_factory_documents	-> condition('documents.document_factory_id', $factory_type_id, '=');

//----modify by Labani
$query_factory_documents	-> condition('documents.uploaded_by', $uploaded_by, '=');
$query_factory_documents	-> orderBy('documents.id', 'ASC');

$result_factory_documents 	= $query_factory_documents->execute()->fetchAll(); 
return $result_factory_documents;
}
function get_estate_type($estatetype){

$query_est 	=  db_select('fa_estate', 'fe');
$query_est	-> fields('fe',array('estate_name'));
$query_est	-> condition('fe.id', $estatetype);
$result_est  = $query_est->execute();
$resultEstateData 	=  $result_est->fetchAll();
return $resultEstateData;
}

///------------------view all documents (for all services) Labani-----------------------------
function get_attached_filename($application_id,$reference_id,$factory_type_id,$service_id){
//echo 'appid--'.$application_id.'refno--'.$reference_id.'facttype---.'.$factory_type_id.'service_id'.$service_id;die();
	$query_file 	=  db_select('fa_caf_upload_doc', 'file');
	$query_file	    -> fields('file',array());
	$query_file	    -> condition('file.app_id', $application_id);
	$query_file	    -> condition('file.application_reference_no', $reference_id);
	$query_file	    -> condition('file.upload_documents_service_id', $service_id);
	$query_file	    -> condition('file.upload_doc_factory_type_id', $factory_type_id);
	$query_file	    -> orderBy('file.id', 'desc');
	$query_file_details  =  $query_file->execute()->fetchAll();
//print_r($query_file->execute());die();
return $query_file_details;
}

function getCurrencyFormat($number)
{
    $decimal = round($number - ($no = floor($number)), 2) * 100;
    $hundred = null;
    $digits_length = strlen($no);
    $i = 0;
    $str = array();
    $words = array(0 => '', 1 => 'One', 2 => 'Two',
        3 => 'Three', 4 => 'Four', 5 => 'Five', 6 => 'Six',
        7 => 'Seven', 8 => 'Eight', 9 => 'Nine',
        10 => 'Ten', 11 => 'Eleven', 12 => 'Twelve',
        13 => 'Thirteen', 14 => 'Fourteen', 15 => 'Fifteen',
        16 => 'Sixteen', 17 => 'Seventeen', 18 => 'Eighteen',
        19 => 'Nineteen', 20 => 'Twenty', 30 => 'Thirty',
        40 => 'Forty', 50 => 'Fifty', 60 => 'Sixty',
        70 => 'Seventy', 80 => 'Eighty', 90 => 'Ninety');
    $digits = array('', 'Hundred','Thousand','Lakh', 'Crore');
    while( $i < $digits_length ) {
        $divider = ($i == 2) ? 10 : 100;
        $number = floor($no % $divider);
        $no = floor($no / $divider);
        $i += $divider == 10 ? 1 : 2;
        if ($number) {
            $plural = (($counter = count($str)) && $number > 9) ? 's' : null;
            $hundred = ($counter == 1 && $str[0]) ? ' and ' : null;
            $str [] = ($number < 21) ? $words[$number].' '. $digits[$counter]. $plural.' '.$hundred:$words[floor($number / 10) * 10].' '.$words[$number % 10]. ' '.$digits[$counter].$plural.' '.$hundred;
        } else $str[] = null;
    }
    $Rupees = implode('', array_reverse($str));
    $paise = ($decimal) ? "." . ($words[$decimal / 10] . " " . $words[$decimal % 10]) . ' Paise' : '';
    return ($Rupees ? $Rupees. 'Rupees ' : '') . $paise;
}
function fetch_amand_year($application_id){
		$calculateyear 	= array(""=>"- Select -");
		$all_year 	 	= array();
		$query_year	 	= db_select('fa_calculate_year', 'year');
		$query_year		-> fields('year',array());
		$query_year	 	-> condition('year.application_id', $application_id);
	///	$query_year	 	-> condition('year.service_id', $service_id);
		//$query_year		-> condition('year.factory_id', $factory_typeid);
		//$query_year	 	-> condition('year.reference_no', $reference_no);
		$query_year	 	-> condition('year.is_previous',1,'=');
		$result_year	 = $query_year->execute(); 
		if(!empty($result_year)) {
		foreach($result_year as $rows) {
			$all_year[$rows->id] = t('@year_details', array('@year_details' => $rows->calculate_year));
		}    
	}
	if (isset($all_year)) {
		return ($calculateyear + $all_year);	
	} else {	
		return $calculateyear;
	}
}
//4

function previous_calculation_for_license_period($license_vaild_date,$application_for,$serviceid_hidden,$factorytypeid_hidden,$reference_number,$application_id){
	 global $base_root, $base_path, $user;
	
		$i								=1;
	 	$service_id						= encryption_decryption_fun('decrypt',$serviceid_hidden);
	 	$factory_typeid					= encryption_decryption_fun('decrypt',$factorytypeid_hidden);
	 	$license_vaild_date_mofify		= date('Y-m-d',strtotime($license_vaild_date)) ;
		//$license_vaild_date_mofify 		= '2019-03-31';
		$month							= date('m',strtotime($license_vaild_date_mofify));
		$year							= date('Y',strtotime($license_vaild_date_mofify));
		//echo $license_vaild_date_mofify;die();
		
		if($license_vaild_date_mofify >= '2018-12-31' && $license_vaild_date_mofify <= '2019-12-28'){
					if($application_for>=3){
						if($month == 02){
							$apply_year = 365*3;
						}else{
							$apply_year = 365*3;
							
						}
						
							$day 		= "-".$apply_year."day";
							$pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($license_vaild_date_mofify)) . $day)); 
							$year_list	= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($license_vaild_date_mofify));
							$year_calclation = array(
										'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
										'valid_time_period' 			=> 3,
										'calculate_year'				=> $year_list,
										'service_id' 					=> $serviceid_hidden,
										'application_id' 				=> $application_id,
										'reference_no' 					=> $reference_number,
										'factory_id'					=> $factorytypeid_hidden,
										'created_by'					=> $user->uid,
										'is_active_year'				=> 1,
										'calculate_starting_year'		=> $calculate_starting_year,
										'calculate_end_year'			=> $calculate_end_year,
										'application_form_type'			=> 'Form-2',
										'showing_year'					=> 1,
										'is_previous'					=> 1
								 );
								//$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
								
						     $application_for = $application_for-3;
						
							$year_pre	= date('Y',strtotime($pre_date));
							$start_year = $year_pre-1;
									//if($start_year<=2015){
										$year	= $start_year;
										for($i=0;$i<$application_for;$i++){
										$next_date 			= $year-$i ;
										$calculate_starting_year 	= $next_date.'-01-01';
										$starting_year				= date('Y', strtotime($calculate_starting_year));
										$calculate_end_year 		= $next_date.'-12-31';
										if($starting_year == 2018){
											$calculate_starting_year	= '2016-01-01';
											$calculate_end_year 	    = '2018-12-31';
											$i 							= $i+2;
										}
									$year_list					= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
									$year_calclation = array(
										'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
										'valid_time_period' 			=> 1,
										'calculate_year'				=> $year_list,
										'service_id' 					=> $serviceid_hidden,
										'application_id' 				=> $application_id,
										'reference_no' 					=> $reference_number,
										'factory_id'					=> $factorytypeid_hidden,
										'created_by'					=> $user->uid,
										'is_active_year'				=> 1,
										'calculate_starting_year'		=> $calculate_starting_year,
										'calculate_end_year'			=> $calculate_end_year,
										'application_form_type'			=> 'Form-2',
										'showing_year'					=> 1,
										'is_previous'					=> 1
								 );
					
								print_r($year_calclation);
								//$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
							}			
			
	
							
						//}
							
							
						
					}
					if($application_for<3){
						 $valid_date = $license_vaild_date_mofify; 
						$month_valid	= date('m',strtotime($valid_date));
						$year_valid     = date('Y',strtotime($valid_date));  
						$date_valid	    = date('d',strtotime($valid_date));
						
			
						
						for($i =1 ;$i<=$application_for ; $i++ ){
							
							$month_valid	= date('m',strtotime($valid_date));
							$lepyear		= date('Y',strtotime($valid_date));
							$leap 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
							$is_lepyear		= ($leap ? 'leap' : 'not leap');
							if($month_valid == 2 && $is_lepyear == 'not leap'){
								$day 		= "-364"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}else if($month_valid == 1 && $is_lepyear == 'not leap'){
								$day 		= "-364"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}else{
								$day 		= "-366"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}
							 echo $pre_date .'-----------'.$valid_date;echo '<br>'  ;
							$lepyear_pre	= date('Y',strtotime($pre_date));
							$leap_pre 		= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
						    $is_lepyear_pre		= ($leap ? 'leap' : 'not leap');
							if($is_lepyear_pre =='not leap'){
								$day 		= "-365"."day";
							    $valid_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
							}
							 $pre_date .'-----------'.$valid_date;echo '<br>'  ;
						}
						
						/*for($i =1 ;$i<=$application_for ; $i++ ){
							$date_valid_next 	= $date_valid+1;
							$pre_year 			= $year_valid-1;
							//$leap_year 			= date('L', mktime(0, 0, 0, 1, 1, $pre_year));
							//echo $is_lepyear	= ($leap ? 'leap' : 'not leap');die();
						
							if($month_valid == 2){
								if($date_valid == 28 || $date_valid == 29){
									 $pre_date 	= ($year_valid-1).'-'.($month_valid+1).'-1'; 
								}
							}
							//$pre_date 	= ($year_valid-1).'-'.$month_valid.'-'.$date_valid_next; 
							echo $pre_date .'-----------'.$valid_date;echo '<br>'  ;
							
							$valid_date		= date('Y-m-d',strtotime($pre_date)) ;
							$month_valid	= date('m',strtotime($valid_date));
							$year_valid     = date('Y',strtotime($valid_date));
							
							if($month_valid == 3){
								if($date_valid == 1){
									$pre_date 	= ($year_valid-1).'-2'.'-28'; 
									
								}
									 
								
							}
							
							/*echo $pre_date .'-----------'.$valid_date;echo '<br>'  ;
							//$valid_date		= date('Y-m-d',strtotime($pre_date)) ;
							//$month_valid	= date('m',strtotime($valid_date));
							//echo $year_valid     = date('Y',strtotime($valid_date));
							//$leap 			= date('L', mktime(0, 0, 0, 1, 1, $year_valid));*/
							//echo $is_lepyear		= ($leap ? 'leap' : 'not leap');
							//$date_valid	    = date('d',strtotime($valid_date));
							
							//$date_valid_next = $date_valid+1;
						//}
					}die();
				} 
	    if($license_vaild_date_mofify > '2019-12-28'){
			echo $license_vaild_date_mofify;
					
						$valid_date = $license_vaild_date_mofify; 
						$month_valid	= date('m',strtotime($valid_date));
						$year_valid     = date('Y',strtotime($valid_date));  
						$date_valid	    = date('d',strtotime($valid_date));
						
			
						
						for($i =0 ;$i<=$application_for ; $i++ ){
							echo $i;echo '<br/>'; echo $application_for.'hi<br/>';
							
							$month_valid	= date('m',strtotime($valid_date));
							$lepyear		= date('Y',strtotime($valid_date));
							$leap 			= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
							$is_lepyear		= ($leap ? 'leap' : 'not leap');
							if($month_valid == 2 && $is_lepyear == 'not leap'){
								$day 		= "-364"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							} if($month_valid == 1 && $is_lepyear == 'not leap'){
								$day 		= "-364"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}if($is_lepyear == 'not leap'){echo 'hello'.$is_lepyear;
								$day 		= "-366"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}if($is_lepyear == 'leap'){echo 'echo'.$is_lepyear.'------'.$lepyear.'----------------------';
								$day 		= "-367"."day";
							    $pre_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
								
							}
							 echo $pre_date .'-----------'.$valid_date;echo '<br>'  ;
							$lepyear_pre	= date('Y',strtotime($pre_date));
							$leap_pre 		= date('L', mktime(0, 0, 0, 1, 1, $lepyear_pre));
						    $is_lepyear_pre		= ($leap ? 'leap' : 'not leap');
							
							if($is_lepyear_pre =='not leap'){
								$day 		= "-365"."day";
							    $valid_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
							}else{
								$day 		= "-365"."day";
							    $valid_date 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($valid_date)) . $day)); 
							}
							 $pre_date .'-----------'.$valid_date;echo '<br>'  ;
						}
						
						
					//die();
				} 
		
		
		
		
		//$application_for = 2;
		//$apply_year = 366*$application_for;
		/*if($license_vaild_date_mofify>'2015-12-31'){
			
			
			if($license_vaild_date_mofify == '2018-12-31'){
					$pre_date 			= '2016-01-01';
					$year	  			= date('Y', strtotime($pre_date))-1;
					$year_list			= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($license_vaild_date_mofify));
					$year_calclation 	= array(
						'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
						'valid_time_period' 			=> 1,
						'calculate_year'				=> $year_list,
						'service_id' 					=> $serviceid_hidden,
						'application_id' 				=> $application_id,
						'reference_no' 					=> $reference_number,
						'factory_id'					=> $factorytypeid_hidden,
						'created_by'					=> $user->uid,
						'is_active_year'				=> 1,
						'calculate_starting_year'		=> $pre_date,
						'calculate_end_year'			=> $license_vaild_date_mofify,
						'application_form_type'			=> 'Common Application Form',
						'showing_year'					=> 3,
						'is_previous'					=> 1
					);
					  $id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
					  $application_period = $application_for-3;
						if($application_period>0){
							for($i=0;$i<$application_period;$i++){
								
								$next_date 						= $year-$i ;
								$calculate_starting_year 		= $next_date.'-01-01';
								$calculate_end_year 			= $next_date.'-12-31';
								$previous_license_valid_upto	= date('Y-m-d',strtotime($calculate_end_year)) ;
								$year_list					= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
								$year_calclation = array(
									'previous_license_valid_upto' 	=> $previous_license_valid_upto,
									'valid_time_period' 			=> 1,
									'calculate_year'				=> $year_list,
									'service_id' 					=> $serviceid_hidden,
									'application_id' 				=> $application_id,
									'reference_no' 					=> $reference_number,
									'factory_id'					=> $factorytypeid_hidden,
									'created_by'					=> $user->uid,
									'is_active_year'				=> 1,
									'calculate_starting_year'		=> $calculate_starting_year,
									'calculate_end_year'			=> $calculate_end_year,
									'application_form_type'			=> 'Form-2',
									'showing_year'					=> 1,
									'is_previous'					=> 1
								 );
							
						
								$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
							}
						}
					
				
			 }*/
			//if($license_vaild_date_mofify <> '2018-12-31'){
				
				/*if($start_year>=2016){
					$leap 	= date('L', mktime(0, 0, 0, 1, 1, $start_year));
					
				}*/
				//if($license_vaild_date_mofify >= '2018-12-31' && $license_vaild_date_mofify <= '2019-12-28'){
					/*echo $start_year =$year -  ($application_for-1);
					if($start_year<=2015){
					$year			= date('Y', strtotime($license_vaild_date_mofify));
					for($i=0;$i<$application_for;$i++){
					$next_date 					= $year-$i ;
					$calculate_starting_year 	= $next_date.'-01-01';
					$starting_year			= date('Y', strtotime($calculate_starting_year));
					$calculate_end_year 	= $next_date.'-12-31';
					if($starting_year == 2018){
						$calculate_starting_year	= '2016-01-01';
					    $calculate_end_year 	    = '2018-12-31';
					    $i 							= $i+2;
					}
					$year_list					= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
					$year_calclation = array(
						'previous_license_valid_upto' 	=> $amenablity_date_mofify,
						'valid_time_period' 			=> 1,
						'calculate_year'				=> $year_list,
						'service_id' 					=> $serviceid_hidden,
						'application_id' 				=> $application_id,
						'reference_no' 					=> $reference_number,
						'factory_id'					=> $factorytypeid_hidden,
						'created_by'					=> $user->uid,
						'is_active_year'				=> 1,
						'calculate_starting_year'		=> $calculate_starting_year,
						'calculate_end_year'			=> $calculate_end_year,
						'application_form_type'			=> 'Form-2',
						'showing_year'					=> 1,
						'is_previous'					=> 1
				 );
			
				print_r($year_calclation);
			//$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
			   }			
			
	
			}
					if($start_year>=2016){
								$day 				= "-".$apply_year."day";
							echo 	$pre_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($license_vaild_date_mofify)) . $day)); 
						
					}die();*/
				//}
					
				  
			
				
			/*	if($license_vaild_date_mofify >= '2018-12-31' && $license_vaild_date_mofify <= '2019-12-28'){
					$pre_date 			= '2016-01-01';
					$year	  			= date('Y', strtotime($pre_date))-1;
					$year_list			= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($license_vaild_date_mofify));
					$year_calclation 	= array(
						'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
						'valid_time_period' 			=> 1,
						'calculate_year'				=> $year_list,
						'service_id' 					=> $serviceid_hidden,
						'application_id' 				=> $application_id,
						'reference_no' 					=> $reference_number,
						'factory_id'					=> $factorytypeid_hidden,
						'created_by'					=> $user->uid,
						'is_active_year'				=> 1,
						'calculate_starting_year'		=> $pre_date,
						'calculate_end_year'			=> $license_vaild_date_mofify,
						'application_form_type'			=> 'Common Application Form',
						'showing_year'					=> 3,
						'is_previous'					=> 1
					);
					print_r($year_calclation);
					//  $id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
					  $application_period = $application_for-3;
						if($application_period>0){
							for($i=0;$i<$application_period;$i++){
								
								$next_date 						= $year-$i ;
								$calculate_starting_year 		= $next_date.'-01-01';
								$calculate_end_year 			= $next_date.'-12-31';
								$previous_license_valid_upto	= date('Y-m-d',strtotime($calculate_end_year)) ;
								$year_list						= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
								$year_calclation = array(
									'previous_license_valid_upto' 	=> $previous_license_valid_upto,
									'valid_time_period' 			=> 1,
									'calculate_year'				=> $year_list,
									'service_id' 					=> $serviceid_hidden,
									'application_id' 				=> $application_id,
									'reference_no' 					=> $reference_number,
									'factory_id'					=> $factorytypeid_hidden,
									'created_by'					=> $user->uid,
									'is_active_year'				=> 1,
									'calculate_starting_year'		=> $calculate_starting_year,
									'calculate_end_year'			=> $calculate_end_year,
									'application_form_type'			=> 'Form-2',
									'showing_year'					=> 1,
									'is_previous'					=> 1
								 );
							
						print_r($year_calclation);
							//	$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
							}
						}
					
				
			 }die();*/
				
				
				/*$next_date1 		= $license_vaild_date_mofify;
				$next_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($next_date1)) . $day));
				$lepyear			= date('Y',strtotime($next_date));
				$leap 				= date('L', mktime(0, 0, 0, 1, 1, $lepyear));
				$is_lepyear			= ($leap ? 'leap' : 'not leap');
					if($is_lepyear == 'leap'){
						if($month == 2){
								$day 				= "-".(365)."day";
								$pre_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($next_date1)) . $day)); 
							
							}else{
								$day 				= "-".(364)."day";
								$pre_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($next_date1)) . $day)); 
							}
						
					}if($is_lepyear == 'not leap'){
						$day 				= "-".(364)."day";
						$pre_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($next_date1)) . $day)); 
					}
					
					echo $pre_date.'------------'.$next_date1;echo "<br>";
				for($i=1;$i<$application_for;$i++){
					
					echo $pre_date1 	= date('Y-m-d',strtotime(date("Y-m-d", strtotime($pre_date)) . $day));
					echo "<br>";
					 $month_pre		= date('m',strtotime($pre_date1));
					 $month_date	= date('d',strtotime($pre_date1));
					if($month_pre >=3){
						$year	= date('Y',strtotime($pre_date));
						$pre_year = $year-1;
						$next_year = $year+1;
						$pre_date  = $pre_year.'-'.$month_pre.'-'.$month_date;
						
						
					}*/
				
					
					//$day 				= "-".(365)."day";
					//$day 				= "-".(364)."day";
					//$pre_date 			= date('Y-m-d',strtotime(date("Y-m-d", strtotime($next_date1)) . $day)); 
					//$license_vaild_date_mofify = $pre_date;
					//echo $pre_date.'-------'.$next_date1;
				//}
				
			//}
		//}
		/*if($license_vaild_date_mofify == '2018-12-31'){
					$pre_date 			= '2016-01-01';
					$year	  			= date('Y', strtotime($pre_date))-1;
					$year_list			= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($license_vaild_date_mofify));
					$year_calclation 	= array(
						'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
						'valid_time_period' 			=> 1,
						'calculate_year'				=> $year_list,
						'service_id' 					=> $serviceid_hidden,
						'application_id' 				=> $application_id,
						'reference_no' 					=> $reference_number,
						'factory_id'					=> $factorytypeid_hidden,
						'created_by'					=> $user->uid,
						'is_active_year'				=> 1,
						'calculate_starting_year'		=> $pre_date,
						'calculate_end_year'			=> $license_vaild_date_mofify,
						'application_form_type'			=> 'Common Application Form',
						'showing_year'					=> 3,
						'is_previous'					=> 1
					);
					  $id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
					  $application_period = $application_for-3;
						if($application_period>0){
							for($i=0;$i<$application_period;$i++){
								
								$next_date 						= $year-$i ;
								$calculate_starting_year 		= $next_date.'-01-01';
								$calculate_end_year 			= $next_date.'-12-31';
								$previous_license_valid_upto	= date('Y-m-d',strtotime($calculate_end_year)) ;
								$year_list						= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
								$year_calclation = array(
									'previous_license_valid_upto' 	=> $previous_license_valid_upto,
									'valid_time_period' 			=> 1,
									'calculate_year'				=> $year_list,
									'service_id' 					=> $serviceid_hidden,
									'application_id' 				=> $application_id,
									'reference_no' 					=> $reference_number,
									'factory_id'					=> $factorytypeid_hidden,
									'created_by'					=> $user->uid,
									'is_active_year'				=> 1,
									'calculate_starting_year'		=> $calculate_starting_year,
									'calculate_end_year'			=> $calculate_end_year,
									'application_form_type'			=> 'Form-2',
									'showing_year'					=> 1,
									'is_previous'					=> 1
								 );
							
						
								$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
							}
						}
					
				
			 }*/
		
	/* 	if($license_vaild_date_mofify<='2016-12-29'){
			if($license_vaild_date_mofify >= '2018-12-31' && $license_vaild_date_mofify <= '2019-12-28'){//echo 'hi';die();
					$pre_date 			= '2016-'.$month.'-'.($date-1);
					$year_list			= date('dS M Y', strtotime($pre_date))." TO ". date('dS M Y', strtotime($license_vaild_date_mofify));
					$year_calclation 	= array(
						'previous_license_valid_upto' 	=> $license_vaild_date_mofify,
						'valid_time_period' 			=> 1,
						'calculate_year'				=> $year_list,
						'service_id' 					=> $serviceid_hidden,
						'application_id' 				=> $application_id,
						'reference_no' 					=> $reference_number,
						'factory_id'					=> $factorytypeid_hidden,
						'created_by'					=> $user->uid,
						'is_active_year'				=> 1,
						'calculate_starting_year'		=> $pre_date,
						'calculate_end_year'			=> $license_vaild_date_mofify,
						'application_form_type'			=> 'Common Application Form',
						'showing_year'					=> 3,
						'is_previous'					=> 1
					);
					
					print_r($year_calclation);
			
			   		//$id = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
				//$application_for1  = $application_for-1;
				//$vaild_date =  $pre_date;  
				
				}
				
	 	}die();*/
		
	 /*	if($license_vaild_date_mofify<='2015-12-31'){
		$year			= date('Y', strtotime($license_vaild_date_mofify));
				
		for($i=0;$i<$application_for;$i++){
			
			$next_date 					= $year-$i ;
			$calculate_starting_year 	= $next_date.'-01-01';
			$calculate_end_year 		= $next_date.'-12-31';
			$year_list					= date('dS M Y', strtotime($calculate_starting_year))." TO ". date('dS M Y', strtotime($calculate_end_year));
			$year_calclation = array(
				'previous_license_valid_upto' 	=> $amenablity_date_mofify,
				'valid_time_period' 			=> 1,
				'calculate_year'				=> $year_list,
				'service_id' 					=> $serviceid_hidden,
				'application_id' 				=> $application_id,
				'reference_no' 					=> $reference_number,
				'factory_id'					=> $factorytypeid_hidden,
				'created_by'					=> $user->uid,
				'is_active_year'				=> 1,
				'calculate_starting_year'		=> $calculate_starting_year,
				'calculate_end_year'			=> $calculate_end_year,
				'application_form_type'			=> 'Form-2',
				'showing_year'					=> 1,
				'is_previous'					=> 1
			 );
		
		//print_r($year_calclation);
		$id  = db_insert('fa_calculate_year')->fields($year_calclation)->execute();
		}
		
	}*///die();
  
}

function get_verified_field_chem($application_id, $reference_number, $plan_approve_status) {

	$query_check_applicant = db_select('fa_cafa_remarks','fcr');
	$query_check_applicant ->fields('fcr', array('verify_details','doc_verify'));
	$query_check_applicant ->condition('fcr.app_id', $application_id, '=');
	$query_check_applicant ->condition('fcr.app_reference_no', $reference_number, '=');
	$query_check_applicant ->condition('fcr.plan_status_chem', $plan_approve_status, '=');
	$query_check_applicant ->orderBy('fcr.id','DESC');
    $query_check_applicant ->range(0, 1);
	//echo $query_check_applicant; //die;
	$result = $query_check_applicant->execute();
	$details_check = $result->fetchAssoc();

	return $details_check;
}

function get_checklist_data($app_id,$factory_type,$is_chemical){
	//$fetch_observation	= db_select('fa_checklist_observations', 'checklist');
	$fetch_observation	= db_select('fa_checklist_observations_old', 'checklist');
	//$fetch_condition->InnerJoin('fa_cafa_remarks', 'remarks', 'checklist.remark_table_id = remarks.id');
	$fetch_observation->fields('checklist', array('checklist_id','observations_id','remark_by_ad','ad_details','remark_by_dd','dd_details','remark_by_jd','jd_details','ad_extra_observation','dd_extra_observation','jd_extra_observation','remark_table_id'));
	$fetch_observation->condition('checklist.app_id', $app_id, '=');
	$fetch_observation->condition('checklist.factory_type', $factory_type, '=');
	$fetch_observation->condition('checklist.is_chemical', $is_chemical, '=');
	//$fetch_condition->fields('remarks', array('id'));
	$fetch_observation-> orderBy('checklist.checklist_id', 'ASC');
	$observation_result = $fetch_observation->execute()->fetchAll(); 
	return $observation_result;
}

function get_observations_details($id){
	$observations_details	=  db_query("SELECT observations  FROM {fa_observations_mst} WHERE id = '".$id."'")->fetchObject()->observations;
	return $observations_details;
}

function get_notice_application($zoneUserMap,$tablename){ // TO SHOW ALL NOTICE DATA TO INSPECTOR/DEPUTY END ZONEWISE //,$status

	$fetch_application	= db_select($tablename, 'tbl');
	$fetch_application->InnerJoin('fa_zone', 'fz', 'fz.zone_id=tbl.factory_zone');
	$fetch_application->fields('tbl');//,array('fna.id')
	$fetch_application->fields('fz',array('zone_name'));
	$fetch_application->condition('tbl.factory_zone',$zoneUserMap,'in');
	$fetch_application->condition('tbl.notice_status','RC','!=');
	$fetch_application->orderBy('tbl.id', 'desc');
	$application_result = $fetch_application->execute()->fetchAll();
	return $application_result;
}

function get_form19_data() 								// TO SHOW ALL DATA IN LIST
{
	$fetch_details	= db_select('fa_form19_dangerous_occurrence', 'fdo');
	$fetch_details	->fields('fdo', array());
	$fetch_details	->orderBy('id', 'DESC');
	$fetch_details	->condition('fdo.notice_status','In','!=');
	$details_result = $fetch_details->execute()->fetchAll(); 
	return $details_result;
}
function get_form20_data()								// TO SHOW ALL DATA IN LIST
{	
	$fetch_details	= db_select('fa_form20_notice_poisoning', 'fdo');
	$fetch_details	->fields('fdo', array());
	$fetch_details	->orderBy('id', 'DESC');
	$fetch_details	->condition('fdo.notice_status','In','!=');
	$details_result = $fetch_details->execute()->fetchAll(); 
	return $details_result;
}
function get_form18_data()								// TO SHOW ALL DATA IN LIST
{	
	$fetch_details	= db_select('fa_form18_notice_accident', 'fdo');
	$fetch_details	->fields('fdo', array());
	$fetch_details	->orderBy('id', 'DESC');
	$fetch_details	->condition('fdo.notice_status','In','!=');
	$details_result = $fetch_details->execute()->fetchAll(); 
	return $details_result;
}

function yearly_power_worker_details_amendment($application_id,$factory_type,$service_id,$application_reference_no){//echo 'hii';die();

//die($application_id.'-----'.$factory_type.'-----'.$service_id.'-----'.$application_reference_no);
	$query_power 			=  db_select('power_worker_yearly', 'power');
	$query_power			-> fields('power',array('installed_power_hp','calculate_year','worker_total','type_power_station','installed_power','valid_time_period','calculate_starting_year','calculate_end_year'));
	//$query_power			-> fields('power',array());
	$query_power			-> condition('power.application_id', $application_id);
	$query_power			-> condition('power.application_reference_no', $application_reference_no);
	$query_power			-> condition('power.factory_type', $factory_type);
	$query_power			-> condition('power.service_id', $service_id);
	$query_power   			-> orderBy('starting_year', 'ASC');//ORDER BY created
	$query_power   			-> orderBy('is_amended', 1,'=');
	$query_power   			-> orderBy('is_amendment', 1,'=');//ORDER BY created
	$query_power_details 	=  $query_power->execute()->fetchAll();
	
	return $query_power_details;
}

function fun_worker_detials_amend($application_id,$service_id,$factory_typeid,$calculate_year_id,$application_reference_no){
	
	$query_worker_details1 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details1	-> fields('worker_details',array());
	$query_worker_details1	-> condition('worker_details.application_id', $application_id);
	$query_worker_details1	-> condition('worker_details.service_id', $service_id);
	$query_worker_details1	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('worker_details.application_reference_no', $application_reference_no);
	$query_worker_details1	-> condition('worker_details.is_amendment',1);
	$query_worker_details1	-> condition('worker_details.calculate_year_id',$calculate_year_id);
	$query_worker_amanad_id 	=  $query_worker_details1->execute()->fetchObject()->id;
	
	
	return $query_worker_amanad_id;
}

function fa_power_details_amend($application_id,$service_id,$factory_typeid,$calculate_year_id,$application_reference_no){
	
	
	$query_power1 	=  db_select('fa_power_details', 'power');
	$query_power1	-> fields('power',array());
	$query_power1	-> condition('power.application_id', $application_id);
	$query_power1	-> condition('power.service_id', $service_id);
	$query_power1	-> condition('power.factory_type', $factory_typeid);
	$query_power1	-> condition('power.application_reference_no', $application_reference_no);
	$query_power1	-> condition('power.is_amended',1);
	$query_power1	-> condition('power.calculate_year_id',$calculate_year_id);
	$query_power1	-> orderBy('power.id', 'desc');
	$query_power_amand_id 	=  $query_power1->execute()->fetchObject()->id;
	
	
	return $query_power_amand_id;
}
function fun_fetch_amend($application_id,$service_id,$factory_typeid,$application_reference_no){
	
	$query_worker_details1 	=  db_select('power_worker_amand', 'amand');
	$query_worker_details1	-> fields('amand',array());
	$query_worker_details1	-> condition('amand.application_id', $application_id);
	$query_worker_details1	-> condition('amand.service_id', $service_id);
	$query_worker_details1	-> condition('amand.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('amand.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('amand.application_reference_no', $application_reference_no);
	$query_worker_details1	-> condition('amand.is_amendment',1);
	$query_worker_amanad_id 	=  $query_worker_details1->execute()->fetchAll();
	
	
	return $query_worker_amanad_id;
}


function fetch_old_data($application_id,$service_id,$factory_type_id,$reference_number){
	$query_year		= 	db_select('power_worker_amand', 'worker');
	
	$query_year		->	fields('worker',array());
	
	$query_year		-> 	condition('worker.application_id', $application_id);
	$query_year		-> 	condition('worker.service_id', $service_id);
	$query_year		-> 	condition('worker.factory_type', $factory_type_id);
	$query_year		-> 	condition('worker.application_reference_no', $reference_number);
	$query_year	-> orderBy('worker.starting_year', 'ASC');
	$result_year	= 	$query_year->execute()->fetchAll();
	return $result_year;
}
function fun_check_grn($gren_no){
	$query_grn 	=  db_select('fa_manual_payment_history', 'payment_history');
	$query_grn	-> fields('payment_history',array('id'));
	$query_grn	-> condition('payment_history.brn_grn_challan_no', $gren_no);
	$query_grn_id 	=  $query_grn->execute()->fetchObject()->id;
	
	
	return $query_grn_id;
}


function fun_worker_detials_amendnotice($application_id,$service_id,$factory_typeid,$application_reference_no){
	
	$query_worker_details1 	=  db_select('fa_worker_details', 'worker_details');
	$query_worker_details1	-> fields('worker_details',array());
	$query_worker_details1	-> condition('worker_details.application_id', $application_id);
	$query_worker_details1	-> condition('worker_details.service_id', $service_id);
	$query_worker_details1	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('worker_details.factory_type', $factory_typeid);
	$query_worker_details1	-> condition('worker_details.application_reference_no', $application_reference_no);
	$query_worker_details1	-> condition('worker_details.is_amendment',1);
	
	$query_worker_amanad 	=  $query_worker_details1->execute()->fetchAll();
	
	//print_r($query_worker_amanad);
	return $query_worker_amanad;
}
function get_application_log($application_id){
	$fetch_application	= db_select('fa_cafa_log ', 'cafa_l');
	$fetch_application->InnerJoin('fa_service_master', 'service_master', 'service_master.id=cafa_l.service_id');
	$fetch_application->leftjoin('fa_factory_type_master', 'factory_type', 'factory_type.id=cafa_l.factory_typeid');
	$fetch_application->InnerJoin('fa_zone', 'zone', 'zone.zone_id=cafa_l.factory_zone');
	$fetch_application->fields('cafa_l', array('plan_approve_status','application_status','service_id','factory_name','factory_reg_identification_number','id','created_date','factory_typeid','reference_number','plan_approve_identification_number','backlog_plan_approval_no','factory_plan_approval_number','uploaded_letter','uploaded_plan','modification_date','backlog_plan_approval_date','plan_approval_date','factory_registrstion_no','registration_date','backlog_registration_no','backlog_registration_date','factory_license_no','license_date','backlog_license_date','backlog_license_number','approve_dsc_reg_file_id','approve_dsc_licence_file_id','renewal_dim_appoved','license_valid_upto','is_backlog','tm_factory_id','tm_migrated_flag',
	'approve_dsc_licence_file','approve_dsc_reg_licence_file','approve_dsc_reg_file','uploaded_pdf','backlog_uploaded_letter','backlog_uploaded_plan','previous_id'));
	$fetch_application->fields('service_master', array('service_name'));
	$fetch_application->fields('factory_type', array('factory_type')); 
	$fetch_application->fields('zone', array('zone_name'));
	$fetch_application->condition('cafa_l.previous_id ',$application_id,'=');
	$fetch_application	-> orderBy('cafa_l.id', 'ASC');
	$application_result = $fetch_application->execute()->fetchAll();   
	return $application_result;
}
function get_application_viewlog($application_id,$reference_number,$factory_typeid,$service_id){
	$fetch_application	= db_select('fa_cafa_log ', 'cafa_l');
	$fetch_application->fields('cafa_l', array());
	$fetch_application->condition('cafa_l.previous_id ',$application_id,'=');
	$fetch_application->condition('cafa_l.reference_number ',$reference_number,'=');
	$fetch_application->condition('cafa_l.factory_typeid ',$factory_typeid,'=');
	$fetch_application->condition('cafa_l.service_id ',$service_id,'=');
	$application_result = $fetch_application->execute()->fetchAssoc();   
	return $application_result;
}


//by rima
	function get_factory_LIC_REG_NO($uid){
		$default_select 	= array(""=>"--Select--");
		
		$result 	 = db_query("SELECT id,factory_name,factory_registrstion_no,factory_license_no,backlog_registration_no,backlog_license_number FROM {fa_cafa} WHERE ((factory_registrstion_no != '' AND factory_license_no != '') OR (backlog_registration_no != '' AND backlog_license_number != '')) AND created_by ='".$uid."'");
		$list 	 = array();
		foreach ($result as $record) {
			
			if(($record->factory_registrstion_no != '') && ($record->factory_license_no != ''))
			{
				$combineData = 'Reg No: '.$record->factory_registrstion_no.' and Lic No: '.$record->factory_license_no;
			} else {
				$combineData = 'Reg No: '.$record->backlog_registration_no.' and Lic No: '.$record->backlog_license_number;
			}
			
			$list[$record->id] = t('@factoryname', array(
			'@factoryname' =>  $combineData,
			));
		}
		//$last_select 	= array(0=>"Other");
		return ($default_select+$list);//+$last_select
	}
	
	
function remark_input($application_reference_no,$application_id,$status,$remark){
	global $base_root, $base_path, $user;
	$query_check_applicant = db_select('fa_cafa_remarks','remarks');
		$query_check_applicant->fields('remarks', array());
		$query_check_applicant->condition('remarks.app_id', $application_id, '=');
		$query_check_applicant->condition('remarks.app_reference_no', $application_reference_no, '=');
		$query_check_applicant->orderBy('remarks.id','DESC');
		$query_check_applicant->range(0, 1);
		$result = $query_check_applicant->execute();
		$remark_field = $result->fetchAssoc();
		
		 $cafa_remarks = array(
								'app_id'   	  		 => $application_id,
								'remark_by_uid'  	 => $user->uid,
								'remark_by_roleid' 	 => 4,
								'remark_to_roleid' 	 => 9,
								'sending_time' 	  	 => date('Y-m-d h:i'),
								'app_reference_no' 	 => $application_reference_no,
								'remark_type'	  	 => 'r',
								'verify_details'	 => $remark_field['verify_details'],
								'status' 			 => $status,
								'remarks'			 => $remark
								
									
						);

						$remark_id = db_insert('fa_cafa_remarks')->fields($cafa_remarks)->execute();
		  
}
function remark_fetch($application_reference_no,$application_id,$remark_by_rid){
	global $base_root, $base_path, $user;
	//echo $application_reference_no.'---'.$application_id.'---'.$remark_by_uid;//die;
	$query_check_applicant = db_select('fa_cafa_remarks','remarks');
		$query_check_applicant->fields('remarks', array());
		$query_check_applicant->condition('remarks.app_id', $application_id, '=');
		$query_check_applicant->condition('remarks.app_reference_no', $application_reference_no, '=');
		$db_or = db_or();
		$db_or->condition('remarks.remark_by_roleid', $remark_by_rid, '=');
		$db_or->condition('remarks.remark_to_roleid', $remark_by_rid, '=');
		$query_check_applicant->condition($db_or);
		$query_check_applicant->condition('remarks.remark_type', 'r', '=');
		$query_check_applicant->orderBy('remarks.id','DESC');
		
		$result = $query_check_applicant->execute();
		$remarks = $result->fetchAll();
		return $remarks;
		
		
		  
}
function fetch_previous_power_workerdata($application_id,$year_id,$factory_typeid){
	$result 	 = db_query("SELECT previous_ref,pre_service_id,previous_factory_typeid,log_id FROM logmapping_view 
WHERE application_id = '".$application_id."' and log_id = (SELECT MAX(log_id) as log_id FROM logmapping_view)"
);
$pre_data = $result->fetchAssoc();
	
	if($factory_typeid == 1 || $factory_typeid==3){
		$power_worker_details_pre = yearly_power_worker_details_accordingyears($application_id,$pre_data['previous_factory_typeid'],$pre_data['pre_service_id'],$pre_data['previous_ref'],$year_id);
	}else{
		$power_worker_details_pre = worker_detials_for_fees2mii_accordingyears($application_id,$pre_data['previous_factory_typeid'],$pre_data['previous_factory_typeid'],$pre_data['pre_service_id'],$year_id);
	}

	
	
	return $power_worker_details_pre;	
	
}

function yearly_power_worker_details_accordingyears($application_id,$factory_type,$service_id,$application_reference_no,$year_id){

	$query_power 			=  db_select('power_worker_yearly', 'power');
	$query_power			-> fields('power',array());
	$query_power			-> condition('power.application_id', $application_id);
	$query_power			-> condition('power.application_reference_no', $application_reference_no);
	$query_power			-> condition('power.factory_type', $factory_type);
	$query_power			-> condition('power.service_id', $service_id);
	$query_power			-> condition('power.id', $year_id);
	$query_power   			-> orderBy('power.calculate_starting_year', 'ASC');
	$query_power_details 	=  $query_power->execute()->fetchAssoc();
	return $query_power_details;
}
function worker_detials_for_fees2mii_accordingyears($application_id,$worker_referance_no,$factory_typeid,$service_id,$year_id){

	$query_worker_details 	=  db_select('worker2mii', 'worker_details');
	$query_worker_details	-> fields('worker_details',array());
	$query_worker_details	-> condition('worker_details.application_id_worker', $application_id);
	$query_worker_details	-> condition('worker_details.service_id_worker', $service_id);
	$query_worker_details	-> condition('worker_details.factory_type_worker', $factory_typeid);
	$query_worker_details	-> condition('worker_details.reference_no_worker', $worker_referance_no);
	$query_worker_details	-> condition('worker_details.application_id_year', $worker_referance_no);
	$query_worker_details	-> 	orderBy('worker_details.application_id_worker', 'ASC');
	$result_worker_details 	=  $query_worker_details->execute()->fetchAssoc();

	return $result_worker_details;
}


function fun_grip_input($payment_amount,$application_id,$service_id,$reference_no,$factory_type_id,$brn_no){
	global $base_root, $base_path, $user;
	
	$brn_no ='0000/SR'.$service_id.'/Re'.$reference_no.'/Ty'.$factory_type_id.'/'.time();
	 $grip_input = array(
								'payment_amount'   	 	=> $payment_amount,
								'payment_date' 	 		=> date('Y-m-d'),
								'application_id' 	 	=> $application_id,
								'service_id' 	  	 	=> $service_id,
								'reference_no' 	 		=> $reference_no,
								'factory_type_id'	  	=> $factory_type_id,
								'brn_no'	 			=> $brn_no,
								'created_by' 			=> $user->uid,
								'created_date'			=> date('Y-m-d'),
								
									
					);

			$grip_input_id = db_insert('fa_grips_payment_details')->fields($grip_input)->execute();
		  
}
function fun_grip_input_fetch($application_id,$service_id,$reference_no,$factory_type_id){
	global $base_root, $base_path, $user;
	//echo $application_reference_no.'---'.$application_id.'---'.$remark_by_uid;//die;
		$query_check_payment = db_select('fa_grips_payment_details','grips');
		$query_check_payment->fields('grips', array());
		$query_check_payment->condition('grips.application_id', $application_id, '=');
		$query_check_payment->condition('grips.reference_no', $reference_no, '=');
		$query_check_payment->condition('grips.factory_type_id', $factory_type_id, '=');
		$query_check_payment->condition('grips.service_id', $service_id, '=');
		
		$query_check_payment->orderBy('grips.id','DESC');
		
		$result_check_payment = $query_check_payment->execute()->fetchAll();
	
		return $result_check_payment;
	
		  
}
function file_head_name($id){

		$result = db_query('SELECT distinct document_name  FROM {fa_documents_masterlist} WHERE id = :id',array(':id'=>$id))->fetchObject()->document_name;
		return $result;
	}


	function get_all_owner_data($application_id,$service_id,$factory_typeid,$reference_number){
		//echo $application_id;
	//	echo '<br>'.$service_id;
	//	echo '<br>'.$factory_typeid;
	//	echo '<br>'.$reference_number;
		
		$query_data 	=  db_select('fa_owner_details', 'od');
		$query_data	    -> fields('od',array());
		$query_data	    -> condition('od.application_id', $application_id);
		$query_data	    -> condition('od.service_id', $service_id);
		$query_data	    -> condition('od.factory_type_id', $factory_typeid);
		$query_data		-> condition('od.application_reference_no', $reference_number);
		$query_data		-> orderBy('od.id', 'desc');
		$owner_data  =  $query_data->execute()->fetchAll();
		return $owner_data;
	}
	function documents_master_data($service_id,$factory_type_id){
		$query_factory_documents 	=  db_select('fa_documents_master', 'documents');
		$query_factory_documents	-> fields('documents',array('id','doc_listid'));
		$query_factory_documents	-> condition('documents.document_service_id', $service_id, '=');
		$query_factory_documents	-> condition('documents.document_factory_id', $factory_type_id, '=');
		$query_factory_documents ->condition('documents.uploaded_by', 'Applicant', '=');
		//$query_factory_documents	-> condition('documents.id',array(19), 'NOT IN');
		$query_factory_documents	-> orderBy('documents.id', 'ASC');
		$result_factory_documents 	= $query_factory_documents->execute()->fetchAll(); 
	return $result_factory_documents;
	}
	
	function upload_document_data($application_id,$referance_number,$service_id,$factory_type_id){
		//echo $application_id.'---'.$referance_number.'---'.$service_id.'---'.$factory_type_id;
		$query 	=  db_select('fa_caf_upload_all_doc', 'fcud')->distinct();
		$query 	-> fields('fcud', array('doc_master_id'));
		$query	-> condition('fcud.application_id', $application_id);
		$query	-> condition('fcud.application_reference_no', $referance_number);
		$query	-> condition('fcud.service_id', $service_id);
		$query	-> condition('fcud.factory_typeid', $factory_type_id);
		//$query	-> condition('fcud.doc_id',array(19), 'NOT IN');
		$query	-> orderBy('fcud.doc_master_id', 'ASC');
	//	echo $query;die;
		$resultData = $query->execute()->fetchAll();

	return $resultData;
	} 


	//ADD by LABANI
function fetch_checkpoint($application_id,$reference_no,$factory_type_id,$service_id){
	$query_check_applicant = db_select('fa_caf_check_point','ck');
	$query_check_applicant->fields('ck', array());
	$query_check_applicant->condition('ck.app_id', $application_id, '=');
	$query_check_applicant->condition('ck.reference_no', $reference_no, '=');
	$query_check_applicant->orderBy('ck.id','DESC');
	$result = $query_check_applicant->execute();
	$data = $result->fetchAssoc();
return $data;
}